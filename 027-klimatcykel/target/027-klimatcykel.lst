
/Users/jido/Documents/GitHub/x045-027-laddbox/027-klimatcykel/target/027-klimatcykel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004728  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a4740  080a4740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a4748  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000300  080a474c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000060c  20000370  20000370  00040370  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  080a47bc  080a47bc  000347bc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  080a47e8  080a47e8  000347e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b087f  00000000  00000000  000347ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ffbf  00000000  00000000  000e506b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016256  00000000  00000000  000f502a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002430  00000000  00000000  0010b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003860  00000000  00000000  0010d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024e4a  00000000  00000000  00110f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00023939  00000000  00000000  00135d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cc2b  00000000  00000000  00159693  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c638  00000000  00000000  001f62c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	5c 42 0a 08                                         \B..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 ffff 	bl	80a4030 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f804 	bl	80a4046 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a474c 	.word	0x080a474c
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	2000097c 	.word	0x2000097c
 80a0058:	2000097c 	.word	0x2000097c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fc61 	bl	80a2924 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4708 	.word	0x080a4708
 80a0084:	080a4740 	.word	0x080a4740

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 babe 	b.w	80a0608 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa11 	bl	80a04b4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bc07 	b.w	80a28a8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 b97f 	b.w	80a139c <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 b97d 	b.w	80a139c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 b983 	b.w	80a13ac <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 b981 	b.w	80a13ac <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr
	...

080a00bc <_Z8callbackPcPhj>:
  p[length] = NULL;

//  Serial.print("MQTT rx:");
//  Serial.println(p);
//  setMessage(p);
    forceReading = 1;
 80a00bc:	4b01      	ldr	r3, [pc, #4]	; (80a00c4 <_Z8callbackPcPhj+0x8>)
 80a00be:	2201      	movs	r2, #1
 80a00c0:	601a      	str	r2, [r3, #0]
 80a00c2:	4770      	bx	lr
 80a00c4:	20000300 	.word	0x20000300

080a00c8 <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a00c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00ca:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a00cc:	4605      	mov	r5, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00ce:	f001 ff0f 	bl	80a1ef0 <_ZNK6String6charAtEj>
 80a00d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00d6:	2b07      	cmp	r3, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00d8:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00da:	d81f      	bhi.n	80a011c <_Z16tinkerAnalogRead6String+0x54>

	if(pin.startsWith("D"))
 80a00dc:	4914      	ldr	r1, [pc, #80]	; (80a0130 <_Z16tinkerAnalogRead6String+0x68>)
 80a00de:	4668      	mov	r0, sp
 80a00e0:	f001 fe41 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00e4:	4669      	mov	r1, sp
 80a00e6:	4628      	mov	r0, r5
 80a00e8:	f001 fef0 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a00ec:	4606      	mov	r6, r0
 80a00ee:	4668      	mov	r0, sp
 80a00f0:	f001 fdf2 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a00f4:	b9ae      	cbnz	r6, 80a0122 <_Z16tinkerAnalogRead6String+0x5a>
	{
		return -3;
	}
	else if (pin.startsWith("A"))
 80a00f6:	490f      	ldr	r1, [pc, #60]	; (80a0134 <_Z16tinkerAnalogRead6String+0x6c>)
 80a00f8:	4668      	mov	r0, sp
 80a00fa:	f001 fe34 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00fe:	4628      	mov	r0, r5
 80a0100:	4669      	mov	r1, sp
 80a0102:	f001 fee3 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a0106:	4605      	mov	r5, r0
 80a0108:	4668      	mov	r0, sp
 80a010a:	f001 fde5 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a010e:	b15d      	cbz	r5, 80a0128 <_Z16tinkerAnalogRead6String+0x60>
	{
		return analogRead(pinNumber+10);
 80a0110:	f1a4 0026 	sub.w	r0, r4, #38	; 0x26
 80a0114:	b280      	uxth	r0, r0
 80a0116:	f002 fcaa 	bl	80a2a6e <analogRead>
 80a011a:	e007      	b.n	80a012c <_Z16tinkerAnalogRead6String+0x64>
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a011c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0120:	e004      	b.n	80a012c <_Z16tinkerAnalogRead6String+0x64>

	if(pin.startsWith("D"))
	{
		return -3;
 80a0122:	f06f 0002 	mvn.w	r0, #2
 80a0126:	e001      	b.n	80a012c <_Z16tinkerAnalogRead6String+0x64>
	}
	else if (pin.startsWith("A"))
	{
		return analogRead(pinNumber+10);
	}
	return -2;
 80a0128:	f06f 0001 	mvn.w	r0, #1
}
 80a012c:	b004      	add	sp, #16
 80a012e:	bd70      	pop	{r4, r5, r6, pc}
 80a0130:	080a4270 	.word	0x080a4270
 80a0134:	080a4272 	.word	0x080a4272

080a0138 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a0138:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a013a:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a013c:	b085      	sub	sp, #20
 80a013e:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a0140:	f001 fed6 	bl	80a1ef0 <_ZNK6String6charAtEj>
 80a0144:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0148:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a014a:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a014c:	d825      	bhi.n	80a019a <_Z17tinkerDigitalRead6String+0x62>

	if(pin.startsWith("D"))
 80a014e:	4916      	ldr	r1, [pc, #88]	; (80a01a8 <_Z17tinkerDigitalRead6String+0x70>)
 80a0150:	4668      	mov	r0, sp
 80a0152:	f001 fe08 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0156:	4669      	mov	r1, sp
 80a0158:	4630      	mov	r0, r6
 80a015a:	f001 feb7 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a015e:	4607      	mov	r7, r0
 80a0160:	4668      	mov	r0, sp
 80a0162:	f001 fdb9 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a0166:	b10f      	cbz	r7, 80a016c <_Z17tinkerDigitalRead6String+0x34>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 80a0168:	b2ac      	uxth	r4, r5
 80a016a:	e00e      	b.n	80a018a <_Z17tinkerDigitalRead6String+0x52>
		return digitalRead(pinNumber);
	}
	else if (pin.startsWith("A"))
 80a016c:	490f      	ldr	r1, [pc, #60]	; (80a01ac <_Z17tinkerDigitalRead6String+0x74>)
 80a016e:	4668      	mov	r0, sp
 80a0170:	f001 fdf9 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0174:	4669      	mov	r1, sp
 80a0176:	4630      	mov	r0, r6
 80a0178:	f001 fea8 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a017c:	4605      	mov	r5, r0
 80a017e:	4668      	mov	r0, sp
 80a0180:	f001 fdaa 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a0184:	b165      	cbz	r5, 80a01a0 <_Z17tinkerDigitalRead6String+0x68>
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 80a0186:	3c26      	subs	r4, #38	; 0x26
 80a0188:	b2a4      	uxth	r4, r4
 80a018a:	4620      	mov	r0, r4
 80a018c:	2103      	movs	r1, #3
 80a018e:	f002 fc31 	bl	80a29f4 <pinMode>
		return digitalRead(pinNumber+10);
 80a0192:	4620      	mov	r0, r4
 80a0194:	f002 fc58 	bl	80a2a48 <digitalRead>
 80a0198:	e004      	b.n	80a01a4 <_Z17tinkerDigitalRead6String+0x6c>
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a019a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a019e:	e001      	b.n	80a01a4 <_Z17tinkerDigitalRead6String+0x6c>
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
 80a01a0:	f06f 0001 	mvn.w	r0, #1
}
 80a01a4:	b005      	add	sp, #20
 80a01a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a01a8:	080a4270 	.word	0x080a4270
 80a01ac:	080a4272 	.word	0x080a4272

080a01b0 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a01b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a01b2:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a01b4:	b085      	sub	sp, #20
 80a01b6:	4606      	mov	r6, r0
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a01b8:	f001 fe9a 	bl	80a1ef0 <_ZNK6String6charAtEj>
 80a01bc:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a01c0:	2c07      	cmp	r4, #7
 80a01c2:	d845      	bhi.n	80a0250 <_Z18tinkerDigitalWrite6String+0xa0>

	if(command.substring(3,7) == "HIGH") value = 1;
 80a01c4:	2307      	movs	r3, #7
 80a01c6:	2203      	movs	r2, #3
 80a01c8:	4631      	mov	r1, r6
 80a01ca:	4668      	mov	r0, sp
 80a01cc:	f001 fe92 	bl	80a1ef4 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a01d0:	4924      	ldr	r1, [pc, #144]	; (80a0264 <_Z18tinkerDigitalWrite6String+0xb4>)
 80a01d2:	4668      	mov	r0, sp
 80a01d4:	f001 fe52 	bl	80a1e7c <_ZNK6String6equalsEPKc>
 80a01d8:	4605      	mov	r5, r0
 80a01da:	4668      	mov	r0, sp
 80a01dc:	f001 fd7c 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a01e0:	b97d      	cbnz	r5, 80a0202 <_Z18tinkerDigitalWrite6String+0x52>
	else if(command.substring(3,6) == "LOW") value = 0;
 80a01e2:	2306      	movs	r3, #6
 80a01e4:	2203      	movs	r2, #3
 80a01e6:	4631      	mov	r1, r6
 80a01e8:	4668      	mov	r0, sp
 80a01ea:	f001 fe83 	bl	80a1ef4 <_ZNK6String9substringEjj>
 80a01ee:	491e      	ldr	r1, [pc, #120]	; (80a0268 <_Z18tinkerDigitalWrite6String+0xb8>)
 80a01f0:	4668      	mov	r0, sp
 80a01f2:	f001 fe43 	bl	80a1e7c <_ZNK6String6equalsEPKc>
 80a01f6:	4607      	mov	r7, r0
 80a01f8:	4668      	mov	r0, sp
 80a01fa:	f001 fd6d 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a01fe:	b90f      	cbnz	r7, 80a0204 <_Z18tinkerDigitalWrite6String+0x54>
 80a0200:	e029      	b.n	80a0256 <_Z18tinkerDigitalWrite6String+0xa6>
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	if(command.substring(3,7) == "HIGH") value = 1;
 80a0202:	2501      	movs	r5, #1
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;

	if(command.startsWith("D"))
 80a0204:	4919      	ldr	r1, [pc, #100]	; (80a026c <_Z18tinkerDigitalWrite6String+0xbc>)
 80a0206:	4668      	mov	r0, sp
 80a0208:	f001 fdad 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a020c:	4669      	mov	r1, sp
 80a020e:	4630      	mov	r0, r6
 80a0210:	f001 fe5c 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a0214:	4607      	mov	r7, r0
 80a0216:	4668      	mov	r0, sp
 80a0218:	f001 fd5e 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a021c:	b96f      	cbnz	r7, 80a023a <_Z18tinkerDigitalWrite6String+0x8a>
	{
		pinMode(pinNumber, OUTPUT);
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
 80a021e:	4914      	ldr	r1, [pc, #80]	; (80a0270 <_Z18tinkerDigitalWrite6String+0xc0>)
 80a0220:	4668      	mov	r0, sp
 80a0222:	f001 fda0 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0226:	4630      	mov	r0, r6
 80a0228:	4669      	mov	r1, sp
 80a022a:	f001 fe4f 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a022e:	4606      	mov	r6, r0
 80a0230:	4668      	mov	r0, sp
 80a0232:	f001 fd51 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a0236:	b18e      	cbz	r6, 80a025c <_Z18tinkerDigitalWrite6String+0xac>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a0238:	340a      	adds	r4, #10
 80a023a:	b2a4      	uxth	r4, r4
 80a023c:	2101      	movs	r1, #1
 80a023e:	4620      	mov	r0, r4
 80a0240:	f002 fbd8 	bl	80a29f4 <pinMode>
		digitalWrite(pinNumber+10, value);
 80a0244:	4620      	mov	r0, r4
 80a0246:	4629      	mov	r1, r5
 80a0248:	f002 fbe5 	bl	80a2a16 <digitalWrite>
		return 1;
 80a024c:	2001      	movs	r0, #1
 80a024e:	e007      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>
{
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0254:	e004      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>

	if(command.substring(3,7) == "HIGH") value = 1;
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;
 80a0256:	f06f 0001 	mvn.w	r0, #1
 80a025a:	e001      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>
	{
		pinMode(pinNumber+10, OUTPUT);
		digitalWrite(pinNumber+10, value);
		return 1;
	}
	else return -3;
 80a025c:	f06f 0002 	mvn.w	r0, #2
}
 80a0260:	b005      	add	sp, #20
 80a0262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0264:	080a4274 	.word	0x080a4274
 80a0268:	080a4279 	.word	0x080a4279
 80a026c:	080a4270 	.word	0x080a4270
 80a0270:	080a4272 	.word	0x080a4272

080a0274 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a0274:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0276:	2101      	movs	r1, #1
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a0278:	b089      	sub	sp, #36	; 0x24
 80a027a:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a027c:	f001 fe38 	bl	80a1ef0 <_ZNK6String6charAtEj>
 80a0280:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0284:	2d07      	cmp	r5, #7
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0286:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0288:	d83e      	bhi.n	80a0308 <_Z17tinkerAnalogWrite6String+0x94>

	String value = command.substring(3);
 80a028a:	2203      	movs	r2, #3
 80a028c:	4631      	mov	r1, r6
 80a028e:	4668      	mov	r0, sp
 80a0290:	f001 fe58 	bl	80a1f44 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 80a0294:	491f      	ldr	r1, [pc, #124]	; (80a0314 <_Z17tinkerAnalogWrite6String+0xa0>)
 80a0296:	a804      	add	r0, sp, #16
 80a0298:	f001 fd65 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a029c:	a904      	add	r1, sp, #16
 80a029e:	4630      	mov	r0, r6
 80a02a0:	f001 fe14 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a02a4:	4607      	mov	r7, r0
 80a02a6:	a804      	add	r0, sp, #16
 80a02a8:	f001 fd16 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a02ac:	b157      	cbz	r7, 80a02c4 <_Z17tinkerAnalogWrite6String+0x50>
	{
		pinMode(pinNumber, OUTPUT);
 80a02ae:	b2ad      	uxth	r5, r5
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	4628      	mov	r0, r5
 80a02b4:	f002 fb9e 	bl	80a29f4 <pinMode>
		analogWrite(pinNumber, value.toInt());
 80a02b8:	4668      	mov	r0, sp
 80a02ba:	f001 fe4a 	bl	80a1f52 <_ZNK6String5toIntEv>
 80a02be:	4601      	mov	r1, r0
 80a02c0:	4628      	mov	r0, r5
 80a02c2:	e017      	b.n	80a02f4 <_Z17tinkerAnalogWrite6String+0x80>
		return 1;
	}
	else if(command.startsWith("A"))
 80a02c4:	4914      	ldr	r1, [pc, #80]	; (80a0318 <_Z17tinkerAnalogWrite6String+0xa4>)
 80a02c6:	a804      	add	r0, sp, #16
 80a02c8:	f001 fd4d 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02cc:	a904      	add	r1, sp, #16
 80a02ce:	4630      	mov	r0, r6
 80a02d0:	f001 fdfc 	bl	80a1ecc <_ZNK6String10startsWithERKS_>
 80a02d4:	4605      	mov	r5, r0
 80a02d6:	a804      	add	r0, sp, #16
 80a02d8:	f001 fcfe 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a02dc:	b175      	cbz	r5, 80a02fc <_Z17tinkerAnalogWrite6String+0x88>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a02de:	3c26      	subs	r4, #38	; 0x26
 80a02e0:	b2a4      	uxth	r4, r4
 80a02e2:	2101      	movs	r1, #1
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	f002 fb85 	bl	80a29f4 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 80a02ea:	4668      	mov	r0, sp
 80a02ec:	f001 fe31 	bl	80a1f52 <_ZNK6String5toIntEv>
 80a02f0:	4601      	mov	r1, r0
 80a02f2:	4620      	mov	r0, r4
 80a02f4:	f002 fbd2 	bl	80a2a9c <_Z11analogWritetm>
		return 1;
 80a02f8:	2401      	movs	r4, #1
 80a02fa:	e001      	b.n	80a0300 <_Z17tinkerAnalogWrite6String+0x8c>
	}
	else return -2;
 80a02fc:	f06f 0401 	mvn.w	r4, #1
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	String value = command.substring(3);
 80a0300:	4668      	mov	r0, sp
 80a0302:	f001 fce9 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a0306:	e001      	b.n	80a030c <_Z17tinkerAnalogWrite6String+0x98>
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
		return 1;
	}
	else return -2;
}
 80a030c:	4620      	mov	r0, r4
 80a030e:	b009      	add	sp, #36	; 0x24
 80a0310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0312:	bf00      	nop
 80a0314:	080a4270 	.word	0x080a4270
 80a0318:	080a4272 	.word	0x080a4272

080a031c <_Z11mqttPublishPc6String>:
MQTT client("skinny.skycharts.net", 1883, callback);

PollingTimer batteryTimer(36000);
volatile int forceReading = 1;

void mqttPublish(char *event, String msg) {
 80a031c:	b530      	push	{r4, r5, lr}
 80a031e:	4604      	mov	r4, r0
 80a0320:	b089      	sub	sp, #36	; 0x24
    if (!client.isConnected()) {
 80a0322:	4814      	ldr	r0, [pc, #80]	; (80a0374 <_Z11mqttPublishPc6String+0x58>)
MQTT client("skinny.skycharts.net", 1883, callback);

PollingTimer batteryTimer(36000);
volatile int forceReading = 1;

void mqttPublish(char *event, String msg) {
 80a0324:	460d      	mov	r5, r1
    if (!client.isConnected()) {
 80a0326:	f000 fb48 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a032a:	b9c0      	cbnz	r0, 80a035e <_Z11mqttPublishPc6String+0x42>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a032c:	4912      	ldr	r1, [pc, #72]	; (80a0378 <_Z11mqttPublishPc6String+0x5c>)
 80a032e:	a804      	add	r0, sp, #16
 80a0330:	f001 fd19 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
         client.connect("x053_" + String(Time.now()));
 80a0334:	f002 f8c6 	bl	80a24c4 <_ZN9TimeClass3nowEv>
 80a0338:	220a      	movs	r2, #10
 80a033a:	4601      	mov	r1, r0
 80a033c:	4668      	mov	r0, sp
 80a033e:	f001 fd50 	bl	80a1de2 <_ZN6StringC1Elh>
 80a0342:	4669      	mov	r1, sp
 80a0344:	a804      	add	r0, sp, #16
 80a0346:	f001 fd8d 	bl	80a1e64 <_ZplRK15StringSumHelperRK6String>
 80a034a:	6801      	ldr	r1, [r0, #0]
 80a034c:	4809      	ldr	r0, [pc, #36]	; (80a0374 <_Z11mqttPublishPc6String+0x58>)
 80a034e:	f000 fc19 	bl	80a0b84 <_ZN4MQTT7connectEPKc>
 80a0352:	4668      	mov	r0, sp
 80a0354:	f001 fcc0 	bl	80a1cd8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0358:	a804      	add	r0, sp, #16
 80a035a:	f001 fcbd 	bl	80a1cd8 <_ZN6StringD1Ev>
    }
    if (client.isConnected()) {
 80a035e:	4805      	ldr	r0, [pc, #20]	; (80a0374 <_Z11mqttPublishPc6String+0x58>)
 80a0360:	f000 fb2b 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0364:	b120      	cbz	r0, 80a0370 <_Z11mqttPublishPc6String+0x54>
        client.publish(event, msg);
 80a0366:	682a      	ldr	r2, [r5, #0]
 80a0368:	4621      	mov	r1, r4
 80a036a:	4802      	ldr	r0, [pc, #8]	; (80a0374 <_Z11mqttPublishPc6String+0x58>)
 80a036c:	f000 fc89 	bl	80a0c82 <_ZN4MQTT7publishEPKcS1_>
    }
}
 80a0370:	b009      	add	sp, #36	; 0x24
 80a0372:	bd30      	pop	{r4, r5, pc}
 80a0374:	20000378 	.word	0x20000378
 80a0378:	080a427d 	.word	0x080a427d

080a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a037c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a037e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0380:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0382:	b17c      	cbz	r4, 80a03a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0384:	6863      	ldr	r3, [r4, #4]
 80a0386:	3b01      	subs	r3, #1
 80a0388:	6063      	str	r3, [r4, #4]
 80a038a:	b95b      	cbnz	r3, 80a03a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a038c:	6823      	ldr	r3, [r4, #0]
 80a038e:	4620      	mov	r0, r4
 80a0390:	689b      	ldr	r3, [r3, #8]
 80a0392:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0394:	68a3      	ldr	r3, [r4, #8]
 80a0396:	3b01      	subs	r3, #1
 80a0398:	60a3      	str	r3, [r4, #8]
 80a039a:	b91b      	cbnz	r3, 80a03a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a039c:	6823      	ldr	r3, [r4, #0]
 80a039e:	4620      	mov	r0, r4
 80a03a0:	68db      	ldr	r3, [r3, #12]
 80a03a2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a03a4:	4628      	mov	r0, r5
 80a03a6:	bd38      	pop	{r3, r4, r5, pc}

080a03a8 <_Z9measureVAv>:




void measureVA() 
{
 80a03a8:	b510      	push	{r4, lr}
//Version 3 (A1 - 550) * (5v/1023 = 0.00488758553 =Vpp) / 0.066 känslighet sensor
    sensorValue = analogRead(A1);
 80a03aa:	200b      	movs	r0, #11




void measureVA() 
{
 80a03ac:	b086      	sub	sp, #24
//Version 3 (A1 - 550) * (5v/1023 = 0.00488758553 =Vpp) / 0.066 känslighet sensor
    sensorValue = analogRead(A1);
 80a03ae:	f002 fb5e 	bl	80a2a6e <analogRead>
 80a03b2:	4b33      	ldr	r3, [pc, #204]	; (80a0480 <_Z9measureVAv+0xd8>)
 80a03b4:	6018      	str	r0, [r3, #0]
    offSet = sensorValue - 2530; //ursprungsvärde 3070 | testvärde 4096/2= 2048
 80a03b6:	4b33      	ldr	r3, [pc, #204]	; (80a0484 <_Z9measureVAv+0xdc>)
 80a03b8:	f6a0 10e2 	subw	r0, r0, #2530	; 0x9e2
 80a03bc:	6018      	str	r0, [r3, #0]
    voltage = offSet * Vpp; //Vpp = konstant för att översätta spänning till skala
 80a03be:	f003 fab9 	bl	80a3934 <__aeabi_i2f>
 80a03c2:	4931      	ldr	r1, [pc, #196]	; (80a0488 <_Z9measureVAv+0xe0>)
 80a03c4:	f003 fb0a 	bl	80a39dc <__aeabi_fmul>
 80a03c8:	4b30      	ldr	r3, [pc, #192]	; (80a048c <_Z9measureVAv+0xe4>)
 80a03ca:	6018      	str	r0, [r3, #0]
    x053_chargeAmp = voltage / 0.066;
 80a03cc:	f002 fe9a 	bl	80a3104 <__aeabi_f2d>
 80a03d0:	a329      	add	r3, pc, #164	; (adr r3, 80a0478 <_Z9measureVAv+0xd0>)
 80a03d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03d6:	f003 f813 	bl	80a3400 <__aeabi_ddiv>
 80a03da:	f003 f9a1 	bl	80a3720 <__aeabi_d2f>
 80a03de:	4b2c      	ldr	r3, [pc, #176]	; (80a0490 <_Z9measureVAv+0xe8>)
 80a03e0:	6018      	str	r0, [r3, #0]

  // check to see what the value of the A0 input is and store it in the int(heltal) variable analogvalue
  // batteryVoltage är ett flyttal som visar decimaler. Formel : batteryVoltage = A0 * 2 / 112
    analogvalue = analogRead(A0);
 80a03e2:	200a      	movs	r0, #10
 80a03e4:	f002 fb43 	bl	80a2a6e <analogRead>
 80a03e8:	4b2a      	ldr	r3, [pc, #168]	; (80a0494 <_Z9measureVAv+0xec>)
 80a03ea:	4604      	mov	r4, r0
 80a03ec:	6018      	str	r0, [r3, #0]
    temp = analogvalue*2;
 80a03ee:	0040      	lsls	r0, r0, #1
 80a03f0:	f003 faa0 	bl	80a3934 <__aeabi_i2f>
 80a03f4:	4b28      	ldr	r3, [pc, #160]	; (80a0498 <_Z9measureVAv+0xf0>)
    x053_batteryVoltage = temp/75; //Standard calibrering 112
 80a03f6:	4929      	ldr	r1, [pc, #164]	; (80a049c <_Z9measureVAv+0xf4>)
    x053_chargeAmp = voltage / 0.066;

  // check to see what the value of the A0 input is and store it in the int(heltal) variable analogvalue
  // batteryVoltage är ett flyttal som visar decimaler. Formel : batteryVoltage = A0 * 2 / 112
    analogvalue = analogRead(A0);
    temp = analogvalue*2;
 80a03f8:	6018      	str	r0, [r3, #0]
    x053_batteryVoltage = temp/75; //Standard calibrering 112
 80a03fa:	f003 fba3 	bl	80a3b44 <__aeabi_fdiv>
 80a03fe:	4b28      	ldr	r3, [pc, #160]	; (80a04a0 <_Z9measureVAv+0xf8>)
 80a0400:	6018      	str	r0, [r3, #0]


    
    // Control the relay depending on value reading

   if (analogvalue<2700) {
 80a0402:	f640 238b 	movw	r3, #2699	; 0xa8b
 80a0406:	429c      	cmp	r4, r3
 80a0408:	dc12      	bgt.n	80a0430 <_Z9measureVAv+0x88>
   // if (batteryVoltage>53) {2968
        digitalWrite(D3,HIGH);
 80a040a:	2101      	movs	r1, #1
 80a040c:	2003      	movs	r0, #3
 80a040e:	f002 fb02 	bl	80a2a16 <digitalWrite>
 80a0412:	4b24      	ldr	r3, [pc, #144]	; (80a04a4 <_Z9measureVAv+0xfc>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0414:	4924      	ldr	r1, [pc, #144]	; (80a04a8 <_Z9measureVAv+0x100>)
 80a0416:	781b      	ldrb	r3, [r3, #0]
 80a0418:	4a24      	ldr	r2, [pc, #144]	; (80a04ac <_Z9measureVAv+0x104>)
 80a041a:	f88d 3000 	strb.w	r3, [sp]
 80a041e:	a802      	add	r0, sp, #8
 80a0420:	233c      	movs	r3, #60	; 0x3c
 80a0422:	f001 f961 	bl	80a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0426:	a803      	add	r0, sp, #12
 80a0428:	f7ff ffa8 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("my-event","High");
        mqttPublish("my-event", "High");
 80a042c:	491f      	ldr	r1, [pc, #124]	; (80a04ac <_Z9measureVAv+0x104>)
 80a042e:	e015      	b.n	80a045c <_Z9measureVAv+0xb4>

    }
 else if (analogvalue>2938) {
 80a0430:	f640 337a 	movw	r3, #2938	; 0xb7a
 80a0434:	429c      	cmp	r4, r3
 80a0436:	dd1b      	ble.n	80a0470 <_Z9measureVAv+0xc8>
//    else if (batteryVoltage<53.8) {3012
        digitalWrite(D3,LOW);
 80a0438:	2100      	movs	r1, #0
 80a043a:	2003      	movs	r0, #3
 80a043c:	f002 faeb 	bl	80a2a16 <digitalWrite>
 80a0440:	4b18      	ldr	r3, [pc, #96]	; (80a04a4 <_Z9measureVAv+0xfc>)
 80a0442:	4919      	ldr	r1, [pc, #100]	; (80a04a8 <_Z9measureVAv+0x100>)
 80a0444:	781b      	ldrb	r3, [r3, #0]
 80a0446:	4a1a      	ldr	r2, [pc, #104]	; (80a04b0 <_Z9measureVAv+0x108>)
 80a0448:	f88d 3000 	strb.w	r3, [sp]
 80a044c:	a802      	add	r0, sp, #8
 80a044e:	233c      	movs	r3, #60	; 0x3c
 80a0450:	f001 f94a 	bl	80a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0454:	a803      	add	r0, sp, #12
 80a0456:	f7ff ff91 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("my-event","Low");
        mqttPublish("my-event", "Low");
 80a045a:	4915      	ldr	r1, [pc, #84]	; (80a04b0 <_Z9measureVAv+0x108>)
 80a045c:	a802      	add	r0, sp, #8
 80a045e:	f001 fc82 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0462:	4811      	ldr	r0, [pc, #68]	; (80a04a8 <_Z9measureVAv+0x100>)
 80a0464:	a902      	add	r1, sp, #8
 80a0466:	f7ff ff59 	bl	80a031c <_Z11mqttPublishPc6String>
 80a046a:	a802      	add	r0, sp, #8
 80a046c:	f001 fc34 	bl	80a1cd8 <_ZN6StringD1Ev>
   else {

   }


}
 80a0470:	b006      	add	sp, #24
 80a0472:	bd10      	pop	{r4, pc}
 80a0474:	f3af 8000 	nop.w
 80a0478:	4189374c 	.word	0x4189374c
 80a047c:	3fb0e560 	.word	0x3fb0e560
 80a0480:	200003fc 	.word	0x200003fc
 80a0484:	200003e4 	.word	0x200003e4
 80a0488:	3a534059 	.word	0x3a534059
 80a048c:	200003f4 	.word	0x200003f4
 80a0490:	200003f0 	.word	0x200003f0
 80a0494:	200003e8 	.word	0x200003e8
 80a0498:	20000374 	.word	0x20000374
 80a049c:	42960000 	.word	0x42960000
 80a04a0:	200003ec 	.word	0x200003ec
 80a04a4:	200003f8 	.word	0x200003f8
 80a04a8:	080a4288 	.word	0x080a4288
 80a04ac:	080a4283 	.word	0x080a4283
 80a04b0:	080a4291 	.word	0x080a4291

080a04b4 <loop>:

}

/* This function loops forever --------------------------------------------*/
void loop()
{
 80a04b4:	b570      	push	{r4, r5, r6, lr}
	//This will run in a loop


    
       if (client.isConnected()) {
 80a04b6:	4847      	ldr	r0, [pc, #284]	; (80a05d4 <loop+0x120>)

}

/* This function loops forever --------------------------------------------*/
void loop()
{
 80a04b8:	b092      	sub	sp, #72	; 0x48
	//This will run in a loop


    
       if (client.isConnected()) {
 80a04ba:	f000 fa7e 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a04be:	b110      	cbz	r0, 80a04c6 <loop+0x12>
        client.loop();
 80a04c0:	4844      	ldr	r0, [pc, #272]	; (80a05d4 <loop+0x120>)
 80a04c2:	f000 fc25 	bl	80a0d10 <_ZN4MQTT4loopEv>
    }

   int takeReading = forceReading || batteryTimer.interval();
 80a04c6:	4b44      	ldr	r3, [pc, #272]	; (80a05d8 <loop+0x124>)
 80a04c8:	681a      	ldr	r2, [r3, #0]
 80a04ca:	461d      	mov	r5, r3
 80a04cc:	b96a      	cbnz	r2, 80a04ea <loop+0x36>
 80a04ce:	4c43      	ldr	r4, [pc, #268]	; (80a05dc <loop+0x128>)

private:
  inline bool _expired() {
    // This ordering is int overflow safe, as long as the actual time since
    // start isn't > ULONG_MAX (~50 days).
    return this->running() && (this->waiting() >= this->_delay);
 80a04d0:	7823      	ldrb	r3, [r4, #0]
 80a04d2:	2b00      	cmp	r3, #0
 80a04d4:	d07b      	beq.n	80a05ce <loop+0x11a>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04d6:	f000 fd7b 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
 80a04da:	6863      	ldr	r3, [r4, #4]
 80a04dc:	1ac0      	subs	r0, r0, r3
 80a04de:	68a3      	ldr	r3, [r4, #8]
 80a04e0:	4283      	cmp	r3, r0
 80a04e2:	d874      	bhi.n	80a05ce <loop+0x11a>
 80a04e4:	f000 fd74 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
  inline bool interval( bool min_delay=true) {
    bool result = this->_expired();
    if (result) {
      if (min_delay)
        // Start over from right now. Re-fire after a full _delay.
        this->_start = millis();
 80a04e8:	6060      	str	r0, [r4, #4]
   if (!takeReading) {
       return;
   }

  // clear flag
  if (forceReading > 0) {
 80a04ea:	682b      	ldr	r3, [r5, #0]
 80a04ec:	4a3a      	ldr	r2, [pc, #232]	; (80a05d8 <loop+0x124>)
 80a04ee:	2b00      	cmp	r3, #0
    forceReading--;
 80a04f0:	bfc8      	it	gt
 80a04f2:	6813      	ldrgt	r3, [r2, #0]
  }
measureVA();

	// Publicera till particle cloud
  	String temp2 = String(x053_batteryVoltage,1); // store voltage in "batteryVoltage" string
 80a04f4:	4d3a      	ldr	r5, [pc, #232]	; (80a05e0 <loop+0x12c>)
       return;
   }

  // clear flag
  if (forceReading > 0) {
    forceReading--;
 80a04f6:	bfc8      	it	gt
 80a04f8:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
 80a04fc:	4c39      	ldr	r4, [pc, #228]	; (80a05e4 <loop+0x130>)
 80a04fe:	bfc8      	it	gt
 80a0500:	6013      	strgt	r3, [r2, #0]
  }
measureVA();
 80a0502:	f7ff ff51 	bl	80a03a8 <_Z9measureVAv>

	// Publicera till particle cloud
  	String temp2 = String(x053_batteryVoltage,1); // store voltage in "batteryVoltage" string
 80a0506:	2201      	movs	r2, #1
 80a0508:	6829      	ldr	r1, [r5, #0]
 80a050a:	a802      	add	r0, sp, #8
 80a050c:	f001 fc7c 	bl	80a1e08 <_ZN6StringC1Efi>
 80a0510:	7823      	ldrb	r3, [r4, #0]
 80a0512:	9a02      	ldr	r2, [sp, #8]
 80a0514:	4934      	ldr	r1, [pc, #208]	; (80a05e8 <loop+0x134>)
 80a0516:	f88d 3000 	strb.w	r3, [sp]
 80a051a:	a80e      	add	r0, sp, #56	; 0x38
 80a051c:	233c      	movs	r3, #60	; 0x3c
  	Particle.publish("x053_batteryVoltage", temp2, PRIVATE); // publish to cloud
  	String temp4 = String(x053_chargeAmp,1); // store ampere in "chargeAmp" string
 80a051e:	4e33      	ldr	r6, [pc, #204]	; (80a05ec <loop+0x138>)
 80a0520:	f001 f8e2 	bl	80a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0524:	a80f      	add	r0, sp, #60	; 0x3c
 80a0526:	f7ff ff29 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a052a:	2201      	movs	r2, #1
 80a052c:	6831      	ldr	r1, [r6, #0]
 80a052e:	a806      	add	r0, sp, #24
 80a0530:	f001 fc6a 	bl	80a1e08 <_ZN6StringC1Efi>
 80a0534:	7823      	ldrb	r3, [r4, #0]
 80a0536:	9a06      	ldr	r2, [sp, #24]
 80a0538:	492d      	ldr	r1, [pc, #180]	; (80a05f0 <loop+0x13c>)
 80a053a:	f88d 3000 	strb.w	r3, [sp]
 80a053e:	a80e      	add	r0, sp, #56	; 0x38
 80a0540:	233c      	movs	r3, #60	; 0x3c
 80a0542:	f001 f8d1 	bl	80a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0546:	a80f      	add	r0, sp, #60	; 0x3c
 80a0548:	f7ff ff18 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  	Particle.publish("x053_chargeAmp", temp4, PRIVATE); // publish to cloud
    x053_solarPower = x053_batteryVoltage * x053_chargeAmp; // calculating power from sensor readings A0 and A1
 80a054c:	6831      	ldr	r1, [r6, #0]
 80a054e:	6828      	ldr	r0, [r5, #0]
 80a0550:	f003 fa44 	bl	80a39dc <__aeabi_fmul>
 80a0554:	4b27      	ldr	r3, [pc, #156]	; (80a05f4 <loop+0x140>)
 80a0556:	4601      	mov	r1, r0
 80a0558:	6018      	str	r0, [r3, #0]
  	String temp5 = String(x053_solarPower,1); // store ampere in "chargeAmp" string
 80a055a:	2201      	movs	r2, #1
 80a055c:	a80a      	add	r0, sp, #40	; 0x28
 80a055e:	f001 fc53 	bl	80a1e08 <_ZN6StringC1Efi>
 80a0562:	7823      	ldrb	r3, [r4, #0]
 80a0564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0566:	4924      	ldr	r1, [pc, #144]	; (80a05f8 <loop+0x144>)
 80a0568:	f88d 3000 	strb.w	r3, [sp]
 80a056c:	a80e      	add	r0, sp, #56	; 0x38
 80a056e:	233c      	movs	r3, #60	; 0x3c
 80a0570:	f001 f8ba 	bl	80a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0574:	a80f      	add	r0, sp, #60	; 0x3c
 80a0576:	f7ff ff01 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  	Particle.publish("x053_solarPower", temp5, PRIVATE); // publish to cloud
  
 	mqttPublish("x053_batteryVoltage", temp2);
 80a057a:	a902      	add	r1, sp, #8
 80a057c:	a80e      	add	r0, sp, #56	; 0x38
 80a057e:	f001 fc14 	bl	80a1daa <_ZN6StringC1ERKS_>
 80a0582:	a90e      	add	r1, sp, #56	; 0x38
 80a0584:	4818      	ldr	r0, [pc, #96]	; (80a05e8 <loop+0x134>)
 80a0586:	f7ff fec9 	bl	80a031c <_Z11mqttPublishPc6String>
 80a058a:	a80e      	add	r0, sp, #56	; 0x38
 80a058c:	f001 fba4 	bl	80a1cd8 <_ZN6StringD1Ev>
  	mqttPublish("x053_chargeAmp" , temp4);
 80a0590:	a906      	add	r1, sp, #24
 80a0592:	a80e      	add	r0, sp, #56	; 0x38
 80a0594:	f001 fc09 	bl	80a1daa <_ZN6StringC1ERKS_>
 80a0598:	a90e      	add	r1, sp, #56	; 0x38
 80a059a:	4815      	ldr	r0, [pc, #84]	; (80a05f0 <loop+0x13c>)
 80a059c:	f7ff febe 	bl	80a031c <_Z11mqttPublishPc6String>
 80a05a0:	a80e      	add	r0, sp, #56	; 0x38
 80a05a2:	f001 fb99 	bl	80a1cd8 <_ZN6StringD1Ev>
  	mqttPublish("x053_solarPower" , temp5);
 80a05a6:	a90a      	add	r1, sp, #40	; 0x28
 80a05a8:	a80e      	add	r0, sp, #56	; 0x38
 80a05aa:	f001 fbfe 	bl	80a1daa <_ZN6StringC1ERKS_>
 80a05ae:	a90e      	add	r1, sp, #56	; 0x38
 80a05b0:	4811      	ldr	r0, [pc, #68]	; (80a05f8 <loop+0x144>)
 80a05b2:	f7ff feb3 	bl	80a031c <_Z11mqttPublishPc6String>
 80a05b6:	a80e      	add	r0, sp, #56	; 0x38
 80a05b8:	f001 fb8e 	bl	80a1cd8 <_ZN6StringD1Ev>
  	String temp2 = String(x053_batteryVoltage,1); // store voltage in "batteryVoltage" string
  	Particle.publish("x053_batteryVoltage", temp2, PRIVATE); // publish to cloud
  	String temp4 = String(x053_chargeAmp,1); // store ampere in "chargeAmp" string
  	Particle.publish("x053_chargeAmp", temp4, PRIVATE); // publish to cloud
    x053_solarPower = x053_batteryVoltage * x053_chargeAmp; // calculating power from sensor readings A0 and A1
  	String temp5 = String(x053_solarPower,1); // store ampere in "chargeAmp" string
 80a05bc:	a80a      	add	r0, sp, #40	; 0x28
 80a05be:	f001 fb8b 	bl	80a1cd8 <_ZN6StringD1Ev>
measureVA();

	// Publicera till particle cloud
  	String temp2 = String(x053_batteryVoltage,1); // store voltage in "batteryVoltage" string
  	Particle.publish("x053_batteryVoltage", temp2, PRIVATE); // publish to cloud
  	String temp4 = String(x053_chargeAmp,1); // store ampere in "chargeAmp" string
 80a05c2:	a806      	add	r0, sp, #24
 80a05c4:	f001 fb88 	bl	80a1cd8 <_ZN6StringD1Ev>
    forceReading--;
  }
measureVA();

	// Publicera till particle cloud
  	String temp2 = String(x053_batteryVoltage,1); // store voltage in "batteryVoltage" string
 80a05c8:	a802      	add	r0, sp, #8
 80a05ca:	f001 fb85 	bl	80a1cd8 <_ZN6StringD1Ev>
  	mqttPublish("x053_chargeAmp" , temp4);
  	mqttPublish("x053_solarPower" , temp5);

    // delay (3600);
    //delay (360000); // 5 minute delay
}
 80a05ce:	b012      	add	sp, #72	; 0x48
 80a05d0:	bd70      	pop	{r4, r5, r6, pc}
 80a05d2:	bf00      	nop
 80a05d4:	20000378 	.word	0x20000378
 80a05d8:	20000300 	.word	0x20000300
 80a05dc:	200003d4 	.word	0x200003d4
 80a05e0:	200003ec 	.word	0x200003ec
 80a05e4:	200003e0 	.word	0x200003e0
 80a05e8:	080a4295 	.word	0x080a4295
 80a05ec:	200003f0 	.word	0x200003f0
 80a05f0:	080a42a9 	.word	0x080a42a9
 80a05f4:	200003d0 	.word	0x200003d0
 80a05f8:	080a42b8 	.word	0x080a42b8

080a05fc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a05fc:	4602      	mov	r2, r0
 80a05fe:	4801      	ldr	r0, [pc, #4]	; (80a0604 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a0600:	f000 bf53 	b.w	80a14aa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0604:	080a147f 	.word	0x080a147f

080a0608 <setup>:
}


/* This function is called once at start up ----------------------------------*/
void setup()
{
 80a0608:	b500      	push	{lr}
	//Setup the Tinker application here

	//Register all the Tinker functions
	Particle.function("digitalread", tinkerDigitalRead);
 80a060a:	4929      	ldr	r1, [pc, #164]	; (80a06b0 <setup+0xa8>)
}


/* This function is called once at start up ----------------------------------*/
void setup()
{
 80a060c:	b089      	sub	sp, #36	; 0x24
	//Setup the Tinker application here

	//Register all the Tinker functions
	Particle.function("digitalread", tinkerDigitalRead);
 80a060e:	4829      	ldr	r0, [pc, #164]	; (80a06b4 <setup+0xac>)
 80a0610:	f7ff fff4 	bl	80a05fc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("digitalwrite", tinkerDigitalWrite);
 80a0614:	4928      	ldr	r1, [pc, #160]	; (80a06b8 <setup+0xb0>)
 80a0616:	4829      	ldr	r0, [pc, #164]	; (80a06bc <setup+0xb4>)
 80a0618:	f7ff fff0 	bl	80a05fc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogread", tinkerAnalogRead);
 80a061c:	4928      	ldr	r1, [pc, #160]	; (80a06c0 <setup+0xb8>)
 80a061e:	4829      	ldr	r0, [pc, #164]	; (80a06c4 <setup+0xbc>)
 80a0620:	f7ff ffec 	bl	80a05fc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogwrite", tinkerAnalogWrite);
 80a0624:	4928      	ldr	r1, [pc, #160]	; (80a06c8 <setup+0xc0>)
 80a0626:	4829      	ldr	r0, [pc, #164]	; (80a06cc <setup+0xc4>)
 80a0628:	f7ff ffe8 	bl	80a05fc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

	//Setup Particle I/O for sensors on pin A0 and A1
    pinMode(D3, OUTPUT); // SmartPower relä, slår till relä vid låg spänning
 80a062c:	2101      	movs	r1, #1
 80a062e:	2003      	movs	r0, #3
 80a0630:	f002 f9e0 	bl	80a29f4 <pinMode>
    pinMode(A0, INPUT); // Analog 0 Input for VOLT?
 80a0634:	2100      	movs	r1, #0
 80a0636:	200a      	movs	r0, #10
 80a0638:	f002 f9dc 	bl	80a29f4 <pinMode>
    pinMode(A1, INPUT); // Analog 1 Input for Amp sensor
 80a063c:	2100      	movs	r1, #0
 80a063e:	200b      	movs	r0, #11
 80a0640:	f002 f9d8 	bl	80a29f4 <pinMode>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0644:	4922      	ldr	r1, [pc, #136]	; (80a06d0 <setup+0xc8>)
 80a0646:	a804      	add	r0, sp, #16
 80a0648:	f001 fb8d 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>

    // MQTT connect to the server(unique id by Time.now())
    client.connect("x053_" + String(Time.now()));
 80a064c:	f001 ff3a 	bl	80a24c4 <_ZN9TimeClass3nowEv>
 80a0650:	220a      	movs	r2, #10
 80a0652:	4601      	mov	r1, r0
 80a0654:	4668      	mov	r0, sp
 80a0656:	f001 fbc4 	bl	80a1de2 <_ZN6StringC1Elh>
 80a065a:	4669      	mov	r1, sp
 80a065c:	a804      	add	r0, sp, #16
 80a065e:	f001 fc01 	bl	80a1e64 <_ZplRK15StringSumHelperRK6String>
 80a0662:	6801      	ldr	r1, [r0, #0]
 80a0664:	481b      	ldr	r0, [pc, #108]	; (80a06d4 <setup+0xcc>)
 80a0666:	f000 fa8d 	bl	80a0b84 <_ZN4MQTT7connectEPKc>
 80a066a:	4668      	mov	r0, sp
 80a066c:	f001 fb34 	bl	80a1cd8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0670:	a804      	add	r0, sp, #16
 80a0672:	f001 fb31 	bl	80a1cd8 <_ZN6StringD1Ev>
    if (client.isConnected()) {
 80a0676:	4817      	ldr	r0, [pc, #92]	; (80a06d4 <setup+0xcc>)
 80a0678:	f000 f99f 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a067c:	b118      	cbz	r0, 80a0686 <setup+0x7e>
        client.subscribe("updateStats");
 80a067e:	4916      	ldr	r1, [pc, #88]	; (80a06d8 <setup+0xd0>)
 80a0680:	4814      	ldr	r0, [pc, #80]	; (80a06d4 <setup+0xcc>)
 80a0682:	f000 fc71 	bl	80a0f68 <_ZN4MQTT9subscribeEPKc>
    }
    mqttPublish("my-event", "MQTT connected");
 80a0686:	4915      	ldr	r1, [pc, #84]	; (80a06dc <setup+0xd4>)
 80a0688:	a804      	add	r0, sp, #16
 80a068a:	f001 fb6c 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
 80a068e:	a904      	add	r1, sp, #16
 80a0690:	4813      	ldr	r0, [pc, #76]	; (80a06e0 <setup+0xd8>)
 80a0692:	f7ff fe43 	bl	80a031c <_Z11mqttPublishPc6String>
 80a0696:	a804      	add	r0, sp, #16
 80a0698:	f001 fb1e 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a069c:	f000 fc98 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
  // Control
  //

  // Calling start on a running timer will reset the timer.
  inline void start() {
    this->_start = millis();
 80a06a0:	4b10      	ldr	r3, [pc, #64]	; (80a06e4 <setup+0xdc>)
    this->_running = true;
 80a06a2:	2201      	movs	r2, #1
  // Control
  //

  // Calling start on a running timer will reset the timer.
  inline void start() {
    this->_start = millis();
 80a06a4:	6058      	str	r0, [r3, #4]
    this->_running = true;
 80a06a6:	701a      	strb	r2, [r3, #0]

    batteryTimer.start();

}
 80a06a8:	b009      	add	sp, #36	; 0x24
 80a06aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80a06ae:	bf00      	nop
 80a06b0:	080a0139 	.word	0x080a0139
 80a06b4:	080a42c8 	.word	0x080a42c8
 80a06b8:	080a01b1 	.word	0x080a01b1
 80a06bc:	080a42d4 	.word	0x080a42d4
 80a06c0:	080a00c9 	.word	0x080a00c9
 80a06c4:	080a42e1 	.word	0x080a42e1
 80a06c8:	080a0275 	.word	0x080a0275
 80a06cc:	080a42ec 	.word	0x080a42ec
 80a06d0:	080a427d 	.word	0x080a427d
 80a06d4:	20000378 	.word	0x20000378
 80a06d8:	080a42f8 	.word	0x080a42f8
 80a06dc:	080a4304 	.word	0x080a4304
 80a06e0:	080a4288 	.word	0x080a4288
 80a06e4:	200003d4 	.word	0x200003d4

080a06e8 <_GLOBAL__sub_I___appProductID>:
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
		return 1;
	}
	else return -2;
}
 80a06e8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a06ea:	4b15      	ldr	r3, [pc, #84]	; (80a0740 <_GLOBAL__sub_I___appProductID+0x58>)
 80a06ec:	2400      	movs	r4, #0
 80a06ee:	701c      	strb	r4, [r3, #0]
 80a06f0:	4b14      	ldr	r3, [pc, #80]	; (80a0744 <_GLOBAL__sub_I___appProductID+0x5c>)
 80a06f2:	2201      	movs	r2, #1
 80a06f4:	701a      	strb	r2, [r3, #0]
float x053_chargeAmp; //Ampere reading
float x053_solarPower; // Power (W) from solarcell

/* Function prototypes MQTT --------------------------------------------*/
void callback(char *topic, byte *payload, unsigned int length);
MQTT client("skinny.skycharts.net", 1883, callback);
 80a06f6:	4d14      	ldr	r5, [pc, #80]	; (80a0748 <_GLOBAL__sub_I___appProductID+0x60>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a06f8:	f000 fc82 	bl	80a1000 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80a06fc:	f002 f93e 	bl	80a297c <spark_protocol_instance>
 80a0700:	4623      	mov	r3, r4
 80a0702:	4622      	mov	r2, r4
 80a0704:	f241 318a 	movw	r1, #5002	; 0x138a
 80a0708:	f002 f940 	bl	80a298c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80a070c:	f002 f936 	bl	80a297c <spark_protocol_instance>
 80a0710:	4623      	mov	r3, r4
 80a0712:	4622      	mov	r2, r4
 80a0714:	4621      	mov	r1, r4
 80a0716:	f002 f941 	bl	80a299c <spark_protocol_set_product_firmware_version>
 80a071a:	4b0c      	ldr	r3, [pc, #48]	; (80a074c <_GLOBAL__sub_I___appProductID+0x64>)
 80a071c:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0720:	490b      	ldr	r1, [pc, #44]	; (80a0750 <_GLOBAL__sub_I___appProductID+0x68>)
 80a0722:	4628      	mov	r0, r5
 80a0724:	f000 f862 	bl	80a07ec <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a0728:	4a0a      	ldr	r2, [pc, #40]	; (80a0754 <_GLOBAL__sub_I___appProductID+0x6c>)
 80a072a:	490b      	ldr	r1, [pc, #44]	; (80a0758 <_GLOBAL__sub_I___appProductID+0x70>)
 80a072c:	4628      	mov	r0, r5
 80a072e:	f002 fa35 	bl	80a2b9c <__aeabi_atexit>
#include "Particle.h"

class PollingTimer {
public:
  inline PollingTimer(unsigned long delay_millis, bool started=false) :
      _running(started), _delay(delay_millis) {};
 80a0732:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80a0736:	4b09      	ldr	r3, [pc, #36]	; (80a075c <_GLOBAL__sub_I___appProductID+0x74>)
 80a0738:	701c      	strb	r4, [r3, #0]
 80a073a:	609a      	str	r2, [r3, #8]
 80a073c:	bd38      	pop	{r3, r4, r5, pc}
 80a073e:	bf00      	nop
 80a0740:	200003f8 	.word	0x200003f8
 80a0744:	200003e0 	.word	0x200003e0
 80a0748:	20000378 	.word	0x20000378
 80a074c:	080a00bd 	.word	0x080a00bd
 80a0750:	080a4313 	.word	0x080a4313
 80a0754:	20000370 	.word	0x20000370
 80a0758:	080a0f6f 	.word	0x080a0f6f
 80a075c:	200003d4 	.word	0x200003d4

080a0760 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0760:	b538      	push	{r3, r4, r5, lr}
 80a0762:	4b0b      	ldr	r3, [pc, #44]	; (80a0790 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0764:	6984      	ldr	r4, [r0, #24]
 80a0766:	4605      	mov	r5, r0
 80a0768:	6003      	str	r3, [r0, #0]
 80a076a:	b17c      	cbz	r4, 80a078c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a076c:	6863      	ldr	r3, [r4, #4]
 80a076e:	3b01      	subs	r3, #1
 80a0770:	6063      	str	r3, [r4, #4]
 80a0772:	b95b      	cbnz	r3, 80a078c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0774:	6823      	ldr	r3, [r4, #0]
 80a0776:	4620      	mov	r0, r4
 80a0778:	689b      	ldr	r3, [r3, #8]
 80a077a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a077c:	68a3      	ldr	r3, [r4, #8]
 80a077e:	3b01      	subs	r3, #1
 80a0780:	60a3      	str	r3, [r4, #8]
 80a0782:	b91b      	cbnz	r3, 80a078c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0784:	6823      	ldr	r3, [r4, #0]
 80a0786:	4620      	mov	r0, r4
 80a0788:	68db      	ldr	r3, [r3, #12]
 80a078a:	4798      	blx	r3
 80a078c:	4628      	mov	r0, r5
 80a078e:	bd38      	pop	{r3, r4, r5, pc}
 80a0790:	080a44a8 	.word	0x080a44a8

080a0794 <_ZN9TCPClientD0Ev>:
 80a0794:	b510      	push	{r4, lr}
 80a0796:	4604      	mov	r4, r0
 80a0798:	f7ff ffe2 	bl	80a0760 <_ZN9TCPClientD1Ev>
 80a079c:	4620      	mov	r0, r4
 80a079e:	f7ff fc80 	bl	80a00a2 <_ZdlPv>
 80a07a2:	4620      	mov	r0, r4
 80a07a4:	bd10      	pop	{r4, pc}

080a07a6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a07a6:	b538      	push	{r3, r4, r5, lr}
 80a07a8:	461d      	mov	r5, r3
    this->callback = callback;
 80a07aa:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a07ac:	4604      	mov	r4, r0
    this->callback = callback;
 80a07ae:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a07b0:	2300      	movs	r3, #0
 80a07b2:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a07b4:	b102      	cbz	r2, 80a07b8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a07b6:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a07b8:	b119      	cbz	r1, 80a07c2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a07ba:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a07be:	f001 faff 	bl	80a1dc0 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a07c2:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a07c4:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a07c6:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a07c8:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a07ca:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a07ce:	2bff      	cmp	r3, #255	; 0xff
 80a07d0:	bfb8      	it	lt
 80a07d2:	23ff      	movlt	r3, #255	; 0xff
 80a07d4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a07d8:	b108      	cbz	r0, 80a07de <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a07da:	f7ff fc64 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a07de:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a07e2:	f7ff fc5c 	bl	80a009e <_Znaj>
 80a07e6:	61e0      	str	r0, [r4, #28]
 80a07e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a07ec <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a07ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a07f0:	4604      	mov	r4, r0
 80a07f2:	4617      	mov	r7, r2
 80a07f4:	4698      	mov	r8, r3
 80a07f6:	460e      	mov	r6, r1
 80a07f8:	2500      	movs	r5, #0
 80a07fa:	f001 fd53 	bl	80a22a4 <_ZN9TCPClientC1Ev>
 80a07fe:	61e5      	str	r5, [r4, #28]
 80a0800:	490a      	ldr	r1, [pc, #40]	; (80a082c <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0802:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0806:	f001 faae 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a080a:	23ff      	movs	r3, #255	; 0xff
 80a080c:	9302      	str	r3, [sp, #8]
 80a080e:	230f      	movs	r3, #15
 80a0810:	9300      	str	r3, [sp, #0]
 80a0812:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0814:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0816:	f8cd 8004 	str.w	r8, [sp, #4]
 80a081a:	463b      	mov	r3, r7
 80a081c:	462a      	mov	r2, r5
 80a081e:	4631      	mov	r1, r6
 80a0820:	f7ff ffc1 	bl	80a07a6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0824:	4620      	mov	r0, r4
 80a0826:	b004      	add	sp, #16
 80a0828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a082c:	080a43a6 	.word	0x080a43a6

080a0830 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0830:	b510      	push	{r4, lr}
 80a0832:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0834:	4620      	mov	r0, r4
 80a0836:	f001 fca5 	bl	80a2184 <_ZN9TCPClient9availableEv>
 80a083a:	2800      	cmp	r0, #0
 80a083c:	d0fa      	beq.n	80a0834 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a083e:	4620      	mov	r0, r4
 80a0840:	f001 fc47 	bl	80a20d2 <_ZN9TCPClient4readEv>
}
 80a0844:	b2c0      	uxtb	r0, r0
 80a0846:	bd10      	pop	{r4, pc}

080a0848 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a084c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a084e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0850:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0852:	f7ff ffed 	bl	80a0830 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0856:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a085a:	4646      	mov	r6, r8
 80a085c:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a085e:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0860:	2700      	movs	r7, #0
 80a0862:	f893 9000 	ldrb.w	r9, [r3]
 80a0866:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a086a:	4628      	mov	r0, r5
 80a086c:	f7ff ffe0 	bl	80a0830 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0870:	69eb      	ldr	r3, [r5, #28]
 80a0872:	1c74      	adds	r4, r6, #1
 80a0874:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0876:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a087a:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a087e:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0880:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0882:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0884:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0888:	d501      	bpl.n	80a088e <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a088a:	4626      	mov	r6, r4
 80a088c:	e7ed      	b.n	80a086a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a088e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0890:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0894:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0898:	d113      	bne.n	80a08c2 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a089a:	4628      	mov	r0, r5
 80a089c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a08a0:	f7ff ffc6 	bl	80a0830 <_ZN4MQTT8readByteEv>
 80a08a4:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a08a8:	4628      	mov	r0, r5
 80a08aa:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a08ae:	f7ff ffbf 	bl	80a0830 <_ZN4MQTT8readByteEv>
 80a08b2:	1cf4      	adds	r4, r6, #3
 80a08b4:	3602      	adds	r6, #2
 80a08b6:	b2b6      	uxth	r6, r6
 80a08b8:	b2a4      	uxth	r4, r4
 80a08ba:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a08be:	2302      	movs	r3, #2
 80a08c0:	e000      	b.n	80a08c4 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a08c2:	2300      	movs	r3, #0
 80a08c4:	1b1b      	subs	r3, r3, r4
 80a08c6:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a08c8:	19a3      	adds	r3, r4, r6
 80a08ca:	b29b      	uxth	r3, r3
 80a08cc:	429f      	cmp	r7, r3
 80a08ce:	d90b      	bls.n	80a08e8 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a08d0:	4628      	mov	r0, r5
 80a08d2:	f7ff ffad 	bl	80a0830 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a08d6:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a08da:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a08dc:	bf84      	itt	hi
 80a08de:	69eb      	ldrhi	r3, [r5, #28]
 80a08e0:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a08e2:	3401      	adds	r4, #1
 80a08e4:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a08e6:	e7ef      	b.n	80a08c8 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a08e8:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a08ec:	42a0      	cmp	r0, r4
 80a08ee:	bf2c      	ite	cs
 80a08f0:	4620      	movcs	r0, r4
 80a08f2:	2000      	movcc	r0, #0
 80a08f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a08f8 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a08f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a08fa:	4607      	mov	r7, r0
 80a08fc:	468e      	mov	lr, r1
 80a08fe:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0900:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0902:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0904:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0908:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a090a:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a090c:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a090e:	bf18      	it	ne
 80a0910:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0914:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0916:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a091a:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a091c:	2d00      	cmp	r5, #0
 80a091e:	d1f1      	bne.n	80a0904 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0920:	f1c4 0304 	rsb	r3, r4, #4
 80a0924:	18d1      	adds	r1, r2, r3
 80a0926:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a092a:	42a5      	cmp	r5, r4
 80a092c:	da06      	bge.n	80a093c <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a092e:	a801      	add	r0, sp, #4
 80a0930:	1b2b      	subs	r3, r5, r4
 80a0932:	5c28      	ldrb	r0, [r5, r0]
 80a0934:	4413      	add	r3, r2
 80a0936:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0938:	3501      	adds	r5, #1
 80a093a:	e7f6      	b.n	80a092a <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a093c:	1c72      	adds	r2, r6, #1
 80a093e:	4422      	add	r2, r4
 80a0940:	4638      	mov	r0, r7
 80a0942:	f001 fb38 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
 80a0946:	4605      	mov	r5, r0
 80a0948:	f000 fb42 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a094c:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a094e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0950:	4434      	add	r4, r6
 80a0952:	b2a8      	uxth	r0, r5
}
 80a0954:	1a23      	subs	r3, r4, r0
 80a0956:	4258      	negs	r0, r3
 80a0958:	4158      	adcs	r0, r3
 80a095a:	b003      	add	sp, #12
 80a095c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a095e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a095e:	b510      	push	{r4, lr}
 80a0960:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0962:	69c3      	ldr	r3, [r0, #28]
 80a0964:	22e0      	movs	r2, #224	; 0xe0
 80a0966:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0968:	69c3      	ldr	r3, [r0, #28]
 80a096a:	2200      	movs	r2, #0
 80a096c:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a096e:	69c1      	ldr	r1, [r0, #28]
 80a0970:	2202      	movs	r2, #2
 80a0972:	f001 fb20 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0976:	4620      	mov	r0, r4
 80a0978:	f001 fc42 	bl	80a2200 <_ZN9TCPClient4stopEv>
 80a097c:	f000 fb28 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0980:	6260      	str	r0, [r4, #36]	; 0x24
 80a0982:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0984:	bd10      	pop	{r4, pc}

080a0986 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0986:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0988:	460d      	mov	r5, r1
 80a098a:	3302      	adds	r3, #2
 80a098c:	b29b      	uxth	r3, r3
 80a098e:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0990:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0994:	b2a4      	uxth	r4, r4
 80a0996:	b13e      	cbz	r6, 80a09a8 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0998:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a099c:	429f      	cmp	r7, r3
 80a099e:	d903      	bls.n	80a09a8 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a09a0:	1c5c      	adds	r4, r3, #1
 80a09a2:	54d6      	strb	r6, [r2, r3]
 80a09a4:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a09a6:	e7f2      	b.n	80a098e <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a09a8:	1b19      	subs	r1, r3, r4
 80a09aa:	440a      	add	r2, r1
 80a09ac:	1221      	asrs	r1, r4, #8
 80a09ae:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a09b2:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a09b6:	4618      	mov	r0, r3
 80a09b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a09ba <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a09ba:	b538      	push	{r3, r4, r5, lr}
 80a09bc:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a09be:	f001 fd23 	bl	80a2408 <_ZN9TCPClient9connectedEv>
 80a09c2:	2800      	cmp	r0, #0
 80a09c4:	bf14      	ite	ne
 80a09c6:	2401      	movne	r4, #1
 80a09c8:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a09ca:	d102      	bne.n	80a09d2 <_ZN4MQTT11isConnectedEv+0x18>
 80a09cc:	4628      	mov	r0, r5
 80a09ce:	f001 fc17 	bl	80a2200 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a09d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a09d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a09dc:	b087      	sub	sp, #28
 80a09de:	4604      	mov	r4, r0
 80a09e0:	4689      	mov	r9, r1
 80a09e2:	4617      	mov	r7, r2
 80a09e4:	461e      	mov	r6, r3
 80a09e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a09ea:	f7ff ffe6 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a09ee:	4605      	mov	r5, r0
 80a09f0:	2800      	cmp	r0, #0
 80a09f2:	f040 80bd 	bne.w	80a0b70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a09f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a09f8:	b939      	cbnz	r1, 80a0a0a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a09fa:	4603      	mov	r3, r0
 80a09fc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0a00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0a02:	4620      	mov	r0, r4
 80a0a04:	f001 faf8 	bl	80a1ff8 <_ZN9TCPClient7connectEPKctm>
 80a0a08:	e009      	b.n	80a0a1e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0a0a:	4668      	mov	r0, sp
 80a0a0c:	f001 f866 	bl	80a1adc <_ZN9IPAddressC1EPKh>
 80a0a10:	462b      	mov	r3, r5
 80a0a12:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0a16:	4669      	mov	r1, sp
 80a0a18:	4620      	mov	r0, r4
 80a0a1a:	f001 fc4d 	bl	80a22b8 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0a1e:	2800      	cmp	r0, #0
 80a0a20:	f000 80a2 	beq.w	80a0b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0a24:	2301      	movs	r3, #1
 80a0a26:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0a28:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0a2c:	2b04      	cmp	r3, #4
 80a0a2e:	d115      	bne.n	80a0a5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0a30:	4b52      	ldr	r3, [pc, #328]	; (80a0b7c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0a32:	6818      	ldr	r0, [r3, #0]
 80a0a34:	889a      	ldrh	r2, [r3, #4]
 80a0a36:	9000      	str	r0, [sp, #0]
 80a0a38:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0a3c:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0a3e:	69e2      	ldr	r2, [r4, #28]
 80a0a40:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0a42:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0a46:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0a4a:	1d53      	adds	r3, r2, #5
 80a0a4c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0a50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0a54:	8099      	strh	r1, [r3, #4]
 80a0a56:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0a58:	230c      	movs	r3, #12
 80a0a5a:	e012      	b.n	80a0a82 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0a5c:	466a      	mov	r2, sp
 80a0a5e:	4b48      	ldr	r3, [pc, #288]	; (80a0b80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0a60:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0a64:	6818      	ldr	r0, [r3, #0]
 80a0a66:	6859      	ldr	r1, [r3, #4]
 80a0a68:	7a1b      	ldrb	r3, [r3, #8]
 80a0a6a:	c203      	stmia	r2!, {r0, r1}
 80a0a6c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0a6e:	466b      	mov	r3, sp
 80a0a70:	cb03      	ldmia	r3!, {r0, r1}
 80a0a72:	f8cc 0005 	str.w	r0, [ip, #5]
 80a0a76:	f8cc 1009 	str.w	r1, [ip, #9]
 80a0a7a:	7813      	ldrb	r3, [r2, #0]
 80a0a7c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0a80:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0a82:	f1b8 0f00 	cmp.w	r8, #0
 80a0a86:	d00a      	beq.n	80a0a9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0a88:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0a8c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0a90:	0152      	lsls	r2, r2, #5
 80a0a92:	f042 0206 	orr.w	r2, r2, #6
 80a0a96:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a0a9a:	b2d2      	uxtb	r2, r2
 80a0a9c:	e000      	b.n	80a0aa0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a0a9e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0aa0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a0aa4:	b909      	cbnz	r1, 80a0aaa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a0aa6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a0aaa:	b12f      	cbz	r7, 80a0ab8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a0aac:	b916      	cbnz	r6, 80a0ab4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0ab2:	e001      	b.n	80a0ab8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0ab4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0ab8:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0aba:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a0abc:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0abe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0ac0:	69e1      	ldr	r1, [r4, #28]
 80a0ac2:	1212      	asrs	r2, r2, #8
 80a0ac4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0ac6:	69e1      	ldr	r1, [r4, #28]
 80a0ac8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0aca:	1c9a      	adds	r2, r3, #2
 80a0acc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0ace:	3303      	adds	r3, #3
 80a0ad0:	69e2      	ldr	r2, [r4, #28]
 80a0ad2:	4649      	mov	r1, r9
 80a0ad4:	4620      	mov	r0, r4
 80a0ad6:	f7ff ff56 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0ada:	f1b8 0f00 	cmp.w	r8, #0
 80a0ade:	d00b      	beq.n	80a0af8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a0ae0:	4603      	mov	r3, r0
 80a0ae2:	69e2      	ldr	r2, [r4, #28]
 80a0ae4:	4641      	mov	r1, r8
 80a0ae6:	4620      	mov	r0, r4
 80a0ae8:	f7ff ff4d 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0aec:	69e2      	ldr	r2, [r4, #28]
 80a0aee:	4603      	mov	r3, r0
 80a0af0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	f7ff ff47 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0af8:	b167      	cbz	r7, 80a0b14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a0afa:	4603      	mov	r3, r0
 80a0afc:	69e2      	ldr	r2, [r4, #28]
 80a0afe:	4639      	mov	r1, r7
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	f7ff ff40 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0b06:	b12e      	cbz	r6, 80a0b14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a0b08:	4603      	mov	r3, r0
 80a0b0a:	69e2      	ldr	r2, [r4, #28]
 80a0b0c:	4631      	mov	r1, r6
 80a0b0e:	4620      	mov	r0, r4
 80a0b10:	f7ff ff39 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0b14:	1f43      	subs	r3, r0, #5
 80a0b16:	b29b      	uxth	r3, r3
 80a0b18:	69e2      	ldr	r2, [r4, #28]
 80a0b1a:	2110      	movs	r1, #16
 80a0b1c:	4620      	mov	r0, r4
 80a0b1e:	f7ff feeb 	bl	80a08f8 <_ZN4MQTT5writeEhPht>
 80a0b22:	f000 fa55 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0b26:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0b2a:	6260      	str	r0, [r4, #36]	; 0x24
 80a0b2c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0b2e:	4620      	mov	r0, r4
 80a0b30:	f001 fb28 	bl	80a2184 <_ZN9TCPClient9availableEv>
 80a0b34:	b940      	cbnz	r0, 80a0b48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a0b36:	f000 fa4b 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0b3c:	1ac0      	subs	r0, r0, r3
 80a0b3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0b40:	4373      	muls	r3, r6
 80a0b42:	4298      	cmp	r0, r3
 80a0b44:	d9f3      	bls.n	80a0b2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a0b46:	e00f      	b.n	80a0b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0b48:	4669      	mov	r1, sp
 80a0b4a:	4620      	mov	r0, r4
 80a0b4c:	f7ff fe7c 	bl	80a0848 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0b50:	2804      	cmp	r0, #4
 80a0b52:	d109      	bne.n	80a0b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0b54:	69e3      	ldr	r3, [r4, #28]
 80a0b56:	78de      	ldrb	r6, [r3, #3]
 80a0b58:	b936      	cbnz	r6, 80a0b68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a0b5a:	f000 fa39 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0b5e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0b60:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0b62:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a0b66:	e004      	b.n	80a0b72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0b68:	4620      	mov	r0, r4
 80a0b6a:	f001 fb49 	bl	80a2200 <_ZN9TCPClient4stopEv>
 80a0b6e:	e000      	b.n	80a0b72 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0b70:	2500      	movs	r5, #0
}
 80a0b72:	4628      	mov	r0, r5
 80a0b74:	b007      	add	sp, #28
 80a0b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0b7a:	bf00      	nop
 80a0b7c:	080a4328 	.word	0x080a4328
 80a0b80:	080a432f 	.word	0x080a432f

080a0b84 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0b86:	2304      	movs	r3, #4
 80a0b88:	9305      	str	r3, [sp, #20]
 80a0b8a:	2301      	movs	r3, #1
 80a0b8c:	9304      	str	r3, [sp, #16]
 80a0b8e:	2300      	movs	r3, #0
 80a0b90:	9303      	str	r3, [sp, #12]
 80a0b92:	9302      	str	r3, [sp, #8]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	9300      	str	r3, [sp, #0]
 80a0b98:	461a      	mov	r2, r3
 80a0b9a:	f7ff ff1d 	bl	80a09d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0b9e:	b007      	add	sp, #28
 80a0ba0:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ba4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0ba4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ba8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0baa:	4604      	mov	r4, r0
 80a0bac:	468b      	mov	fp, r1
 80a0bae:	4691      	mov	r9, r2
 80a0bb0:	469a      	mov	sl, r3
 80a0bb2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0bb6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0bba:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0bbe:	f7ff fefc 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0bc2:	2800      	cmp	r0, #0
 80a0bc4:	d04b      	beq.n	80a0c5e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a0bc6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0bca:	2100      	movs	r1, #0
 80a0bcc:	69e0      	ldr	r0, [r4, #28]
 80a0bce:	f003 fa3a 	bl	80a4046 <memset>

        length = writeString(topic, buffer, length);
 80a0bd2:	2305      	movs	r3, #5
 80a0bd4:	69e2      	ldr	r2, [r4, #28]
 80a0bd6:	4659      	mov	r1, fp
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	f7ff fed4 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0bde:	1e6b      	subs	r3, r5, #1
 80a0be0:	2b01      	cmp	r3, #1
 80a0be2:	d812      	bhi.n	80a0c0a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a0be4:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0be6:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0be8:	3301      	adds	r3, #1
 80a0bea:	b29b      	uxth	r3, r3
 80a0bec:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0bee:	121b      	asrs	r3, r3, #8
 80a0bf0:	5413      	strb	r3, [r2, r0]
 80a0bf2:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0bf4:	69e3      	ldr	r3, [r4, #28]
 80a0bf6:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0bf8:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0bfa:	3002      	adds	r0, #2
 80a0bfc:	b280      	uxth	r0, r0
 80a0bfe:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0c00:	b11e      	cbz	r6, 80a0c0a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a0c02:	8c23      	ldrh	r3, [r4, #32]
 80a0c04:	1c5a      	adds	r2, r3, #1
 80a0c06:	8422      	strh	r2, [r4, #32]
 80a0c08:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0c0a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0c0c:	b291      	uxth	r1, r2
 80a0c0e:	1883      	adds	r3, r0, r2
 80a0c10:	458a      	cmp	sl, r1
 80a0c12:	b29b      	uxth	r3, r3
 80a0c14:	d909      	bls.n	80a0c2a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a0c16:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0c1a:	3201      	adds	r2, #1
 80a0c1c:	429e      	cmp	r6, r3
 80a0c1e:	d904      	bls.n	80a0c2a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0c20:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a0c24:	69e1      	ldr	r1, [r4, #28]
 80a0c26:	54ce      	strb	r6, [r1, r3]
 80a0c28:	e7f0      	b.n	80a0c0c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0c2a:	f1b8 0f00 	cmp.w	r8, #0
 80a0c2e:	bf0c      	ite	eq
 80a0c30:	2130      	moveq	r1, #48	; 0x30
 80a0c32:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a0c34:	b10f      	cbz	r7, 80a0c3a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a0c36:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0c3a:	2d02      	cmp	r5, #2
 80a0c3c:	d102      	bne.n	80a0c44 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0c3e:	f041 0104 	orr.w	r1, r1, #4
 80a0c42:	e003      	b.n	80a0c4c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a0c44:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0c46:	bf08      	it	eq
 80a0c48:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0c4c:	4620      	mov	r0, r4
 80a0c4e:	3b05      	subs	r3, #5
 80a0c50:	69e2      	ldr	r2, [r4, #28]
 80a0c52:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a0c54:	b001      	add	sp, #4
 80a0c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0c5a:	f7ff be4d 	b.w	80a08f8 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0c5e:	b001      	add	sp, #4
 80a0c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0c64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0c66:	9c08      	ldr	r4, [sp, #32]
 80a0c68:	9403      	str	r4, [sp, #12]
 80a0c6a:	2400      	movs	r4, #0
 80a0c6c:	9402      	str	r4, [sp, #8]
 80a0c6e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0c72:	9401      	str	r4, [sp, #4]
 80a0c74:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0c78:	9400      	str	r4, [sp, #0]
 80a0c7a:	f7ff ff93 	bl	80a0ba4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0c7e:	b004      	add	sp, #16
 80a0c80:	bd10      	pop	{r4, pc}

080a0c82 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0c82:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0c84:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0c86:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0c88:	460e      	mov	r6, r1
 80a0c8a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0c8c:	f003 fa39 	bl	80a4102 <strlen>
 80a0c90:	2300      	movs	r3, #0
 80a0c92:	9302      	str	r3, [sp, #8]
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	9300      	str	r3, [sp, #0]
 80a0c98:	4622      	mov	r2, r4
 80a0c9a:	4603      	mov	r3, r0
 80a0c9c:	4631      	mov	r1, r6
 80a0c9e:	4628      	mov	r0, r5
 80a0ca0:	f7ff ffe0 	bl	80a0c64 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0ca4:	b004      	add	sp, #16
 80a0ca6:	bd70      	pop	{r4, r5, r6, pc}

080a0ca8 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a0ca8:	b538      	push	{r3, r4, r5, lr}
 80a0caa:	4604      	mov	r4, r0
 80a0cac:	460d      	mov	r5, r1
    if (isConnected()) {
 80a0cae:	f7ff fe84 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0cb2:	b190      	cbz	r0, 80a0cda <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a0cb4:	69e3      	ldr	r3, [r4, #28]
 80a0cb6:	2262      	movs	r2, #98	; 0x62
 80a0cb8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0cba:	69e3      	ldr	r3, [r4, #28]
 80a0cbc:	2202      	movs	r2, #2
 80a0cbe:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0cc0:	69e3      	ldr	r3, [r4, #28]
 80a0cc2:	122a      	asrs	r2, r5, #8
 80a0cc4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0cc6:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0cc8:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0cca:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0ccc:	69e1      	ldr	r1, [r4, #28]
 80a0cce:	4620      	mov	r0, r4
 80a0cd0:	f001 f971 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
 80a0cd4:	3000      	adds	r0, #0
 80a0cd6:	bf18      	it	ne
 80a0cd8:	2001      	movne	r0, #1
    }
    return false;
}
 80a0cda:	bd38      	pop	{r3, r4, r5, pc}

080a0cdc <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a0cdc:	b538      	push	{r3, r4, r5, lr}
 80a0cde:	4604      	mov	r4, r0
 80a0ce0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a0ce2:	f7ff fe6a 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0ce6:	b190      	cbz	r0, 80a0d0e <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a0ce8:	69e3      	ldr	r3, [r4, #28]
 80a0cea:	2272      	movs	r2, #114	; 0x72
 80a0cec:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0cee:	69e3      	ldr	r3, [r4, #28]
 80a0cf0:	2202      	movs	r2, #2
 80a0cf2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0cf4:	69e3      	ldr	r3, [r4, #28]
 80a0cf6:	122a      	asrs	r2, r5, #8
 80a0cf8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0cfa:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0cfc:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0cfe:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0d00:	69e1      	ldr	r1, [r4, #28]
 80a0d02:	4620      	mov	r0, r4
 80a0d04:	f001 f957 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
 80a0d08:	3000      	adds	r0, #0
 80a0d0a:	bf18      	it	ne
 80a0d0c:	2001      	movne	r0, #1
    }
    return false;
}
 80a0d0e:	bd38      	pop	{r3, r4, r5, pc}

080a0d10 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a0d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0d14:	b083      	sub	sp, #12
 80a0d16:	af00      	add	r7, sp, #0
 80a0d18:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0d1a:	f7ff fe4e 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0d1e:	4681      	mov	r9, r0
 80a0d20:	2800      	cmp	r0, #0
 80a0d22:	f000 80f6 	beq.w	80a0f12 <_ZN4MQTT4loopEv+0x202>
 80a0d26:	f000 f953 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a0d2a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0d2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d30:	4353      	muls	r3, r2
 80a0d32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a0d34:	4605      	mov	r5, r0
 80a0d36:	1a82      	subs	r2, r0, r2
 80a0d38:	429a      	cmp	r2, r3
 80a0d3a:	d803      	bhi.n	80a0d44 <_ZN4MQTT4loopEv+0x34>
 80a0d3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0d3e:	1a82      	subs	r2, r0, r2
 80a0d40:	4293      	cmp	r3, r2
 80a0d42:	d217      	bcs.n	80a0d74 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a0d44:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a0d48:	b12b      	cbz	r3, 80a0d56 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a0d4a:	4620      	mov	r0, r4
 80a0d4c:	f001 fa58 	bl	80a2200 <_ZN9TCPClient4stopEv>
                return false;
 80a0d50:	f04f 0900 	mov.w	r9, #0
 80a0d54:	e0dd      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a0d56:	69e2      	ldr	r2, [r4, #28]
 80a0d58:	21c0      	movs	r1, #192	; 0xc0
 80a0d5a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a0d5c:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a0d5e:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a0d60:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a0d62:	69e1      	ldr	r1, [r4, #28]
 80a0d64:	2202      	movs	r2, #2
 80a0d66:	f001 f926 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a0d6a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a0d6c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a0d6e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a0d70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a0d74:	4620      	mov	r0, r4
 80a0d76:	f001 fa05 	bl	80a2184 <_ZN9TCPClient9availableEv>
 80a0d7a:	2800      	cmp	r0, #0
 80a0d7c:	f000 80c9 	beq.w	80a0f12 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0d80:	1df9      	adds	r1, r7, #7
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	f7ff fd60 	bl	80a0848 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a0d88:	4602      	mov	r2, r0
 80a0d8a:	2800      	cmp	r0, #0
 80a0d8c:	f000 80c1 	beq.w	80a0f12 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a0d90:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a0d92:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a0d94:	7818      	ldrb	r0, [r3, #0]
 80a0d96:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a0d9a:	2930      	cmp	r1, #48	; 0x30
 80a0d9c:	d17d      	bne.n	80a0e9a <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a0d9e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a0da2:	f1bb 0f00 	cmp.w	fp, #0
 80a0da6:	f000 80b4 	beq.w	80a0f12 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a0daa:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a0dae:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a0db0:	eb03 000c 	add.w	r0, r3, ip
 80a0db4:	7881      	ldrb	r1, [r0, #2]
 80a0db6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a0dba:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a0dbe:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a0dc2:	f10e 0108 	add.w	r1, lr, #8
 80a0dc6:	f021 0107 	bic.w	r1, r1, #7
 80a0dca:	ebad 0d01 	sub.w	sp, sp, r1
 80a0dce:	4668      	mov	r0, sp
 80a0dd0:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a0dd2:	b28e      	uxth	r6, r1
 80a0dd4:	45b6      	cmp	lr, r6
 80a0dd6:	d906      	bls.n	80a0de6 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a0dd8:	eb0c 0601 	add.w	r6, ip, r1
 80a0ddc:	441e      	add	r6, r3
 80a0dde:	78f6      	ldrb	r6, [r6, #3]
 80a0de0:	5446      	strb	r6, [r0, r1]
 80a0de2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a0de4:	e7f5      	b.n	80a0dd2 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a0de6:	2100      	movs	r1, #0
 80a0de8:	f800 100e 	strb.w	r1, [r0, lr]
 80a0dec:	781e      	ldrb	r6, [r3, #0]
 80a0dee:	f10c 0103 	add.w	r1, ip, #3
 80a0df2:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a0df6:	2e02      	cmp	r6, #2
 80a0df8:	ebcc 0202 	rsb	r2, ip, r2
 80a0dfc:	d11e      	bne.n	80a0e3c <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0dfe:	4471      	add	r1, lr
 80a0e00:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a0e04:	4419      	add	r1, r3
 80a0e06:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a0e08:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0e0c:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a0e10:	f10c 0105 	add.w	r1, ip, #5
 80a0e14:	4471      	add	r1, lr
 80a0e16:	3a05      	subs	r2, #5
 80a0e18:	4419      	add	r1, r3
 80a0e1a:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a0e1c:	69e3      	ldr	r3, [r4, #28]
 80a0e1e:	2240      	movs	r2, #64	; 0x40
 80a0e20:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a0e22:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a0e24:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a0e28:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a0e2a:	69e3      	ldr	r3, [r4, #28]
 80a0e2c:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a0e30:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a0e32:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a0e34:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a0e36:	f883 8003 	strb.w	r8, [r3, #3]
 80a0e3a:	e020      	b.n	80a0e7e <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a0e3c:	2e04      	cmp	r6, #4
 80a0e3e:	d124      	bne.n	80a0e8a <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0e40:	4471      	add	r1, lr
 80a0e42:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a0e46:	4419      	add	r1, r3
 80a0e48:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a0e4a:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0e4e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a0e52:	f10c 0105 	add.w	r1, ip, #5
 80a0e56:	4471      	add	r1, lr
 80a0e58:	3a05      	subs	r2, #5
 80a0e5a:	4419      	add	r1, r3
 80a0e5c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a0e5e:	69e3      	ldr	r3, [r4, #28]
 80a0e60:	2250      	movs	r2, #80	; 0x50
 80a0e62:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a0e64:	69e3      	ldr	r3, [r4, #28]
 80a0e66:	2202      	movs	r2, #2
 80a0e68:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a0e6a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a0e6c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a0e70:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a0e74:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a0e76:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a0e78:	69e3      	ldr	r3, [r4, #28]
 80a0e7a:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a0e7e:	69e1      	ldr	r1, [r4, #28]
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	f001 f898 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a0e86:	6265      	str	r5, [r4, #36]	; 0x24
 80a0e88:	e005      	b.n	80a0e96 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a0e8a:	3a03      	subs	r2, #3
 80a0e8c:	4471      	add	r1, lr
 80a0e8e:	ebce 0202 	rsb	r2, lr, r2
 80a0e92:	4419      	add	r1, r3
 80a0e94:	47d8      	blx	fp
 80a0e96:	46d5      	mov	sp, sl
 80a0e98:	e03b      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a0e9a:	2950      	cmp	r1, #80	; 0x50
 80a0e9c:	d108      	bne.n	80a0eb0 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a0e9e:	7899      	ldrb	r1, [r3, #2]
 80a0ea0:	78db      	ldrb	r3, [r3, #3]
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a0ea8:	b289      	uxth	r1, r1
 80a0eaa:	f7ff fefd 	bl	80a0ca8 <_ZN4MQTT14publishReleaseEt>
 80a0eae:	e030      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a0eb0:	2940      	cmp	r1, #64	; 0x40
 80a0eb2:	d00c      	beq.n	80a0ece <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a0eb4:	2960      	cmp	r1, #96	; 0x60
 80a0eb6:	d108      	bne.n	80a0eca <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a0eb8:	7899      	ldrb	r1, [r3, #2]
 80a0eba:	78db      	ldrb	r3, [r3, #3]
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a0ec2:	b289      	uxth	r1, r1
 80a0ec4:	f7ff ff0a 	bl	80a0cdc <_ZN4MQTT15publishCompleteEt>
 80a0ec8:	e023      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a0eca:	2970      	cmp	r1, #112	; 0x70
 80a0ecc:	d10d      	bne.n	80a0eea <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a0ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a0ed0:	b1f9      	cbz	r1, 80a0f12 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a0ed2:	2a04      	cmp	r2, #4
 80a0ed4:	d11d      	bne.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
 80a0ed6:	f010 0f06 	tst.w	r0, #6
 80a0eda:	d11a      	bne.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a0edc:	7898      	ldrb	r0, [r3, #2]
 80a0ede:	78db      	ldrb	r3, [r3, #3]
 80a0ee0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a0ee4:	b280      	uxth	r0, r0
 80a0ee6:	4788      	blx	r1
 80a0ee8:	e013      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a0eea:	2990      	cmp	r1, #144	; 0x90
 80a0eec:	d011      	beq.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a0eee:	29c0      	cmp	r1, #192	; 0xc0
 80a0ef0:	d10a      	bne.n	80a0f08 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a0ef2:	22d0      	movs	r2, #208	; 0xd0
 80a0ef4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a0ef6:	69e3      	ldr	r3, [r4, #28]
 80a0ef8:	2200      	movs	r2, #0
 80a0efa:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a0efc:	69e1      	ldr	r1, [r4, #28]
 80a0efe:	2202      	movs	r2, #2
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f001 f858 	bl	80a1fb6 <_ZN9TCPClient5writeEPKhj>
 80a0f06:	e004      	b.n	80a0f12 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a0f08:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a0f0a:	bf04      	itt	eq
 80a0f0c:	2300      	moveq	r3, #0
 80a0f0e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a0f12:	4648      	mov	r0, r9
 80a0f14:	370c      	adds	r7, #12
 80a0f16:	46bd      	mov	sp, r7
 80a0f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f1c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a0f1c:	b570      	push	{r4, r5, r6, lr}
 80a0f1e:	4604      	mov	r4, r0
 80a0f20:	460e      	mov	r6, r1
 80a0f22:	4615      	mov	r5, r2

    if (isConnected()) {
 80a0f24:	f7ff fd49 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0f28:	b1e8      	cbz	r0, 80a0f66 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a0f2a:	8c23      	ldrh	r3, [r4, #32]
 80a0f2c:	3301      	adds	r3, #1
 80a0f2e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a0f30:	b903      	cbnz	r3, 80a0f34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a0f32:	2301      	movs	r3, #1
 80a0f34:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a0f36:	8c23      	ldrh	r3, [r4, #32]
 80a0f38:	69e2      	ldr	r2, [r4, #28]
 80a0f3a:	121b      	asrs	r3, r3, #8
 80a0f3c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a0f3e:	69e3      	ldr	r3, [r4, #28]
 80a0f40:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a0f42:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a0f44:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a0f46:	69e2      	ldr	r2, [r4, #28]
 80a0f48:	2307      	movs	r3, #7
 80a0f4a:	4620      	mov	r0, r4
 80a0f4c:	f7ff fd1b 	bl	80a0986 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a0f50:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a0f52:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a0f54:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a0f56:	1f03      	subs	r3, r0, #4
 80a0f58:	69e2      	ldr	r2, [r4, #28]
 80a0f5a:	4620      	mov	r0, r4
    }
    return false;
}
 80a0f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a0f60:	b29b      	uxth	r3, r3
 80a0f62:	f7ff bcc9 	b.w	80a08f8 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0f66:	bd70      	pop	{r4, r5, r6, pc}

080a0f68 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80a0f68:	2200      	movs	r2, #0
 80a0f6a:	f7ff bfd7 	b.w	80a0f1c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a0f6e <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0f6e:	b510      	push	{r4, lr}
 80a0f70:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0f72:	f7ff fd22 	bl	80a09ba <_ZN4MQTT11isConnectedEv>
 80a0f76:	b110      	cbz	r0, 80a0f7e <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	f7ff fcf0 	bl	80a095e <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a0f7e:	69e0      	ldr	r0, [r4, #28]
 80a0f80:	b108      	cbz	r0, 80a0f86 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a0f82:	f7ff f890 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0f86:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0f8a:	f000 fea5 	bl	80a1cd8 <_ZN6StringD1Ev>
 80a0f8e:	4620      	mov	r0, r4
 80a0f90:	f7ff fbe6 	bl	80a0760 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a0f94:	4620      	mov	r0, r4
 80a0f96:	bd10      	pop	{r4, pc}

080a0f98 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a0f98:	f000 b832 	b.w	80a1000 <HAL_Pin_Map>

080a0f9c <_GLOBAL__sub_I_PollingTimer.cpp>:
 80a0f9c:	f000 b830 	b.w	80a1000 <HAL_Pin_Map>

080a0fa0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0fa0:	b508      	push	{r3, lr}
 80a0fa2:	4b02      	ldr	r3, [pc, #8]	; (80a0fac <os_mutex_create+0xc>)
 80a0fa4:	681b      	ldr	r3, [r3, #0]
 80a0fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0fa8:	9301      	str	r3, [sp, #4]
 80a0faa:	bd08      	pop	{r3, pc}
 80a0fac:	080601d0 	.word	0x080601d0

080a0fb0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a0fb0:	b508      	push	{r3, lr}
 80a0fb2:	4b02      	ldr	r3, [pc, #8]	; (80a0fbc <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0fb4:	681b      	ldr	r3, [r3, #0]
 80a0fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0fb8:	9301      	str	r3, [sp, #4]
 80a0fba:	bd08      	pop	{r3, pc}
 80a0fbc:	080601b8 	.word	0x080601b8

080a0fc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0fc0:	b508      	push	{r3, lr}
 80a0fc2:	4b02      	ldr	r3, [pc, #8]	; (80a0fcc <HAL_RNG_GetRandomNumber+0xc>)
 80a0fc4:	681b      	ldr	r3, [r3, #0]
 80a0fc6:	685b      	ldr	r3, [r3, #4]
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	bd08      	pop	{r3, pc}
 80a0fcc:	0806019c 	.word	0x0806019c

080a0fd0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0fd0:	b508      	push	{r3, lr}
 80a0fd2:	4b02      	ldr	r3, [pc, #8]	; (80a0fdc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0fd4:	681b      	ldr	r3, [r3, #0]
 80a0fd6:	695b      	ldr	r3, [r3, #20]
 80a0fd8:	9301      	str	r3, [sp, #4]
 80a0fda:	bd08      	pop	{r3, pc}
 80a0fdc:	0806019c 	.word	0x0806019c

080a0fe0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a0fe0:	b508      	push	{r3, lr}
 80a0fe2:	4b02      	ldr	r3, [pc, #8]	; (80a0fec <HAL_RTC_Get_UnixTime+0xc>)
 80a0fe4:	681b      	ldr	r3, [r3, #0]
 80a0fe6:	69db      	ldr	r3, [r3, #28]
 80a0fe8:	9301      	str	r3, [sp, #4]
 80a0fea:	bd08      	pop	{r3, pc}
 80a0fec:	0806019c 	.word	0x0806019c

080a0ff0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a0ff0:	b508      	push	{r3, lr}
 80a0ff2:	4b02      	ldr	r3, [pc, #8]	; (80a0ffc <HAL_RTC_Time_Is_Valid+0xc>)
 80a0ff4:	681b      	ldr	r3, [r3, #0]
 80a0ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ff8:	9301      	str	r3, [sp, #4]
 80a0ffa:	bd08      	pop	{r3, pc}
 80a0ffc:	0806019c 	.word	0x0806019c

080a1000 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1000:	b508      	push	{r3, lr}
 80a1002:	4b02      	ldr	r3, [pc, #8]	; (80a100c <HAL_Pin_Map+0xc>)
 80a1004:	681b      	ldr	r3, [r3, #0]
 80a1006:	681b      	ldr	r3, [r3, #0]
 80a1008:	9301      	str	r3, [sp, #4]
 80a100a:	bd08      	pop	{r3, pc}
 80a100c:	080601b0 	.word	0x080601b0

080a1010 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1010:	b508      	push	{r3, lr}
 80a1012:	4b02      	ldr	r3, [pc, #8]	; (80a101c <HAL_Validate_Pin_Function+0xc>)
 80a1014:	681b      	ldr	r3, [r3, #0]
 80a1016:	685b      	ldr	r3, [r3, #4]
 80a1018:	9301      	str	r3, [sp, #4]
 80a101a:	bd08      	pop	{r3, pc}
 80a101c:	080601b0 	.word	0x080601b0

080a1020 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1020:	b508      	push	{r3, lr}
 80a1022:	4b02      	ldr	r3, [pc, #8]	; (80a102c <HAL_Pin_Mode+0xc>)
 80a1024:	681b      	ldr	r3, [r3, #0]
 80a1026:	689b      	ldr	r3, [r3, #8]
 80a1028:	9301      	str	r3, [sp, #4]
 80a102a:	bd08      	pop	{r3, pc}
 80a102c:	080601b0 	.word	0x080601b0

080a1030 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1030:	b508      	push	{r3, lr}
 80a1032:	4b02      	ldr	r3, [pc, #8]	; (80a103c <HAL_Get_Pin_Mode+0xc>)
 80a1034:	681b      	ldr	r3, [r3, #0]
 80a1036:	68db      	ldr	r3, [r3, #12]
 80a1038:	9301      	str	r3, [sp, #4]
 80a103a:	bd08      	pop	{r3, pc}
 80a103c:	080601b0 	.word	0x080601b0

080a1040 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1040:	b508      	push	{r3, lr}
 80a1042:	4b02      	ldr	r3, [pc, #8]	; (80a104c <HAL_GPIO_Write+0xc>)
 80a1044:	681b      	ldr	r3, [r3, #0]
 80a1046:	691b      	ldr	r3, [r3, #16]
 80a1048:	9301      	str	r3, [sp, #4]
 80a104a:	bd08      	pop	{r3, pc}
 80a104c:	080601b0 	.word	0x080601b0

080a1050 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1050:	b508      	push	{r3, lr}
 80a1052:	4b02      	ldr	r3, [pc, #8]	; (80a105c <HAL_GPIO_Read+0xc>)
 80a1054:	681b      	ldr	r3, [r3, #0]
 80a1056:	695b      	ldr	r3, [r3, #20]
 80a1058:	9301      	str	r3, [sp, #4]
 80a105a:	bd08      	pop	{r3, pc}
 80a105c:	080601b0 	.word	0x080601b0

080a1060 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a1060:	b508      	push	{r3, lr}
 80a1062:	4b02      	ldr	r3, [pc, #8]	; (80a106c <HAL_DAC_Write+0xc>)
 80a1064:	681b      	ldr	r3, [r3, #0]
 80a1066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1068:	9301      	str	r3, [sp, #4]
 80a106a:	bd08      	pop	{r3, pc}
 80a106c:	080601b0 	.word	0x080601b0

080a1070 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1070:	b508      	push	{r3, lr}
 80a1072:	4b02      	ldr	r3, [pc, #8]	; (80a107c <HAL_ADC_Read+0xc>)
 80a1074:	681b      	ldr	r3, [r3, #0]
 80a1076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1078:	9301      	str	r3, [sp, #4]
 80a107a:	bd08      	pop	{r3, pc}
 80a107c:	080601b0 	.word	0x080601b0

080a1080 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a1080:	b508      	push	{r3, lr}
 80a1082:	4b02      	ldr	r3, [pc, #8]	; (80a108c <HAL_PWM_Write_Ext+0xc>)
 80a1084:	681b      	ldr	r3, [r3, #0]
 80a1086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a1088:	9301      	str	r3, [sp, #4]
 80a108a:	bd08      	pop	{r3, pc}
 80a108c:	080601b0 	.word	0x080601b0

080a1090 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1090:	b508      	push	{r3, lr}
 80a1092:	4b02      	ldr	r3, [pc, #8]	; (80a109c <HAL_I2C_Write_Data+0xc>)
 80a1094:	681b      	ldr	r3, [r3, #0]
 80a1096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1098:	9301      	str	r3, [sp, #4]
 80a109a:	bd08      	pop	{r3, pc}
 80a109c:	080601ac 	.word	0x080601ac

080a10a0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a10a0:	b508      	push	{r3, lr}
 80a10a2:	4b02      	ldr	r3, [pc, #8]	; (80a10ac <HAL_I2C_Available_Data+0xc>)
 80a10a4:	681b      	ldr	r3, [r3, #0]
 80a10a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a10a8:	9301      	str	r3, [sp, #4]
 80a10aa:	bd08      	pop	{r3, pc}
 80a10ac:	080601ac 	.word	0x080601ac

080a10b0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a10b0:	b508      	push	{r3, lr}
 80a10b2:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <HAL_I2C_Read_Data+0xc>)
 80a10b4:	681b      	ldr	r3, [r3, #0]
 80a10b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a10b8:	9301      	str	r3, [sp, #4]
 80a10ba:	bd08      	pop	{r3, pc}
 80a10bc:	080601ac 	.word	0x080601ac

080a10c0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a10c0:	b508      	push	{r3, lr}
 80a10c2:	4b02      	ldr	r3, [pc, #8]	; (80a10cc <HAL_I2C_Peek_Data+0xc>)
 80a10c4:	681b      	ldr	r3, [r3, #0]
 80a10c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	bd08      	pop	{r3, pc}
 80a10cc:	080601ac 	.word	0x080601ac

080a10d0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a10d0:	b508      	push	{r3, lr}
 80a10d2:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <HAL_I2C_Flush_Data+0xc>)
 80a10d4:	681b      	ldr	r3, [r3, #0]
 80a10d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a10d8:	9301      	str	r3, [sp, #4]
 80a10da:	bd08      	pop	{r3, pc}
 80a10dc:	080601ac 	.word	0x080601ac

080a10e0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a10e0:	b508      	push	{r3, lr}
 80a10e2:	4b02      	ldr	r3, [pc, #8]	; (80a10ec <HAL_I2C_Is_Enabled+0xc>)
 80a10e4:	681b      	ldr	r3, [r3, #0]
 80a10e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a10e8:	9301      	str	r3, [sp, #4]
 80a10ea:	bd08      	pop	{r3, pc}
 80a10ec:	080601ac 	.word	0x080601ac

080a10f0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a10f0:	b508      	push	{r3, lr}
 80a10f2:	4b03      	ldr	r3, [pc, #12]	; (80a1100 <HAL_I2C_Init+0x10>)
 80a10f4:	681b      	ldr	r3, [r3, #0]
 80a10f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a10fa:	9301      	str	r3, [sp, #4]
 80a10fc:	bd08      	pop	{r3, pc}
 80a10fe:	0000      	.short	0x0000
 80a1100:	080601ac 	.word	0x080601ac

080a1104 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1104:	b508      	push	{r3, lr}
 80a1106:	4b02      	ldr	r3, [pc, #8]	; (80a1110 <socket_active_status+0xc>)
 80a1108:	681b      	ldr	r3, [r3, #0]
 80a110a:	681b      	ldr	r3, [r3, #0]
 80a110c:	9301      	str	r3, [sp, #4]
 80a110e:	bd08      	pop	{r3, pc}
 80a1110:	080601bc 	.word	0x080601bc

080a1114 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1114:	b508      	push	{r3, lr}
 80a1116:	4b02      	ldr	r3, [pc, #8]	; (80a1120 <socket_handle_valid+0xc>)
 80a1118:	681b      	ldr	r3, [r3, #0]
 80a111a:	685b      	ldr	r3, [r3, #4]
 80a111c:	9301      	str	r3, [sp, #4]
 80a111e:	bd08      	pop	{r3, pc}
 80a1120:	080601bc 	.word	0x080601bc

080a1124 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1124:	b508      	push	{r3, lr}
 80a1126:	4b02      	ldr	r3, [pc, #8]	; (80a1130 <socket_create+0xc>)
 80a1128:	681b      	ldr	r3, [r3, #0]
 80a112a:	689b      	ldr	r3, [r3, #8]
 80a112c:	9301      	str	r3, [sp, #4]
 80a112e:	bd08      	pop	{r3, pc}
 80a1130:	080601bc 	.word	0x080601bc

080a1134 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1134:	b508      	push	{r3, lr}
 80a1136:	4b02      	ldr	r3, [pc, #8]	; (80a1140 <socket_connect+0xc>)
 80a1138:	681b      	ldr	r3, [r3, #0]
 80a113a:	68db      	ldr	r3, [r3, #12]
 80a113c:	9301      	str	r3, [sp, #4]
 80a113e:	bd08      	pop	{r3, pc}
 80a1140:	080601bc 	.word	0x080601bc

080a1144 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1144:	b508      	push	{r3, lr}
 80a1146:	4b02      	ldr	r3, [pc, #8]	; (80a1150 <socket_receive+0xc>)
 80a1148:	681b      	ldr	r3, [r3, #0]
 80a114a:	691b      	ldr	r3, [r3, #16]
 80a114c:	9301      	str	r3, [sp, #4]
 80a114e:	bd08      	pop	{r3, pc}
 80a1150:	080601bc 	.word	0x080601bc

080a1154 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1154:	b508      	push	{r3, lr}
 80a1156:	4b02      	ldr	r3, [pc, #8]	; (80a1160 <socket_close+0xc>)
 80a1158:	681b      	ldr	r3, [r3, #0]
 80a115a:	6a1b      	ldr	r3, [r3, #32]
 80a115c:	9301      	str	r3, [sp, #4]
 80a115e:	bd08      	pop	{r3, pc}
 80a1160:	080601bc 	.word	0x080601bc

080a1164 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1164:	b508      	push	{r3, lr}
 80a1166:	4b02      	ldr	r3, [pc, #8]	; (80a1170 <socket_handle_invalid+0xc>)
 80a1168:	681b      	ldr	r3, [r3, #0]
 80a116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a116c:	9301      	str	r3, [sp, #4]
 80a116e:	bd08      	pop	{r3, pc}
 80a1170:	080601bc 	.word	0x080601bc

080a1174 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1174:	b508      	push	{r3, lr}
 80a1176:	4b02      	ldr	r3, [pc, #8]	; (80a1180 <socket_send_ex+0xc>)
 80a1178:	681b      	ldr	r3, [r3, #0]
 80a117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a117c:	9301      	str	r3, [sp, #4]
 80a117e:	bd08      	pop	{r3, pc}
 80a1180:	080601bc 	.word	0x080601bc

080a1184 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1184:	b508      	push	{r3, lr}
 80a1186:	4b02      	ldr	r3, [pc, #8]	; (80a1190 <HAL_SPI_Init+0xc>)
 80a1188:	681b      	ldr	r3, [r3, #0]
 80a118a:	69db      	ldr	r3, [r3, #28]
 80a118c:	9301      	str	r3, [sp, #4]
 80a118e:	bd08      	pop	{r3, pc}
 80a1190:	080601b4 	.word	0x080601b4

080a1194 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1194:	b508      	push	{r3, lr}
 80a1196:	4b02      	ldr	r3, [pc, #8]	; (80a11a0 <HAL_SPI_Is_Enabled+0xc>)
 80a1198:	681b      	ldr	r3, [r3, #0]
 80a119a:	6a1b      	ldr	r3, [r3, #32]
 80a119c:	9301      	str	r3, [sp, #4]
 80a119e:	bd08      	pop	{r3, pc}
 80a11a0:	080601b4 	.word	0x080601b4

080a11a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a11a4:	b508      	push	{r3, lr}
 80a11a6:	4b02      	ldr	r3, [pc, #8]	; (80a11b0 <HAL_USART_Init+0xc>)
 80a11a8:	681b      	ldr	r3, [r3, #0]
 80a11aa:	699b      	ldr	r3, [r3, #24]
 80a11ac:	9301      	str	r3, [sp, #4]
 80a11ae:	bd08      	pop	{r3, pc}
 80a11b0:	080601c4 	.word	0x080601c4

080a11b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a11b4:	b508      	push	{r3, lr}
 80a11b6:	4b02      	ldr	r3, [pc, #8]	; (80a11c0 <HAL_USART_Write_Data+0xc>)
 80a11b8:	681b      	ldr	r3, [r3, #0]
 80a11ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a11bc:	9301      	str	r3, [sp, #4]
 80a11be:	bd08      	pop	{r3, pc}
 80a11c0:	080601c4 	.word	0x080601c4

080a11c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a11c4:	b508      	push	{r3, lr}
 80a11c6:	4b02      	ldr	r3, [pc, #8]	; (80a11d0 <HAL_USART_Available_Data+0xc>)
 80a11c8:	681b      	ldr	r3, [r3, #0]
 80a11ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11cc:	9301      	str	r3, [sp, #4]
 80a11ce:	bd08      	pop	{r3, pc}
 80a11d0:	080601c4 	.word	0x080601c4

080a11d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a11d4:	b508      	push	{r3, lr}
 80a11d6:	4b02      	ldr	r3, [pc, #8]	; (80a11e0 <HAL_USART_Read_Data+0xc>)
 80a11d8:	681b      	ldr	r3, [r3, #0]
 80a11da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11dc:	9301      	str	r3, [sp, #4]
 80a11de:	bd08      	pop	{r3, pc}
 80a11e0:	080601c4 	.word	0x080601c4

080a11e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a11e4:	b508      	push	{r3, lr}
 80a11e6:	4b02      	ldr	r3, [pc, #8]	; (80a11f0 <HAL_USART_Peek_Data+0xc>)
 80a11e8:	681b      	ldr	r3, [r3, #0]
 80a11ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11ec:	9301      	str	r3, [sp, #4]
 80a11ee:	bd08      	pop	{r3, pc}
 80a11f0:	080601c4 	.word	0x080601c4

080a11f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a11f4:	b508      	push	{r3, lr}
 80a11f6:	4b02      	ldr	r3, [pc, #8]	; (80a1200 <HAL_USART_Flush_Data+0xc>)
 80a11f8:	681b      	ldr	r3, [r3, #0]
 80a11fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a11fc:	9301      	str	r3, [sp, #4]
 80a11fe:	bd08      	pop	{r3, pc}
 80a1200:	080601c4 	.word	0x080601c4

080a1204 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1204:	b508      	push	{r3, lr}
 80a1206:	4b02      	ldr	r3, [pc, #8]	; (80a1210 <HAL_USART_Is_Enabled+0xc>)
 80a1208:	681b      	ldr	r3, [r3, #0]
 80a120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a120c:	9301      	str	r3, [sp, #4]
 80a120e:	bd08      	pop	{r3, pc}
 80a1210:	080601c4 	.word	0x080601c4

080a1214 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1214:	b508      	push	{r3, lr}
 80a1216:	4b02      	ldr	r3, [pc, #8]	; (80a1220 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1218:	681b      	ldr	r3, [r3, #0]
 80a121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a121c:	9301      	str	r3, [sp, #4]
 80a121e:	bd08      	pop	{r3, pc}
 80a1220:	080601c4 	.word	0x080601c4

080a1224 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1224:	b508      	push	{r3, lr}
 80a1226:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <HAL_USB_USART_Init+0xc>)
 80a1228:	681b      	ldr	r3, [r3, #0]
 80a122a:	681b      	ldr	r3, [r3, #0]
 80a122c:	9301      	str	r3, [sp, #4]
 80a122e:	bd08      	pop	{r3, pc}
 80a1230:	080601d8 	.word	0x080601d8

080a1234 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1234:	b508      	push	{r3, lr}
 80a1236:	4b02      	ldr	r3, [pc, #8]	; (80a1240 <HAL_USB_USART_Available_Data+0xc>)
 80a1238:	681b      	ldr	r3, [r3, #0]
 80a123a:	691b      	ldr	r3, [r3, #16]
 80a123c:	9301      	str	r3, [sp, #4]
 80a123e:	bd08      	pop	{r3, pc}
 80a1240:	080601d8 	.word	0x080601d8

080a1244 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1244:	b508      	push	{r3, lr}
 80a1246:	4b02      	ldr	r3, [pc, #8]	; (80a1250 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1248:	681b      	ldr	r3, [r3, #0]
 80a124a:	695b      	ldr	r3, [r3, #20]
 80a124c:	9301      	str	r3, [sp, #4]
 80a124e:	bd08      	pop	{r3, pc}
 80a1250:	080601d8 	.word	0x080601d8

080a1254 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1254:	b508      	push	{r3, lr}
 80a1256:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <HAL_USB_USART_Receive_Data+0xc>)
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	699b      	ldr	r3, [r3, #24]
 80a125c:	9301      	str	r3, [sp, #4]
 80a125e:	bd08      	pop	{r3, pc}
 80a1260:	080601d8 	.word	0x080601d8

080a1264 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1264:	b508      	push	{r3, lr}
 80a1266:	4b02      	ldr	r3, [pc, #8]	; (80a1270 <HAL_USB_USART_Send_Data+0xc>)
 80a1268:	681b      	ldr	r3, [r3, #0]
 80a126a:	69db      	ldr	r3, [r3, #28]
 80a126c:	9301      	str	r3, [sp, #4]
 80a126e:	bd08      	pop	{r3, pc}
 80a1270:	080601d8 	.word	0x080601d8

080a1274 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1274:	b508      	push	{r3, lr}
 80a1276:	4b02      	ldr	r3, [pc, #8]	; (80a1280 <HAL_USB_USART_Flush_Data+0xc>)
 80a1278:	681b      	ldr	r3, [r3, #0]
 80a127a:	6a1b      	ldr	r3, [r3, #32]
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	bd08      	pop	{r3, pc}
 80a1280:	080601d8 	.word	0x080601d8

080a1284 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1284:	b508      	push	{r3, lr}
 80a1286:	4b02      	ldr	r3, [pc, #8]	; (80a1290 <HAL_NET_SetNetWatchDog+0xc>)
 80a1288:	681b      	ldr	r3, [r3, #0]
 80a128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a128c:	9301      	str	r3, [sp, #4]
 80a128e:	bd08      	pop	{r3, pc}
 80a1290:	080601c0 	.word	0x080601c0

080a1294 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1294:	b508      	push	{r3, lr}
 80a1296:	4b02      	ldr	r3, [pc, #8]	; (80a12a0 <inet_gethostbyname+0xc>)
 80a1298:	681b      	ldr	r3, [r3, #0]
 80a129a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a129c:	9301      	str	r3, [sp, #4]
 80a129e:	bd08      	pop	{r3, pc}
 80a12a0:	080601c0 	.word	0x080601c0

080a12a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a12a4:	b508      	push	{r3, lr}
 80a12a6:	4b02      	ldr	r3, [pc, #8]	; (80a12b0 <log_message+0xc>)
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a12ac:	9301      	str	r3, [sp, #4]
 80a12ae:	bd08      	pop	{r3, pc}
 80a12b0:	080201a8 	.word	0x080201a8

080a12b4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a12b4:	b508      	push	{r3, lr}
 80a12b6:	4b02      	ldr	r3, [pc, #8]	; (80a12c0 <system_mode+0xc>)
 80a12b8:	681b      	ldr	r3, [r3, #0]
 80a12ba:	681b      	ldr	r3, [r3, #0]
 80a12bc:	9301      	str	r3, [sp, #4]
 80a12be:	bd08      	pop	{r3, pc}
 80a12c0:	080601a4 	.word	0x080601a4

080a12c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a12c4:	b508      	push	{r3, lr}
 80a12c6:	4b02      	ldr	r3, [pc, #8]	; (80a12d0 <set_system_mode+0xc>)
 80a12c8:	681b      	ldr	r3, [r3, #0]
 80a12ca:	685b      	ldr	r3, [r3, #4]
 80a12cc:	9301      	str	r3, [sp, #4]
 80a12ce:	bd08      	pop	{r3, pc}
 80a12d0:	080601a4 	.word	0x080601a4

080a12d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a12d4:	b508      	push	{r3, lr}
 80a12d6:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <application_thread_current+0xc>)
 80a12d8:	681b      	ldr	r3, [r3, #0]
 80a12da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a12dc:	9301      	str	r3, [sp, #4]
 80a12de:	bd08      	pop	{r3, pc}
 80a12e0:	080601a4 	.word	0x080601a4

080a12e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a12e4:	b508      	push	{r3, lr}
 80a12e6:	4b02      	ldr	r3, [pc, #8]	; (80a12f0 <application_thread_invoke+0xc>)
 80a12e8:	681b      	ldr	r3, [r3, #0]
 80a12ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a12ec:	9301      	str	r3, [sp, #4]
 80a12ee:	bd08      	pop	{r3, pc}
 80a12f0:	080601a4 	.word	0x080601a4

080a12f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a12f4:	b508      	push	{r3, lr}
 80a12f6:	4b02      	ldr	r3, [pc, #8]	; (80a1300 <system_thread_get_state+0xc>)
 80a12f8:	681b      	ldr	r3, [r3, #0]
 80a12fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a12fc:	9301      	str	r3, [sp, #4]
 80a12fe:	bd08      	pop	{r3, pc}
 80a1300:	080601a4 	.word	0x080601a4

080a1304 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1304:	b508      	push	{r3, lr}
 80a1306:	4b03      	ldr	r3, [pc, #12]	; (80a1314 <system_ctrl_set_app_request_handler+0x10>)
 80a1308:	681b      	ldr	r3, [r3, #0]
 80a130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a130e:	9301      	str	r3, [sp, #4]
 80a1310:	bd08      	pop	{r3, pc}
 80a1312:	0000      	.short	0x0000
 80a1314:	080601a4 	.word	0x080601a4

080a1318 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b03      	ldr	r3, [pc, #12]	; (80a1328 <system_ctrl_set_result+0x10>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1322:	9301      	str	r3, [sp, #4]
 80a1324:	bd08      	pop	{r3, pc}
 80a1326:	0000      	.short	0x0000
 80a1328:	080601a4 	.word	0x080601a4

080a132c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a132c:	b508      	push	{r3, lr}
 80a132e:	4b02      	ldr	r3, [pc, #8]	; (80a1338 <spark_function+0xc>)
 80a1330:	681b      	ldr	r3, [r3, #0]
 80a1332:	685b      	ldr	r3, [r3, #4]
 80a1334:	9301      	str	r3, [sp, #4]
 80a1336:	bd08      	pop	{r3, pc}
 80a1338:	080601cc 	.word	0x080601cc

080a133c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a133c:	b508      	push	{r3, lr}
 80a133e:	4b02      	ldr	r3, [pc, #8]	; (80a1348 <spark_process+0xc>)
 80a1340:	681b      	ldr	r3, [r3, #0]
 80a1342:	689b      	ldr	r3, [r3, #8]
 80a1344:	9301      	str	r3, [sp, #4]
 80a1346:	bd08      	pop	{r3, pc}
 80a1348:	080601cc 	.word	0x080601cc

080a134c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a134c:	b508      	push	{r3, lr}
 80a134e:	4b02      	ldr	r3, [pc, #8]	; (80a1358 <spark_cloud_flag_connected+0xc>)
 80a1350:	681b      	ldr	r3, [r3, #0]
 80a1352:	695b      	ldr	r3, [r3, #20]
 80a1354:	9301      	str	r3, [sp, #4]
 80a1356:	bd08      	pop	{r3, pc}
 80a1358:	080601cc 	.word	0x080601cc

080a135c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a135c:	b508      	push	{r3, lr}
 80a135e:	4b02      	ldr	r3, [pc, #8]	; (80a1368 <spark_send_event+0xc>)
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	6a1b      	ldr	r3, [r3, #32]
 80a1364:	9301      	str	r3, [sp, #4]
 80a1366:	bd08      	pop	{r3, pc}
 80a1368:	080601cc 	.word	0x080601cc

080a136c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a136c:	b508      	push	{r3, lr}
 80a136e:	4b02      	ldr	r3, [pc, #8]	; (80a1378 <spark_sync_time_pending+0xc>)
 80a1370:	681b      	ldr	r3, [r3, #0]
 80a1372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1374:	9301      	str	r3, [sp, #4]
 80a1376:	bd08      	pop	{r3, pc}
 80a1378:	080601cc 	.word	0x080601cc

080a137c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a137c:	b508      	push	{r3, lr}
 80a137e:	4b02      	ldr	r3, [pc, #8]	; (80a1388 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1384:	9301      	str	r3, [sp, #4]
 80a1386:	bd08      	pop	{r3, pc}
 80a1388:	080601cc 	.word	0x080601cc

080a138c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a138c:	b508      	push	{r3, lr}
 80a138e:	4b02      	ldr	r3, [pc, #8]	; (80a1398 <network_ready+0xc>)
 80a1390:	681b      	ldr	r3, [r3, #0]
 80a1392:	691b      	ldr	r3, [r3, #16]
 80a1394:	9301      	str	r3, [sp, #4]
 80a1396:	bd08      	pop	{r3, pc}
 80a1398:	080601c8 	.word	0x080601c8

080a139c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a139c:	b508      	push	{r3, lr}
 80a139e:	4b02      	ldr	r3, [pc, #8]	; (80a13a8 <malloc+0xc>)
 80a13a0:	681b      	ldr	r3, [r3, #0]
 80a13a2:	681b      	ldr	r3, [r3, #0]
 80a13a4:	9301      	str	r3, [sp, #4]
 80a13a6:	bd08      	pop	{r3, pc}
 80a13a8:	080601a0 	.word	0x080601a0

080a13ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a13ac:	b508      	push	{r3, lr}
 80a13ae:	4b02      	ldr	r3, [pc, #8]	; (80a13b8 <free+0xc>)
 80a13b0:	681b      	ldr	r3, [r3, #0]
 80a13b2:	685b      	ldr	r3, [r3, #4]
 80a13b4:	9301      	str	r3, [sp, #4]
 80a13b6:	bd08      	pop	{r3, pc}
 80a13b8:	080601a0 	.word	0x080601a0

080a13bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a13bc:	b508      	push	{r3, lr}
 80a13be:	4b02      	ldr	r3, [pc, #8]	; (80a13c8 <realloc+0xc>)
 80a13c0:	681b      	ldr	r3, [r3, #0]
 80a13c2:	689b      	ldr	r3, [r3, #8]
 80a13c4:	9301      	str	r3, [sp, #4]
 80a13c6:	bd08      	pop	{r3, pc}
 80a13c8:	080601a0 	.word	0x080601a0

080a13cc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a13cc:	b508      	push	{r3, lr}
 80a13ce:	4b02      	ldr	r3, [pc, #8]	; (80a13d8 <abort+0xc>)
 80a13d0:	681b      	ldr	r3, [r3, #0]
 80a13d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a13d4:	9301      	str	r3, [sp, #4]
 80a13d6:	bd08      	pop	{r3, pc}
 80a13d8:	080601a0 	.word	0x080601a0

080a13dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a13dc:	b508      	push	{r3, lr}
 80a13de:	4b02      	ldr	r3, [pc, #8]	; (80a13e8 <_malloc_r+0xc>)
 80a13e0:	681b      	ldr	r3, [r3, #0]
 80a13e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13e4:	9301      	str	r3, [sp, #4]
 80a13e6:	bd08      	pop	{r3, pc}
 80a13e8:	080601a0 	.word	0x080601a0

080a13ec <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a13ec:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a13ee:	6883      	ldr	r3, [r0, #8]
 80a13f0:	4604      	mov	r4, r0
 80a13f2:	b90b      	cbnz	r3, 80a13f8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a13f4:	f001 fbd7 	bl	80a2ba6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a13f8:	68c3      	ldr	r3, [r0, #12]
 80a13fa:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a13fc:	68a3      	ldr	r3, [r4, #8]
 80a13fe:	b11b      	cbz	r3, 80a1408 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1400:	2203      	movs	r2, #3
 80a1402:	4621      	mov	r1, r4
 80a1404:	4620      	mov	r0, r4
 80a1406:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1408:	4620      	mov	r0, r4
}
 80a140a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a140e:	f7fe be48 	b.w	80a00a2 <_ZdlPv>

080a1412 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1412:	4770      	bx	lr

080a1414 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1414:	2000      	movs	r0, #0
 80a1416:	4770      	bx	lr

080a1418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1418:	b510      	push	{r4, lr}
 80a141a:	4604      	mov	r4, r0
 80a141c:	f7fe fe41 	bl	80a00a2 <_ZdlPv>
 80a1420:	4620      	mov	r0, r4
 80a1422:	bd10      	pop	{r4, pc}

080a1424 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1424:	b508      	push	{r3, lr}
      { delete this; }
 80a1426:	b108      	cbz	r0, 80a142c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1428:	f7ff fff6 	bl	80a1418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a142c:	bd08      	pop	{r3, pc}

080a142e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a142e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1430:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1432:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1434:	b113      	cbz	r3, 80a143c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1436:	2203      	movs	r2, #3
 80a1438:	4601      	mov	r1, r0
 80a143a:	4798      	blx	r3
    }
 80a143c:	4620      	mov	r0, r4
 80a143e:	bd10      	pop	{r4, pc}

080a1440 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1440:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1442:	68c4      	ldr	r4, [r0, #12]
 80a1444:	b1d4      	cbz	r4, 80a147c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1446:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1448:	2b02      	cmp	r3, #2
 80a144a:	d102      	bne.n	80a1452 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a144c:	68e0      	ldr	r0, [r4, #12]
 80a144e:	f7ff ffad 	bl	80a13ac <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1452:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1454:	b12d      	cbz	r5, 80a1462 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1456:	4628      	mov	r0, r5
 80a1458:	f7ff ffe9 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
 80a145c:	4628      	mov	r0, r5
 80a145e:	f7fe fe20 	bl	80a00a2 <_ZdlPv>
 80a1462:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1464:	b12d      	cbz	r5, 80a1472 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a1466:	4628      	mov	r0, r5
 80a1468:	f7ff ffe1 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
 80a146c:	4628      	mov	r0, r5
 80a146e:	f7fe fe18 	bl	80a00a2 <_ZdlPv>
 80a1472:	4620      	mov	r0, r4
 80a1474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1478:	f7fe be13 	b.w	80a00a2 <_ZdlPv>
 80a147c:	bd38      	pop	{r3, r4, r5, pc}

080a147e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a147e:	b510      	push	{r4, lr}
 80a1480:	b088      	sub	sp, #32
 80a1482:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1484:	4668      	mov	r0, sp
 80a1486:	f000 fc6e 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a148a:	4669      	mov	r1, sp
 80a148c:	a804      	add	r0, sp, #16
 80a148e:	f000 fc8c 	bl	80a1daa <_ZN6StringC1ERKS_>
 80a1492:	a804      	add	r0, sp, #16
 80a1494:	47a0      	blx	r4
 80a1496:	4604      	mov	r4, r0
 80a1498:	a804      	add	r0, sp, #16
 80a149a:	f000 fc1d 	bl	80a1cd8 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a149e:	4668      	mov	r0, sp
 80a14a0:	f000 fc1a 	bl	80a1cd8 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	b008      	add	sp, #32
 80a14a8:	bd10      	pop	{r4, pc}

080a14aa <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a14aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a14ac:	4607      	mov	r7, r0
 80a14ae:	460e      	mov	r6, r1
 80a14b0:	4615      	mov	r5, r2
 80a14b2:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a14b4:	2410      	movs	r4, #16
 80a14b6:	4622      	mov	r2, r4
 80a14b8:	2100      	movs	r1, #0
 80a14ba:	4668      	mov	r0, sp
 80a14bc:	f002 fdc3 	bl	80a4046 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a14c0:	2200      	movs	r2, #0
 80a14c2:	4669      	mov	r1, sp
 80a14c4:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a14c6:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a14ca:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a14cc:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a14ce:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a14d0:	f7ff ff2c 	bl	80a132c <spark_function>
}
 80a14d4:	b005      	add	sp, #20
 80a14d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a14d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a14d8:	b513      	push	{r0, r1, r4, lr}
 80a14da:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a14dc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a14e0:	2300      	movs	r3, #0
 80a14e2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a14e4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a14e6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a14e8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a14ea:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a14ec:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a14ee:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a14f0:	f7fe ff44 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	b002      	add	sp, #8
 80a14f8:	bd10      	pop	{r4, pc}

080a14fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a14fa:	680b      	ldr	r3, [r1, #0]
 80a14fc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a14fe:	b113      	cbz	r3, 80a1506 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1500:	685a      	ldr	r2, [r3, #4]
 80a1502:	3201      	adds	r2, #1
 80a1504:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1506:	4770      	bx	lr

080a1508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a150a:	460c      	mov	r4, r1
 80a150c:	4606      	mov	r6, r0
 80a150e:	460f      	mov	r7, r1
 80a1510:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1514:	ad02      	add	r5, sp, #8
 80a1516:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a151a:	4621      	mov	r1, r4
 80a151c:	a801      	add	r0, sp, #4
 80a151e:	f7ff ffec 	bl	80a14fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1522:	4629      	mov	r1, r5
 80a1524:	4630      	mov	r0, r6
 80a1526:	f7ff ffd7 	bl	80a14d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a152a:	a801      	add	r0, sp, #4
 80a152c:	f7fe ff26 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1530:	4620      	mov	r0, r4
 80a1532:	f7fe ff23 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1536:	4638      	mov	r0, r7
 80a1538:	f7fe fdb3 	bl	80a00a2 <_ZdlPv>
        return p;
    }
 80a153c:	4630      	mov	r0, r6
 80a153e:	b003      	add	sp, #12
 80a1540:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1542 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1542:	b513      	push	{r0, r1, r4, lr}
 80a1544:	460b      	mov	r3, r1
 80a1546:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1548:	c803      	ldmia	r0, {r0, r1}
 80a154a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a154e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1552:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1556:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a155a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a155e:	b002      	add	sp, #8
 80a1560:	bd10      	pop	{r4, pc}

080a1562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1562:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1564:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1566:	b90a      	cbnz	r2, 80a156c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1568:	f001 fb1d 	bl	80a2ba6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a156c:	68c3      	ldr	r3, [r0, #12]
    }
 80a156e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1572:	4718      	bx	r3

080a1574 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1574:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1576:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1578:	f100 0110 	add.w	r1, r0, #16
 80a157c:	f7ff fff1 	bl	80a1562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1580:	bd08      	pop	{r3, pc}

080a1582 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1582:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1584:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1586:	b90a      	cbnz	r2, 80a158c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1588:	f001 fb0d 	bl	80a2ba6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a158c:	68c3      	ldr	r3, [r0, #12]
    }
 80a158e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1592:	4718      	bx	r3

080a1594 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1594:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1596:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1598:	f100 0110 	add.w	r1, r0, #16
 80a159c:	f7ff fff1 	bl	80a1582 <_ZNKSt8functionIFvRKbEEclES1_>
 80a15a0:	bd08      	pop	{r3, pc}

080a15a2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a15a2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a15a4:	2300      	movs	r3, #0
 80a15a6:	6083      	str	r3, [r0, #8]
 80a15a8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a15aa:	4604      	mov	r4, r0
 80a15ac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a15ae:	b12b      	cbz	r3, 80a15bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a15b0:	2202      	movs	r2, #2
 80a15b2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a15b4:	68eb      	ldr	r3, [r5, #12]
 80a15b6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a15b8:	68ab      	ldr	r3, [r5, #8]
 80a15ba:	60a3      	str	r3, [r4, #8]
	}
    }
 80a15bc:	4620      	mov	r0, r4
 80a15be:	bd38      	pop	{r3, r4, r5, pc}

080a15c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a15c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a15c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a15c8:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a15ca:	f04f 0002 	mov.w	r0, #2
 80a15ce:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a15d0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15d4:	808b      	strh	r3, [r1, #4]
 80a15d6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a15d8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a15da:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a15de:	600b      	str	r3, [r1, #0]
 80a15e0:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a15e4:	4299      	cmp	r1, r3
 80a15e6:	d103      	bne.n	80a15f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a15e8:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a15ec:	2d00      	cmp	r5, #0
 80a15ee:	d1f7      	bne.n	80a15e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a15f0:	d002      	beq.n	80a15f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a15f2:	f88d 1000 	strb.w	r1, [sp]
 80a15f6:	e06b      	b.n	80a16d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a15f8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a15fc:	bf1c      	itt	ne
 80a15fe:	60e7      	strne	r7, [r4, #12]
 80a1600:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1602:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1606:	bf18      	it	ne
 80a1608:	461f      	movne	r7, r3
 80a160a:	2301      	movs	r3, #1
 80a160c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a160e:	f3bf 8f5f 	dmb	sy
 80a1612:	f104 0308 	add.w	r3, r4, #8
 80a1616:	2000      	movs	r0, #0
 80a1618:	e853 6f00 	ldrex	r6, [r3]
 80a161c:	e843 0200 	strex	r2, r0, [r3]
 80a1620:	2a00      	cmp	r2, #0
 80a1622:	d1f9      	bne.n	80a1618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1624:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1628:	2e00      	cmp	r6, #0
 80a162a:	d051      	beq.n	80a16d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a162c:	f7ff fe52 	bl	80a12d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1630:	b120      	cbz	r0, 80a163c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1632:	4629      	mov	r1, r5
 80a1634:	4630      	mov	r0, r6
 80a1636:	f7ff ff94 	bl	80a1562 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a163a:	e043      	b.n	80a16c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a163c:	4631      	mov	r1, r6
 80a163e:	4668      	mov	r0, sp
 80a1640:	f7ff ffaf 	bl	80a15a2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1644:	68e0      	ldr	r0, [r4, #12]
 80a1646:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a164a:	b108      	cbz	r0, 80a1650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a164c:	f002 fd3e 	bl	80a40cc <strdup>
 80a1650:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1652:	2010      	movs	r0, #16
 80a1654:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1658:	f7fe fd1f 	bl	80a009a <_Znwj>
 80a165c:	4605      	mov	r5, r0
 80a165e:	b330      	cbz	r0, 80a16ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1660:	f04f 0800 	mov.w	r8, #0
 80a1664:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1668:	2018      	movs	r0, #24
 80a166a:	f7fe fd16 	bl	80a009a <_Znwj>
 80a166e:	4604      	mov	r4, r0
 80a1670:	b1c0      	cbz	r0, 80a16a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1672:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1676:	4601      	mov	r1, r0
 80a1678:	4668      	mov	r0, sp
 80a167a:	f7ff ff62 	bl	80a1542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a167e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1680:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1682:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1684:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1686:	9202      	str	r2, [sp, #8]
 80a1688:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a168a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a168c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1690:	9203      	str	r2, [sp, #12]
 80a1692:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1694:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1698:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a169c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a169e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a16a2:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a16a4:	4b0d      	ldr	r3, [pc, #52]	; (80a16dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a16a6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a16a8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a16aa:	4b0d      	ldr	r3, [pc, #52]	; (80a16e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a16ac:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a16ae:	9804      	ldr	r0, [sp, #16]
 80a16b0:	f7ff fe7c 	bl	80a13ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a16b4:	4668      	mov	r0, sp
 80a16b6:	f7ff feba 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a16ba:	2200      	movs	r2, #0
 80a16bc:	4629      	mov	r1, r5
 80a16be:	4809      	ldr	r0, [pc, #36]	; (80a16e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a16c0:	f7ff fe10 	bl	80a12e4 <application_thread_invoke>
 80a16c4:	4630      	mov	r0, r6
 80a16c6:	f7ff feb2 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a16ca:	4630      	mov	r0, r6
 80a16cc:	f7fe fce9 	bl	80a00a2 <_ZdlPv>
 80a16d0:	4638      	mov	r0, r7
 80a16d2:	f7ff fe6b 	bl	80a13ac <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a16d6:	b006      	add	sp, #24
 80a16d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a16dc:	080a1575 	.word	0x080a1575
 80a16e0:	080a17d1 	.word	0x080a17d1
 80a16e4:	080a13ed 	.word	0x080a13ed

080a16e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a16e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a16ec:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a16ee:	ad07      	add	r5, sp, #28
 80a16f0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a16f4:	4606      	mov	r6, r0
 80a16f6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a16f8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a16fa:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a16fc:	460f      	mov	r7, r1
 80a16fe:	4690      	mov	r8, r2
 80a1700:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1704:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1708:	f8c5 b008 	str.w	fp, [r5, #8]
 80a170c:	9307      	str	r3, [sp, #28]
 80a170e:	f7fe fcc4 	bl	80a009a <_Znwj>
 80a1712:	4604      	mov	r4, r0
 80a1714:	b138      	cbz	r0, 80a1726 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1716:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a171a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a171e:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1722:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1726:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1728:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a172a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a172c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a172e:	f7fe fcb4 	bl	80a009a <_Znwj>
 80a1732:	b128      	cbz	r0, 80a1740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1734:	2301      	movs	r3, #1
 80a1736:	6043      	str	r3, [r0, #4]
 80a1738:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a173a:	4b23      	ldr	r3, [pc, #140]	; (80a17c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a173c:	60c4      	str	r4, [r0, #12]
 80a173e:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1740:	4b22      	ldr	r3, [pc, #136]	; (80a17cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1742:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1744:	2008      	movs	r0, #8
 80a1746:	9308      	str	r3, [sp, #32]
 80a1748:	f7fe fca7 	bl	80a009a <_Znwj>
 80a174c:	4604      	mov	r4, r0
 80a174e:	b128      	cbz	r0, 80a175c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1750:	9b03      	ldr	r3, [sp, #12]
 80a1752:	a904      	add	r1, sp, #16
 80a1754:	f840 3b04 	str.w	r3, [r0], #4
 80a1758:	f7ff fecf 	bl	80a14fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a175c:	9500      	str	r5, [sp, #0]
 80a175e:	fa5f f38a 	uxtb.w	r3, sl
 80a1762:	464a      	mov	r2, r9
 80a1764:	4641      	mov	r1, r8
 80a1766:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1768:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a176a:	f7ff fdf7 	bl	80a135c <spark_send_event>
 80a176e:	b9b8      	cbnz	r0, 80a17a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1770:	9b03      	ldr	r3, [sp, #12]
 80a1772:	785b      	ldrb	r3, [r3, #1]
 80a1774:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1778:	b993      	cbnz	r3, 80a17a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a177a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a177e:	a905      	add	r1, sp, #20
 80a1780:	a803      	add	r0, sp, #12
 80a1782:	9205      	str	r2, [sp, #20]
 80a1784:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1788:	f7ff ff1a 	bl	80a15c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a178c:	9805      	ldr	r0, [sp, #20]
 80a178e:	f7ff fe0d 	bl	80a13ac <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1792:	a805      	add	r0, sp, #20
 80a1794:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1796:	f7ff feb7 	bl	80a1508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a179a:	a806      	add	r0, sp, #24
 80a179c:	f7fe fdee 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17a0:	9b03      	ldr	r3, [sp, #12]
 80a17a2:	a904      	add	r1, sp, #16
 80a17a4:	a806      	add	r0, sp, #24
 80a17a6:	9305      	str	r3, [sp, #20]
 80a17a8:	f7ff fea7 	bl	80a14fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a17ac:	a905      	add	r1, sp, #20
 80a17ae:	4630      	mov	r0, r6
 80a17b0:	f7ff fe92 	bl	80a14d8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17b4:	a806      	add	r0, sp, #24
 80a17b6:	f7fe fde1 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17ba:	a804      	add	r0, sp, #16
 80a17bc:	f7fe fdde 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a17c0:	4630      	mov	r0, r6
 80a17c2:	b00b      	add	sp, #44	; 0x2c
 80a17c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a17c8:	080a4340 	.word	0x080a4340
 80a17cc:	080a1939 	.word	0x080a1939

080a17d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a17d0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a17d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a17d4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a17d6:	d006      	beq.n	80a17e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a17d8:	2a03      	cmp	r2, #3
 80a17da:	d017      	beq.n	80a180c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a17dc:	2a01      	cmp	r2, #1
 80a17de:	d120      	bne.n	80a1822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a17e0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a17e2:	6003      	str	r3, [r0, #0]
	      break;
 80a17e4:	e01d      	b.n	80a1822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a17e6:	2018      	movs	r0, #24
 80a17e8:	680e      	ldr	r6, [r1, #0]
 80a17ea:	f7fe fc56 	bl	80a009a <_Znwj>
 80a17ee:	4605      	mov	r5, r0
 80a17f0:	b150      	cbz	r0, 80a1808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a17f2:	4631      	mov	r1, r6
 80a17f4:	f7ff fed5 	bl	80a15a2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a17f8:	6930      	ldr	r0, [r6, #16]
 80a17fa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a17fe:	b108      	cbz	r0, 80a1804 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1800:	f002 fc64 	bl	80a40cc <strdup>
 80a1804:	6128      	str	r0, [r5, #16]
 80a1806:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1808:	6025      	str	r5, [r4, #0]
 80a180a:	e00a      	b.n	80a1822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a180c:	6804      	ldr	r4, [r0, #0]
 80a180e:	b144      	cbz	r4, 80a1822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1810:	6920      	ldr	r0, [r4, #16]
 80a1812:	f7ff fdcb 	bl	80a13ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1816:	4620      	mov	r0, r4
 80a1818:	f7ff fe09 	bl	80a142e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a181c:	4620      	mov	r0, r4
 80a181e:	f7fe fc40 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1822:	2000      	movs	r0, #0
 80a1824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1826 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1826:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1828:	2300      	movs	r3, #0
 80a182a:	6083      	str	r3, [r0, #8]
 80a182c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a182e:	4604      	mov	r4, r0
 80a1830:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1832:	b12b      	cbz	r3, 80a1840 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1834:	2202      	movs	r2, #2
 80a1836:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1838:	68eb      	ldr	r3, [r5, #12]
 80a183a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a183c:	68ab      	ldr	r3, [r5, #8]
 80a183e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1840:	4620      	mov	r0, r4
 80a1842:	bd38      	pop	{r3, r4, r5, pc}

080a1844 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1844:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1846:	b570      	push	{r4, r5, r6, lr}
 80a1848:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a184a:	d006      	beq.n	80a185a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a184c:	2a03      	cmp	r2, #3
 80a184e:	d011      	beq.n	80a1874 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1850:	2a01      	cmp	r2, #1
 80a1852:	d117      	bne.n	80a1884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1854:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1856:	6003      	str	r3, [r0, #0]
	      break;
 80a1858:	e014      	b.n	80a1884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a185a:	2014      	movs	r0, #20
 80a185c:	680e      	ldr	r6, [r1, #0]
 80a185e:	f7fe fc1c 	bl	80a009a <_Znwj>
 80a1862:	4605      	mov	r5, r0
 80a1864:	b120      	cbz	r0, 80a1870 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1866:	4631      	mov	r1, r6
 80a1868:	f7ff ffdd 	bl	80a1826 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a186c:	7c33      	ldrb	r3, [r6, #16]
 80a186e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1870:	6025      	str	r5, [r4, #0]
 80a1872:	e007      	b.n	80a1884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1874:	6804      	ldr	r4, [r0, #0]
 80a1876:	b12c      	cbz	r4, 80a1884 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1878:	4620      	mov	r0, r4
 80a187a:	f7ff fdd8 	bl	80a142e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a187e:	4620      	mov	r0, r4
 80a1880:	f7fe fc0f 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1884:	2000      	movs	r0, #0
 80a1886:	bd70      	pop	{r4, r5, r6, pc}

080a1888 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1888:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a188a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a188c:	f3bf 8f5f 	dmb	sy
 80a1890:	b087      	sub	sp, #28
 80a1892:	2300      	movs	r3, #0
 80a1894:	e850 6f00 	ldrex	r6, [r0]
 80a1898:	e840 3200 	strex	r2, r3, [r0]
 80a189c:	2a00      	cmp	r2, #0
 80a189e:	d1f9      	bne.n	80a1894 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a18a0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a18a4:	2e00      	cmp	r6, #0
 80a18a6:	d03e      	beq.n	80a1926 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a18a8:	4618      	mov	r0, r3
 80a18aa:	f7ff fd13 	bl	80a12d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a18ae:	4607      	mov	r7, r0
 80a18b0:	b120      	cbz	r0, 80a18bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a18b2:	4621      	mov	r1, r4
 80a18b4:	4630      	mov	r0, r6
 80a18b6:	f7ff fe64 	bl	80a1582 <_ZNKSt8functionIFvRKbEEclES1_>
 80a18ba:	e02e      	b.n	80a191a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a18bc:	4631      	mov	r1, r6
 80a18be:	a801      	add	r0, sp, #4
 80a18c0:	f7ff ffb1 	bl	80a1826 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a18c4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a18c6:	2010      	movs	r0, #16
 80a18c8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a18cc:	f7fe fbe5 	bl	80a009a <_Znwj>
 80a18d0:	4605      	mov	r5, r0
 80a18d2:	b1d0      	cbz	r0, 80a190a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18d4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a18d6:	2014      	movs	r0, #20
 80a18d8:	f7fe fbdf 	bl	80a009a <_Znwj>
 80a18dc:	4604      	mov	r4, r0
 80a18de:	b178      	cbz	r0, 80a1900 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18e0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a18e2:	4601      	mov	r1, r0
 80a18e4:	a801      	add	r0, sp, #4
 80a18e6:	f7ff fe2c 	bl	80a1542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a18ea:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a18ec:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a18ee:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a18f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a18f2:	9203      	str	r2, [sp, #12]
 80a18f4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a18f6:	60e3      	str	r3, [r4, #12]
 80a18f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a18fc:	9204      	str	r2, [sp, #16]
 80a18fe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1900:	4b0a      	ldr	r3, [pc, #40]	; (80a192c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1902:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1904:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1906:	4b0a      	ldr	r3, [pc, #40]	; (80a1930 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1908:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a190a:	a801      	add	r0, sp, #4
 80a190c:	f7ff fd8f 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1910:	2200      	movs	r2, #0
 80a1912:	4629      	mov	r1, r5
 80a1914:	4807      	ldr	r0, [pc, #28]	; (80a1934 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1916:	f7ff fce5 	bl	80a12e4 <application_thread_invoke>
 80a191a:	4630      	mov	r0, r6
 80a191c:	f7ff fd87 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1920:	4630      	mov	r0, r6
 80a1922:	f7fe fbbe 	bl	80a00a2 <_ZdlPv>
        }
    }
 80a1926:	b007      	add	sp, #28
 80a1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a192a:	bf00      	nop
 80a192c:	080a1595 	.word	0x080a1595
 80a1930:	080a1845 	.word	0x080a1845
 80a1934:	080a13ed 	.word	0x080a13ed

080a1938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1938:	b530      	push	{r4, r5, lr}
 80a193a:	4604      	mov	r4, r0
 80a193c:	b085      	sub	sp, #20
 80a193e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1940:	4668      	mov	r0, sp
 80a1942:	4611      	mov	r1, r2
 80a1944:	f7ff fde0 	bl	80a1508 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1948:	b17c      	cbz	r4, 80a196a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a194a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a194c:	4628      	mov	r0, r5
 80a194e:	b10d      	cbz	r5, 80a1954 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1950:	f002 fbbc 	bl	80a40cc <strdup>
 80a1954:	9002      	str	r0, [sp, #8]
 80a1956:	a902      	add	r1, sp, #8
 80a1958:	4668      	mov	r0, sp
 80a195a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a195e:	f7ff fe2f 	bl	80a15c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1962:	9802      	ldr	r0, [sp, #8]
 80a1964:	f7ff fd22 	bl	80a13ac <free>
 80a1968:	e01d      	b.n	80a19a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a196a:	f04f 0201 	mov.w	r2, #1
 80a196e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1970:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1974:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1978:	42a3      	cmp	r3, r4
 80a197a:	d103      	bne.n	80a1984 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a197c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1980:	2900      	cmp	r1, #0
 80a1982:	d1f7      	bne.n	80a1974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1984:	d002      	beq.n	80a198c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1986:	f88d 3008 	strb.w	r3, [sp, #8]
 80a198a:	e00c      	b.n	80a19a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a198c:	f110 010c 	adds.w	r1, r0, #12
 80a1990:	f04f 0301 	mov.w	r3, #1
 80a1994:	bf18      	it	ne
 80a1996:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1998:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a199c:	3004      	adds	r0, #4
 80a199e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a19a2:	f7ff ff71 	bl	80a1888 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a19a6:	a801      	add	r0, sp, #4
 80a19a8:	f7fe fce8 	bl	80a037c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a19ac:	b005      	add	sp, #20
 80a19ae:	bd30      	pop	{r4, r5, pc}

080a19b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a19b0:	4770      	bx	lr

080a19b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a19b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19b4:	4606      	mov	r6, r0
 80a19b6:	4615      	mov	r5, r2
 80a19b8:	460c      	mov	r4, r1
 80a19ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19bc:	42bc      	cmp	r4, r7
 80a19be:	d006      	beq.n	80a19ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a19c0:	6833      	ldr	r3, [r6, #0]
 80a19c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a19c6:	689b      	ldr	r3, [r3, #8]
 80a19c8:	4630      	mov	r0, r6
 80a19ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a19cc:	e7f6      	b.n	80a19bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a19ce:	4628      	mov	r0, r5
 80a19d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a19d2:	2200      	movs	r2, #0
 80a19d4:	7c00      	ldrb	r0, [r0, #16]
 80a19d6:	f7ff bb5b 	b.w	80a1090 <HAL_I2C_Write_Data>

080a19da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a19da:	2100      	movs	r1, #0
 80a19dc:	7c00      	ldrb	r0, [r0, #16]
 80a19de:	f7ff bb5f 	b.w	80a10a0 <HAL_I2C_Available_Data>

080a19e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a19e2:	2100      	movs	r1, #0
 80a19e4:	7c00      	ldrb	r0, [r0, #16]
 80a19e6:	f7ff bb63 	b.w	80a10b0 <HAL_I2C_Read_Data>

080a19ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a19ea:	2100      	movs	r1, #0
 80a19ec:	7c00      	ldrb	r0, [r0, #16]
 80a19ee:	f7ff bb67 	b.w	80a10c0 <HAL_I2C_Peek_Data>

080a19f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a19f2:	2100      	movs	r1, #0
 80a19f4:	7c00      	ldrb	r0, [r0, #16]
 80a19f6:	f7ff bb6b 	b.w	80a10d0 <HAL_I2C_Flush_Data>

080a19fa <_ZN7TwoWireD0Ev>:
 80a19fa:	b510      	push	{r4, lr}
 80a19fc:	4604      	mov	r4, r0
 80a19fe:	f7fe fb50 	bl	80a00a2 <_ZdlPv>
 80a1a02:	4620      	mov	r0, r4
 80a1a04:	bd10      	pop	{r4, pc}
	...

080a1a08 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a08:	b510      	push	{r4, lr}
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1a12:	60a3      	str	r3, [r4, #8]
 80a1a14:	4b04      	ldr	r3, [pc, #16]	; (80a1a28 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1a16:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1a18:	7420      	strb	r0, [r4, #16]
 80a1a1a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1a1c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1a1e:	f7ff fb67 	bl	80a10f0 <HAL_I2C_Init>

}
 80a1a22:	4620      	mov	r0, r4
 80a1a24:	bd10      	pop	{r4, pc}
 80a1a26:	bf00      	nop
 80a1a28:	080a435c 	.word	0x080a435c

080a1a2c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1a2c:	2100      	movs	r1, #0
 80a1a2e:	7c00      	ldrb	r0, [r0, #16]
 80a1a30:	f7ff bb56 	b.w	80a10e0 <HAL_I2C_Is_Enabled>

080a1a34 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1a34:	4770      	bx	lr

080a1a36 <_ZN9IPAddressD0Ev>:
 80a1a36:	b510      	push	{r4, lr}
 80a1a38:	4604      	mov	r4, r0
 80a1a3a:	f7fe fb32 	bl	80a00a2 <_ZdlPv>
 80a1a3e:	4620      	mov	r0, r4
 80a1a40:	bd10      	pop	{r4, pc}

080a1a42 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a44:	460f      	mov	r7, r1
 80a1a46:	f100 0608 	add.w	r6, r0, #8
 80a1a4a:	1d05      	adds	r5, r0, #4
 80a1a4c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1a52:	220a      	movs	r2, #10
 80a1a54:	4638      	mov	r0, r7
 80a1a56:	f000 f8a6 	bl	80a1ba6 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a5a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1a5c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1a5e:	d007      	beq.n	80a1a70 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1a60:	2c00      	cmp	r4, #0
 80a1a62:	d0f4      	beq.n	80a1a4e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1a64:	212e      	movs	r1, #46	; 0x2e
 80a1a66:	4638      	mov	r0, r7
 80a1a68:	f000 f870 	bl	80a1b4c <_ZN5Print5printEc>
 80a1a6c:	4404      	add	r4, r0
 80a1a6e:	e7ee      	b.n	80a1a4e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1a70:	4620      	mov	r0, r4
 80a1a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a74 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a1a74:	b510      	push	{r4, lr}
 80a1a76:	4604      	mov	r4, r0
 80a1a78:	4b04      	ldr	r3, [pc, #16]	; (80a1a8c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1a7a:	2211      	movs	r2, #17
 80a1a7c:	f840 3b04 	str.w	r3, [r0], #4
 80a1a80:	2100      	movs	r1, #0
 80a1a82:	f002 fae0 	bl	80a4046 <memset>
{
    clear();
}
 80a1a86:	4620      	mov	r0, r4
 80a1a88:	bd10      	pop	{r4, pc}
 80a1a8a:	bf00      	nop
 80a1a8c:	080a4384 	.word	0x080a4384

080a1a90 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1a90:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1a92:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1a96:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1a9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1a9e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1aa2:	2304      	movs	r3, #4
 80a1aa4:	6041      	str	r1, [r0, #4]
 80a1aa6:	7503      	strb	r3, [r0, #20]
 80a1aa8:	bd10      	pop	{r4, pc}
	...

080a1aac <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1aae:	4d04      	ldr	r5, [pc, #16]	; (80a1ac0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1ab0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1ab2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1ab6:	9500      	str	r5, [sp, #0]
 80a1ab8:	f7ff ffea 	bl	80a1a90 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1abc:	b003      	add	sp, #12
 80a1abe:	bd30      	pop	{r4, r5, pc}
 80a1ac0:	080a4384 	.word	0x080a4384

080a1ac4 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1ac6:	780d      	ldrb	r5, [r1, #0]
 80a1ac8:	788b      	ldrb	r3, [r1, #2]
 80a1aca:	784a      	ldrb	r2, [r1, #1]
 80a1acc:	78c9      	ldrb	r1, [r1, #3]
 80a1ace:	9100      	str	r1, [sp, #0]
 80a1ad0:	4629      	mov	r1, r5
 80a1ad2:	f7ff ffdd 	bl	80a1a90 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1ad6:	b003      	add	sp, #12
 80a1ad8:	bd30      	pop	{r4, r5, pc}
	...

080a1adc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a1adc:	b510      	push	{r4, lr}
 80a1ade:	4604      	mov	r4, r0
 80a1ae0:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <_ZN9IPAddressC1EPKh+0x10>)
 80a1ae2:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a1ae4:	f7ff ffee 	bl	80a1ac4 <_ZN9IPAddressaSEPKh>
}
 80a1ae8:	4620      	mov	r0, r4
 80a1aea:	bd10      	pop	{r4, pc}
 80a1aec:	080a4384 	.word	0x080a4384

080a1af0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1af0:	4a01      	ldr	r2, [pc, #4]	; (80a1af8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1af2:	4b02      	ldr	r3, [pc, #8]	; (80a1afc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1af4:	601a      	str	r2, [r3, #0]
 80a1af6:	4770      	bx	lr
 80a1af8:	080a444b 	.word	0x080a444b
 80a1afc:	20000400 	.word	0x20000400

080a1b00 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b02:	4606      	mov	r6, r0
 80a1b04:	460d      	mov	r5, r1
 80a1b06:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1b08:	2400      	movs	r4, #0
  while (size--) {
 80a1b0a:	42bd      	cmp	r5, r7
 80a1b0c:	d00c      	beq.n	80a1b28 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1b0e:	6833      	ldr	r3, [r6, #0]
 80a1b10:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1b14:	689b      	ldr	r3, [r3, #8]
 80a1b16:	4630      	mov	r0, r6
 80a1b18:	4798      	blx	r3
     if (chunk>=0)
 80a1b1a:	2800      	cmp	r0, #0
 80a1b1c:	db01      	blt.n	80a1b22 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1b1e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1b20:	e7f3      	b.n	80a1b0a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1b22:	2c00      	cmp	r4, #0
 80a1b24:	bf08      	it	eq
 80a1b26:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b2c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1b2c:	b570      	push	{r4, r5, r6, lr}
 80a1b2e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1b30:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1b32:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1b34:	b149      	cbz	r1, 80a1b4a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1b36:	f002 fae4 	bl	80a4102 <strlen>
 80a1b3a:	682b      	ldr	r3, [r5, #0]
 80a1b3c:	4602      	mov	r2, r0
 80a1b3e:	4621      	mov	r1, r4
 80a1b40:	4628      	mov	r0, r5
    }
 80a1b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1b46:	68db      	ldr	r3, [r3, #12]
 80a1b48:	4718      	bx	r3
    }
 80a1b4a:	bd70      	pop	{r4, r5, r6, pc}

080a1b4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1b4c:	6803      	ldr	r3, [r0, #0]
 80a1b4e:	689b      	ldr	r3, [r3, #8]
 80a1b50:	4718      	bx	r3

080a1b52 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1b52:	2a01      	cmp	r2, #1
 80a1b54:	bf98      	it	ls
 80a1b56:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1b58:	b530      	push	{r4, r5, lr}
 80a1b5a:	460b      	mov	r3, r1
 80a1b5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1b5e:	2100      	movs	r1, #0
 80a1b60:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1b64:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1b68:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1b6c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1b70:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b72:	2b09      	cmp	r3, #9
 80a1b74:	bf94      	ite	ls
 80a1b76:	3330      	addls	r3, #48	; 0x30
 80a1b78:	3337      	addhi	r3, #55	; 0x37
 80a1b7a:	b2db      	uxtb	r3, r3
 80a1b7c:	4621      	mov	r1, r4
 80a1b7e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1b82:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1b84:	2d00      	cmp	r5, #0
 80a1b86:	d1ef      	bne.n	80a1b68 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1b88:	f7ff ffd0 	bl	80a1b2c <_ZN5Print5writeEPKc>
}
 80a1b8c:	b00b      	add	sp, #44	; 0x2c
 80a1b8e:	bd30      	pop	{r4, r5, pc}

080a1b90 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1b90:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1b92:	b922      	cbnz	r2, 80a1b9e <_ZN5Print5printEmi+0xe>
 80a1b94:	6803      	ldr	r3, [r0, #0]
 80a1b96:	b2c9      	uxtb	r1, r1
 80a1b98:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1b9a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1b9c:	4718      	bx	r3
  else return printNumber(n, base);
 80a1b9e:	b2d2      	uxtb	r2, r2
}
 80a1ba0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1ba2:	f7ff bfd6 	b.w	80a1b52 <_ZN5Print11printNumberEmh>

080a1ba6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1ba6:	f7ff bff3 	b.w	80a1b90 <_ZN5Print5printEmi>

080a1baa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1baa:	b510      	push	{r4, lr}
 80a1bac:	4604      	mov	r4, r0
 80a1bae:	f7ff fc3e 	bl	80a142e <_ZNSt14_Function_baseD1Ev>
 80a1bb2:	4620      	mov	r0, r4
 80a1bb4:	bd10      	pop	{r4, pc}
	...

080a1bb8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1bb8:	4803      	ldr	r0, [pc, #12]	; (80a1bc8 <_GLOBAL__sub_I_RGB+0x10>)
 80a1bba:	2300      	movs	r3, #0
 80a1bbc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1bbe:	4a03      	ldr	r2, [pc, #12]	; (80a1bcc <_GLOBAL__sub_I_RGB+0x14>)
 80a1bc0:	4903      	ldr	r1, [pc, #12]	; (80a1bd0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1bc2:	f000 bfeb 	b.w	80a2b9c <__aeabi_atexit>
 80a1bc6:	bf00      	nop
 80a1bc8:	20000404 	.word	0x20000404
 80a1bcc:	20000370 	.word	0x20000370
 80a1bd0:	080a1bab 	.word	0x080a1bab

080a1bd4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1bd4:	4770      	bx	lr

080a1bd6 <_ZN8SPIClassD0Ev>:
 80a1bd6:	b510      	push	{r4, lr}
 80a1bd8:	4604      	mov	r4, r0
 80a1bda:	f7fe fa62 	bl	80a00a2 <_ZdlPv>
 80a1bde:	4620      	mov	r0, r4
 80a1be0:	bd10      	pop	{r4, pc}
	...

080a1be4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1be4:	b570      	push	{r4, r5, r6, lr}
 80a1be6:	4604      	mov	r4, r0
 80a1be8:	460e      	mov	r6, r1
 80a1bea:	4b07      	ldr	r3, [pc, #28]	; (80a1c08 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1bec:	2500      	movs	r5, #0
 80a1bee:	6003      	str	r3, [r0, #0]
 80a1bf0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1bf4:	f7ff f9d4 	bl	80a0fa0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1bf8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1bfa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1bfc:	f7ff fac2 	bl	80a1184 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1c00:	60a5      	str	r5, [r4, #8]
}
 80a1c02:	4620      	mov	r0, r4
 80a1c04:	bd70      	pop	{r4, r5, r6, pc}
 80a1c06:	bf00      	nop
 80a1c08:	080a447c 	.word	0x080a447c

080a1c0c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1c0c:	7900      	ldrb	r0, [r0, #4]
 80a1c0e:	f7ff bac1 	b.w	80a1194 <HAL_SPI_Is_Enabled>
	...

080a1c14 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a1c14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c18:	4680      	mov	r8, r0
 80a1c1a:	460d      	mov	r5, r1
 80a1c1c:	4617      	mov	r7, r2
 80a1c1e:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a1c20:	2200      	movs	r2, #0
 80a1c22:	2300      	movs	r3, #0
 80a1c24:	4640      	mov	r0, r8
 80a1c26:	4629      	mov	r1, r5
 80a1c28:	f001 fd32 	bl	80a3690 <__aeabi_dcmplt>
 80a1c2c:	b120      	cbz	r0, 80a1c38 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1c2e:	232d      	movs	r3, #45	; 0x2d
 80a1c30:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a1c32:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a1c36:	3601      	adds	r6, #1
 80a1c38:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a1c3a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1c3c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1c3e:	b2d9      	uxtb	r1, r3
 80a1c40:	428f      	cmp	r7, r1
 80a1c42:	d902      	bls.n	80a1c4a <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a1c44:	4354      	muls	r4, r2
 80a1c46:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1c48:	e7f9      	b.n	80a1c3e <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a1c4a:	4620      	mov	r0, r4
 80a1c4c:	f001 fa48 	bl	80a30e0 <__aeabi_i2d>
 80a1c50:	4642      	mov	r2, r8
 80a1c52:	462b      	mov	r3, r5
 80a1c54:	f001 faaa 	bl	80a31ac <__aeabi_dmul>
 80a1c58:	4682      	mov	sl, r0
 80a1c5a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a1c5c:	f002 f826 	bl	80a3cac <__aeabi_d2ulz>
 80a1c60:	4680      	mov	r8, r0
 80a1c62:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1c64:	f001 fa6c 	bl	80a3140 <__aeabi_ul2d>
 80a1c68:	4602      	mov	r2, r0
 80a1c6a:	460b      	mov	r3, r1
 80a1c6c:	4650      	mov	r0, sl
 80a1c6e:	4659      	mov	r1, fp
 80a1c70:	f001 f8e8 	bl	80a2e44 <__aeabi_dsub>
 80a1c74:	2200      	movs	r2, #0
 80a1c76:	4b17      	ldr	r3, [pc, #92]	; (80a1cd4 <_Z4dtoadhPc+0xc0>)
 80a1c78:	f001 fd1e 	bl	80a36b8 <__aeabi_dcmpge>
 80a1c7c:	b118      	cbz	r0, 80a1c86 <_Z4dtoadhPc+0x72>
        fixed++;
 80a1c7e:	f118 0801 	adds.w	r8, r8, #1
 80a1c82:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1c86:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1c88:	4622      	mov	r2, r4
 80a1c8a:	462b      	mov	r3, r5
 80a1c8c:	4640      	mov	r0, r8
 80a1c8e:	4649      	mov	r1, r9
 80a1c90:	f001 fff4 	bl	80a3c7c <__aeabi_uldivmod>
 80a1c94:	2301      	movs	r3, #1
 80a1c96:	220a      	movs	r2, #10
 80a1c98:	4631      	mov	r1, r6
 80a1c9a:	f000 fdaa 	bl	80a27f2 <ultoa>
    if (prec) {
 80a1c9e:	b1af      	cbz	r7, 80a1ccc <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a1ca0:	4630      	mov	r0, r6
 80a1ca2:	f002 fa2e 	bl	80a4102 <strlen>
        *sout++ = '.';
 80a1ca6:	232e      	movs	r3, #46	; 0x2e
 80a1ca8:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a1caa:	3001      	adds	r0, #1
 80a1cac:	4406      	add	r6, r0
 80a1cae:	4622      	mov	r2, r4
 80a1cb0:	462b      	mov	r3, r5
 80a1cb2:	4640      	mov	r0, r8
 80a1cb4:	4649      	mov	r1, r9
 80a1cb6:	f001 ffe1 	bl	80a3c7c <__aeabi_uldivmod>
 80a1cba:	463b      	mov	r3, r7
 80a1cbc:	4610      	mov	r0, r2
 80a1cbe:	4631      	mov	r1, r6
 80a1cc0:	220a      	movs	r2, #10
    }
}
 80a1cc2:	b001      	add	sp, #4
 80a1cc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a1cc8:	f000 bd93 	b.w	80a27f2 <ultoa>
    }
}
 80a1ccc:	b001      	add	sp, #4
 80a1cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1cd2:	bf00      	nop
 80a1cd4:	3fe00000 	.word	0x3fe00000

080a1cd8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1cd8:	b510      	push	{r4, lr}
 80a1cda:	4604      	mov	r4, r0
{
	free(buffer);
 80a1cdc:	6800      	ldr	r0, [r0, #0]
 80a1cde:	f7ff fb65 	bl	80a13ac <free>
}
 80a1ce2:	4620      	mov	r0, r4
 80a1ce4:	bd10      	pop	{r4, pc}

080a1ce6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ce6:	b510      	push	{r4, lr}
 80a1ce8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1cea:	6800      	ldr	r0, [r0, #0]
 80a1cec:	b108      	cbz	r0, 80a1cf2 <_ZN6String10invalidateEv+0xc>
 80a1cee:	f7ff fb5d 	bl	80a13ac <free>
	buffer = NULL;
 80a1cf2:	2300      	movs	r3, #0
 80a1cf4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1cf6:	60a3      	str	r3, [r4, #8]
 80a1cf8:	6063      	str	r3, [r4, #4]
 80a1cfa:	bd10      	pop	{r4, pc}

080a1cfc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1cfc:	b538      	push	{r3, r4, r5, lr}
 80a1cfe:	4604      	mov	r4, r0
 80a1d00:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1d02:	6800      	ldr	r0, [r0, #0]
 80a1d04:	3101      	adds	r1, #1
 80a1d06:	f7ff fb59 	bl	80a13bc <realloc>
	if (newbuffer) {
 80a1d0a:	b110      	cbz	r0, 80a1d12 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1d0c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1d10:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1d12:	bd38      	pop	{r3, r4, r5, pc}

080a1d14 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d14:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1d16:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1d18:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1d1a:	b113      	cbz	r3, 80a1d22 <_ZN6String7reserveEj+0xe>
 80a1d1c:	6843      	ldr	r3, [r0, #4]
 80a1d1e:	428b      	cmp	r3, r1
 80a1d20:	d207      	bcs.n	80a1d32 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	f7ff ffea 	bl	80a1cfc <_ZN6String12changeBufferEj>
 80a1d28:	b120      	cbz	r0, 80a1d34 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1d2a:	68a3      	ldr	r3, [r4, #8]
 80a1d2c:	b90b      	cbnz	r3, 80a1d32 <_ZN6String7reserveEj+0x1e>
 80a1d2e:	6822      	ldr	r2, [r4, #0]
 80a1d30:	7013      	strb	r3, [r2, #0]
 80a1d32:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1d34:	bd10      	pop	{r4, pc}

080a1d36 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d36:	b570      	push	{r4, r5, r6, lr}
 80a1d38:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1d3a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1d3c:	4604      	mov	r4, r0
 80a1d3e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1d40:	f7ff ffe8 	bl	80a1d14 <_ZN6String7reserveEj>
 80a1d44:	b918      	cbnz	r0, 80a1d4e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1d46:	4620      	mov	r0, r4
 80a1d48:	f7ff ffcd 	bl	80a1ce6 <_ZN6String10invalidateEv>
		return *this;
 80a1d4c:	e009      	b.n	80a1d62 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1d4e:	462a      	mov	r2, r5
 80a1d50:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1d52:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d54:	6820      	ldr	r0, [r4, #0]
 80a1d56:	f002 f96b 	bl	80a4030 <memcpy>
	buffer[len] = 0;
 80a1d5a:	6822      	ldr	r2, [r4, #0]
 80a1d5c:	68a3      	ldr	r3, [r4, #8]
 80a1d5e:	2100      	movs	r1, #0
 80a1d60:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1d62:	4620      	mov	r0, r4
 80a1d64:	bd70      	pop	{r4, r5, r6, pc}

080a1d66 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d66:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d68:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d6a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d6c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1d6e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d70:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d72:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1d74:	460d      	mov	r5, r1
 80a1d76:	b139      	cbz	r1, 80a1d88 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1d78:	4608      	mov	r0, r1
 80a1d7a:	f002 f9c2 	bl	80a4102 <strlen>
 80a1d7e:	4629      	mov	r1, r5
 80a1d80:	4602      	mov	r2, r0
 80a1d82:	4620      	mov	r0, r4
 80a1d84:	f7ff ffd7 	bl	80a1d36 <_ZN6String4copyEPKcj>
}
 80a1d88:	4620      	mov	r0, r4
 80a1d8a:	bd38      	pop	{r3, r4, r5, pc}

080a1d8c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d8c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1d8e:	b510      	push	{r4, lr}
 80a1d90:	460b      	mov	r3, r1
 80a1d92:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d94:	d007      	beq.n	80a1da6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d96:	6809      	ldr	r1, [r1, #0]
 80a1d98:	b119      	cbz	r1, 80a1da2 <_ZN6StringaSERKS_+0x16>
 80a1d9a:	689a      	ldr	r2, [r3, #8]
 80a1d9c:	f7ff ffcb 	bl	80a1d36 <_ZN6String4copyEPKcj>
 80a1da0:	e001      	b.n	80a1da6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1da2:	f7ff ffa0 	bl	80a1ce6 <_ZN6String10invalidateEv>

	return *this;
}
 80a1da6:	4620      	mov	r0, r4
 80a1da8:	bd10      	pop	{r4, pc}

080a1daa <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1daa:	b510      	push	{r4, lr}
 80a1dac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1dae:	2300      	movs	r3, #0
 80a1db0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1db2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1db4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1db6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1db8:	f7ff ffe8 	bl	80a1d8c <_ZN6StringaSERKS_>
}
 80a1dbc:	4620      	mov	r0, r4
 80a1dbe:	bd10      	pop	{r4, pc}

080a1dc0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1dc0:	b538      	push	{r3, r4, r5, lr}
 80a1dc2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1dc4:	460c      	mov	r4, r1
 80a1dc6:	b141      	cbz	r1, 80a1dda <_ZN6StringaSEPKc+0x1a>
 80a1dc8:	4608      	mov	r0, r1
 80a1dca:	f002 f99a 	bl	80a4102 <strlen>
 80a1dce:	4621      	mov	r1, r4
 80a1dd0:	4602      	mov	r2, r0
 80a1dd2:	4628      	mov	r0, r5
 80a1dd4:	f7ff ffaf 	bl	80a1d36 <_ZN6String4copyEPKcj>
 80a1dd8:	e001      	b.n	80a1dde <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1dda:	f7ff ff84 	bl	80a1ce6 <_ZN6String10invalidateEv>

	return *this;
}
 80a1dde:	4628      	mov	r0, r5
 80a1de0:	bd38      	pop	{r3, r4, r5, pc}

080a1de2 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a1de2:	b510      	push	{r4, lr}
 80a1de4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1de6:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a1de8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1dea:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1dec:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1dee:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1df0:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a1df2:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 80a1df4:	a901      	add	r1, sp, #4
 80a1df6:	f000 fcbe 	bl	80a2776 <ltoa>
	*this = buf;
 80a1dfa:	a901      	add	r1, sp, #4
 80a1dfc:	4620      	mov	r0, r4
 80a1dfe:	f7ff ffdf 	bl	80a1dc0 <_ZN6StringaSEPKc>
}
 80a1e02:	4620      	mov	r0, r4
 80a1e04:	b00a      	add	sp, #40	; 0x28
 80a1e06:	bd10      	pop	{r4, pc}

080a1e08 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1e08:	b530      	push	{r4, r5, lr}
 80a1e0a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1e0c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1e0e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1e10:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1e12:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1e14:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1e16:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a1e18:	b2d5      	uxtb	r5, r2
 80a1e1a:	4608      	mov	r0, r1
 80a1e1c:	f001 f972 	bl	80a3104 <__aeabi_f2d>
 80a1e20:	ab01      	add	r3, sp, #4
 80a1e22:	462a      	mov	r2, r5
 80a1e24:	f7ff fef6 	bl	80a1c14 <_Z4dtoadhPc>
        *this = buf;
 80a1e28:	a901      	add	r1, sp, #4
 80a1e2a:	4620      	mov	r0, r4
 80a1e2c:	f7ff ffc8 	bl	80a1dc0 <_ZN6StringaSEPKc>
}
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	b00b      	add	sp, #44	; 0x2c
 80a1e34:	bd30      	pop	{r4, r5, pc}

080a1e36 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1e36:	b570      	push	{r4, r5, r6, lr}
 80a1e38:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1e3a:	460e      	mov	r6, r1
 80a1e3c:	b909      	cbnz	r1, 80a1e42 <_ZN6String6concatEPKcj+0xc>
 80a1e3e:	2000      	movs	r0, #0
 80a1e40:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1e42:	b16a      	cbz	r2, 80a1e60 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1e44:	6883      	ldr	r3, [r0, #8]
 80a1e46:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a1e48:	4629      	mov	r1, r5
 80a1e4a:	f7ff ff63 	bl	80a1d14 <_ZN6String7reserveEj>
 80a1e4e:	2800      	cmp	r0, #0
 80a1e50:	d0f5      	beq.n	80a1e3e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1e52:	6820      	ldr	r0, [r4, #0]
 80a1e54:	68a3      	ldr	r3, [r4, #8]
 80a1e56:	4631      	mov	r1, r6
 80a1e58:	4418      	add	r0, r3
 80a1e5a:	f002 f92f 	bl	80a40bc <strcpy>
	len = newlen;
 80a1e5e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1e60:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1e62:	bd70      	pop	{r4, r5, r6, pc}

080a1e64 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1e64:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1e66:	688a      	ldr	r2, [r1, #8]
 80a1e68:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1e6a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1e6c:	f7ff ffe3 	bl	80a1e36 <_ZN6String6concatEPKcj>
 80a1e70:	b910      	cbnz	r0, 80a1e78 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1e72:	4620      	mov	r0, r4
 80a1e74:	f7ff ff37 	bl	80a1ce6 <_ZN6String10invalidateEv>
	return a;
}
 80a1e78:	4620      	mov	r0, r4
 80a1e7a:	bd10      	pop	{r4, pc}

080a1e7c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1e7c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1e7e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1e80:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1e82:	b912      	cbnz	r2, 80a1e8a <_ZNK6String6equalsEPKc+0xe>
 80a1e84:	b919      	cbnz	r1, 80a1e8e <_ZNK6String6equalsEPKc+0x12>
 80a1e86:	2001      	movs	r0, #1
 80a1e88:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1e8a:	b911      	cbnz	r1, 80a1e92 <_ZNK6String6equalsEPKc+0x16>
 80a1e8c:	6803      	ldr	r3, [r0, #0]
 80a1e8e:	7818      	ldrb	r0, [r3, #0]
 80a1e90:	e002      	b.n	80a1e98 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1e92:	6800      	ldr	r0, [r0, #0]
 80a1e94:	f002 f908 	bl	80a40a8 <strcmp>
 80a1e98:	fab0 f080 	clz	r0, r0
 80a1e9c:	0940      	lsrs	r0, r0, #5
}
 80a1e9e:	bd08      	pop	{r3, pc}

080a1ea0 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a1ea0:	b510      	push	{r4, lr}
 80a1ea2:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a1ea4:	6883      	ldr	r3, [r0, #8]
 80a1ea6:	688a      	ldr	r2, [r1, #8]
 80a1ea8:	1a9b      	subs	r3, r3, r2
 80a1eaa:	42a3      	cmp	r3, r4
 80a1eac:	d30a      	bcc.n	80a1ec4 <_ZNK6String10startsWithERKS_j+0x24>
 80a1eae:	6800      	ldr	r0, [r0, #0]
 80a1eb0:	b158      	cbz	r0, 80a1eca <_ZNK6String10startsWithERKS_j+0x2a>
 80a1eb2:	6809      	ldr	r1, [r1, #0]
 80a1eb4:	b141      	cbz	r1, 80a1ec8 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a1eb6:	4420      	add	r0, r4
 80a1eb8:	f002 f92b 	bl	80a4112 <strncmp>
 80a1ebc:	fab0 f080 	clz	r0, r0
 80a1ec0:	0940      	lsrs	r0, r0, #5
 80a1ec2:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a1ec4:	2000      	movs	r0, #0
 80a1ec6:	bd10      	pop	{r4, pc}
 80a1ec8:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 80a1eca:	bd10      	pop	{r4, pc}

080a1ecc <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 80a1ecc:	6882      	ldr	r2, [r0, #8]
 80a1ece:	688b      	ldr	r3, [r1, #8]
 80a1ed0:	429a      	cmp	r2, r3
 80a1ed2:	d302      	bcc.n	80a1eda <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a1ed4:	2200      	movs	r2, #0
 80a1ed6:	f7ff bfe3 	b.w	80a1ea0 <_ZNK6String10startsWithERKS_j>
}
 80a1eda:	2000      	movs	r0, #0
 80a1edc:	4770      	bx	lr

080a1ede <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a1ede:	6883      	ldr	r3, [r0, #8]
 80a1ee0:	428b      	cmp	r3, r1
 80a1ee2:	d903      	bls.n	80a1eec <_ZNK6StringixEj+0xe>
 80a1ee4:	6800      	ldr	r0, [r0, #0]
 80a1ee6:	b110      	cbz	r0, 80a1eee <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a1ee8:	5c40      	ldrb	r0, [r0, r1]
 80a1eea:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a1eec:	2000      	movs	r0, #0
	return buffer[index];
}
 80a1eee:	4770      	bx	lr

080a1ef0 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 80a1ef0:	f7ff bff5 	b.w	80a1ede <_ZNK6StringixEj>

080a1ef4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ef8:	461c      	mov	r4, r3
	if (left > right) {
 80a1efa:	429a      	cmp	r2, r3
 80a1efc:	bf88      	it	hi
 80a1efe:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1f00:	460e      	mov	r6, r1
 80a1f02:	4615      	mov	r5, r2
	if (left > right) {
 80a1f04:	bf88      	it	hi
 80a1f06:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1f08:	490d      	ldr	r1, [pc, #52]	; (80a1f40 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a1f0a:	bf88      	it	hi
 80a1f0c:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1f0e:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1f10:	f7ff ff29 	bl	80a1d66 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a1f14:	68b1      	ldr	r1, [r6, #8]
 80a1f16:	428d      	cmp	r5, r1
 80a1f18:	d80f      	bhi.n	80a1f3a <_ZNK6String9substringEjj+0x46>
 80a1f1a:	428c      	cmp	r4, r1
 80a1f1c:	bf28      	it	cs
 80a1f1e:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a1f20:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a1f22:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a1f24:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a1f28:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a1f2a:	6831      	ldr	r1, [r6, #0]
 80a1f2c:	4638      	mov	r0, r7
 80a1f2e:	4429      	add	r1, r5
 80a1f30:	f7ff ff46 	bl	80a1dc0 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a1f34:	6833      	ldr	r3, [r6, #0]
 80a1f36:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a1f3a:	4638      	mov	r0, r7
 80a1f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1f40:	080a43a6 	.word	0x080a43a6

080a1f44 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0
	return substring(left, len);
 80a1f48:	688b      	ldr	r3, [r1, #8]
 80a1f4a:	f7ff ffd3 	bl	80a1ef4 <_ZNK6String9substringEjj>
}
 80a1f4e:	4620      	mov	r0, r4
 80a1f50:	bd10      	pop	{r4, pc}

080a1f52 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1f52:	6800      	ldr	r0, [r0, #0]
 80a1f54:	b108      	cbz	r0, 80a1f5a <_ZNK6String5toIntEv+0x8>
 80a1f56:	f002 b845 	b.w	80a3fe4 <atol>
	return 0;
}
 80a1f5a:	4770      	bx	lr

080a1f5c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1f5c:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f62:	4c0d      	ldr	r4, [pc, #52]	; (80a1f98 <_GLOBAL__sub_I_System+0x3c>)
 80a1f64:	2500      	movs	r5, #0
 80a1f66:	8063      	strh	r3, [r4, #2]
 80a1f68:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1f6c:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1f6e:	80a3      	strh	r3, [r4, #4]
 80a1f70:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1f72:	f7ff f9a7 	bl	80a12c4 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1f76:	a802      	add	r0, sp, #8
 80a1f78:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1f7c:	462a      	mov	r2, r5
 80a1f7e:	4629      	mov	r1, r5
 80a1f80:	f7ff f816 	bl	80a0fb0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1f84:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1f86:	2b1e      	cmp	r3, #30
 80a1f88:	d104      	bne.n	80a1f94 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1f8a:	2303      	movs	r3, #3
 80a1f8c:	7023      	strb	r3, [r4, #0]
 80a1f8e:	2311      	movs	r3, #17
 80a1f90:	8065      	strh	r5, [r4, #2]
 80a1f92:	80a3      	strh	r3, [r4, #4]
 80a1f94:	b003      	add	sp, #12
 80a1f96:	bd30      	pop	{r4, r5, pc}
 80a1f98:	20000414 	.word	0x20000414

080a1f9c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1f9e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1fa0:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1fa2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1fa6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1fa8:	2201      	movs	r2, #1
 80a1faa:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1fae:	4621      	mov	r1, r4
 80a1fb0:	47a8      	blx	r5
}
 80a1fb2:	b003      	add	sp, #12
 80a1fb4:	bd30      	pop	{r4, r5, pc}

080a1fb6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1fb6:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1fb8:	6803      	ldr	r3, [r0, #0]
 80a1fba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1fbc:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1fc0:	46a4      	mov	ip, r4
}
 80a1fc2:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1fc4:	4760      	bx	ip

080a1fc6 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1fc8:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1fca:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1fcc:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1fd0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1fd2:	4621      	mov	r1, r4
 80a1fd4:	4613      	mov	r3, r2
 80a1fd6:	2201      	movs	r2, #1
 80a1fd8:	47a8      	blx	r5
}
 80a1fda:	b003      	add	sp, #12
 80a1fdc:	bd30      	pop	{r4, r5, pc}

080a1fde <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1fde:	4770      	bx	lr

080a1fe0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1fe0:	4770      	bx	lr

080a1fe2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1fe2:	2000      	movs	r0, #0
 80a1fe4:	4770      	bx	lr

080a1fe6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1fe6:	b510      	push	{r4, lr}
 80a1fe8:	4604      	mov	r4, r0
 80a1fea:	f7fe f85a 	bl	80a00a2 <_ZdlPv>
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	bd10      	pop	{r4, pc}

080a1ff2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1ff2:	f7fe b856 	b.w	80a00a2 <_ZdlPv>
	...

080a1ff8 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1ffc:	461f      	mov	r7, r3
    stop();
 80a1ffe:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2000:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2004:	4606      	mov	r6, r0
 80a2006:	460c      	mov	r4, r1
 80a2008:	4690      	mov	r8, r2
    stop();
 80a200a:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a200c:	4b13      	ldr	r3, [pc, #76]	; (80a205c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a200e:	6818      	ldr	r0, [r3, #0]
 80a2010:	6803      	ldr	r3, [r0, #0]
 80a2012:	681b      	ldr	r3, [r3, #0]
 80a2014:	4798      	blx	r3
 80a2016:	b1f0      	cbz	r0, 80a2056 <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a2018:	a802      	add	r0, sp, #8
 80a201a:	f7ff fd2b 	bl	80a1a74 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a201e:	4620      	mov	r0, r4
 80a2020:	f002 f86f 	bl	80a4102 <strlen>
 80a2024:	2300      	movs	r3, #0
 80a2026:	9300      	str	r3, [sp, #0]
 80a2028:	b281      	uxth	r1, r0
 80a202a:	463b      	mov	r3, r7
 80a202c:	aa03      	add	r2, sp, #12
 80a202e:	4620      	mov	r0, r4
 80a2030:	f7ff f930 	bl	80a1294 <inet_gethostbyname>
 80a2034:	b978      	cbnz	r0, 80a2056 <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a2036:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2038:	ad09      	add	r5, sp, #36	; 0x24
 80a203a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a203e:	4b08      	ldr	r3, [pc, #32]	; (80a2060 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a2040:	ac03      	add	r4, sp, #12
 80a2042:	9308      	str	r3, [sp, #32]
 80a2044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2048:	6823      	ldr	r3, [r4, #0]
 80a204a:	4642      	mov	r2, r8
 80a204c:	702b      	strb	r3, [r5, #0]
 80a204e:	a908      	add	r1, sp, #32
 80a2050:	463b      	mov	r3, r7
 80a2052:	4630      	mov	r0, r6
 80a2054:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a2056:	b00f      	add	sp, #60	; 0x3c
 80a2058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a205c:	080a459c 	.word	0x080a459c
 80a2060:	080a4384 	.word	0x080a4384

080a2064 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2064:	b510      	push	{r4, lr}
 80a2066:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a2068:	6803      	ldr	r3, [r0, #0]
 80a206a:	689b      	ldr	r3, [r3, #8]
 80a206c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a206e:	68a3      	ldr	r3, [r4, #8]
 80a2070:	3b01      	subs	r3, #1
 80a2072:	60a3      	str	r3, [r4, #8]
 80a2074:	b92b      	cbnz	r3, 80a2082 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a2076:	6823      	ldr	r3, [r4, #0]
 80a2078:	4620      	mov	r0, r4
        }
    }
 80a207a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a207e:	68db      	ldr	r3, [r3, #12]
 80a2080:	4718      	bx	r3
 80a2082:	bd10      	pop	{r4, pc}

080a2084 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2084:	b570      	push	{r4, r5, r6, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	4606      	mov	r6, r0
 80a208a:	694d      	ldr	r5, [r1, #20]
 80a208c:	4b04      	ldr	r3, [pc, #16]	; (80a20a0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a208e:	358c      	adds	r5, #140	; 0x8c
 80a2090:	f844 3b04 	str.w	r3, [r4], #4
 80a2094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2098:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a209a:	4630      	mov	r0, r6
 80a209c:	7023      	strb	r3, [r4, #0]
 80a209e:	bd70      	pop	{r4, r5, r6, pc}
 80a20a0:	080a4384 	.word	0x080a4384

080a20a4 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a20a4:	b510      	push	{r4, lr}
 80a20a6:	6943      	ldr	r3, [r0, #20]
 80a20a8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a20aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a20ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a20b2:	429a      	cmp	r2, r3
 80a20b4:	d005      	beq.n	80a20c2 <_ZN9TCPClient4peekEv+0x1e>
 80a20b6:	6962      	ldr	r2, [r4, #20]
 80a20b8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a20bc:	4413      	add	r3, r2
 80a20be:	7918      	ldrb	r0, [r3, #4]
 80a20c0:	bd10      	pop	{r4, pc}
 80a20c2:	6803      	ldr	r3, [r0, #0]
 80a20c4:	691b      	ldr	r3, [r3, #16]
 80a20c6:	4798      	blx	r3
 80a20c8:	2800      	cmp	r0, #0
 80a20ca:	d1f4      	bne.n	80a20b6 <_ZN9TCPClient4peekEv+0x12>
 80a20cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a20d0:	bd10      	pop	{r4, pc}

080a20d2 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a20d2:	b510      	push	{r4, lr}
 80a20d4:	6943      	ldr	r3, [r0, #20]
 80a20d6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a20d8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a20dc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a20e0:	429a      	cmp	r2, r3
 80a20e2:	d008      	beq.n	80a20f6 <_ZN9TCPClient4readEv+0x24>
 80a20e4:	6962      	ldr	r2, [r4, #20]
 80a20e6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a20ea:	1c59      	adds	r1, r3, #1
 80a20ec:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a20f0:	4413      	add	r3, r2
 80a20f2:	7918      	ldrb	r0, [r3, #4]
 80a20f4:	bd10      	pop	{r4, pc}
 80a20f6:	6803      	ldr	r3, [r0, #0]
 80a20f8:	691b      	ldr	r3, [r3, #16]
 80a20fa:	4798      	blx	r3
 80a20fc:	2800      	cmp	r0, #0
 80a20fe:	d1f1      	bne.n	80a20e4 <_ZN9TCPClient4readEv+0x12>
 80a2100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2104:	bd10      	pop	{r4, pc}

080a2106 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a2106:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a2108:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a210a:	6820      	ldr	r0, [r4, #0]
 80a210c:	f7ff f802 	bl	80a1114 <socket_handle_valid>
 80a2110:	b110      	cbz	r0, 80a2118 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a2112:	6820      	ldr	r0, [r4, #0]
 80a2114:	f7ff f81e 	bl	80a1154 <socket_close>
 80a2118:	4620      	mov	r0, r4
 80a211a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a211e:	f7fd bfc0 	b.w	80a00a2 <_ZdlPv>

080a2122 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2124:	6943      	ldr	r3, [r0, #20]
 80a2126:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a2128:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a212c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2130:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a2132:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2134:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a2136:	d106      	bne.n	80a2146 <_ZN9TCPClient4readEPhj+0x24>
 80a2138:	6803      	ldr	r3, [r0, #0]
 80a213a:	691b      	ldr	r3, [r3, #16]
 80a213c:	4798      	blx	r3
 80a213e:	b910      	cbnz	r0, 80a2146 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a2140:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a2144:	e014      	b.n	80a2170 <_ZN9TCPClient4readEPhj+0x4e>
 80a2146:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2148:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a214a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a214e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2152:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2154:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a2156:	42bc      	cmp	r4, r7
 80a2158:	bf28      	it	cs
 80a215a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a215c:	3104      	adds	r1, #4
 80a215e:	4622      	mov	r2, r4
 80a2160:	f001 ff66 	bl	80a4030 <memcpy>
 80a2164:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a2166:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a216a:	4423      	add	r3, r4
 80a216c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a2170:	4620      	mov	r0, r4
 80a2172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2174 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a2174:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a2176:	2300      	movs	r3, #0
 80a2178:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a217c:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a217e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a2182:	4770      	bx	lr

080a2184 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a2184:	b538      	push	{r3, r4, r5, lr}
 80a2186:	6942      	ldr	r2, [r0, #20]
 80a2188:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a218a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a218e:	b11b      	cbz	r3, 80a2198 <_ZN9TCPClient9availableEv+0x14>
 80a2190:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2194:	429a      	cmp	r2, r3
 80a2196:	d00b      	beq.n	80a21b0 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a2198:	4b18      	ldr	r3, [pc, #96]	; (80a21fc <_ZN9TCPClient9availableEv+0x78>)
 80a219a:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a219c:	6803      	ldr	r3, [r0, #0]
 80a219e:	681b      	ldr	r3, [r3, #0]
 80a21a0:	4798      	blx	r3
 80a21a2:	b318      	cbz	r0, 80a21ec <_ZN9TCPClient9availableEv+0x68>
 80a21a4:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a21a6:	6818      	ldr	r0, [r3, #0]
 80a21a8:	f7fe ffb4 	bl	80a1114 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a21ac:	b918      	cbnz	r0, 80a21b6 <_ZN9TCPClient9availableEv+0x32>
 80a21ae:	e01d      	b.n	80a21ec <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a21b0:	f7ff ffe0 	bl	80a2174 <_ZN9TCPClient12flush_bufferEv>
 80a21b4:	e7f0      	b.n	80a2198 <_ZN9TCPClient9availableEv+0x14>
 80a21b6:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a21b8:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a21bc:	297f      	cmp	r1, #127	; 0x7f
 80a21be:	d815      	bhi.n	80a21ec <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a21c0:	1d05      	adds	r5, r0, #4
 80a21c2:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a21c6:	2300      	movs	r3, #0
 80a21c8:	4429      	add	r1, r5
 80a21ca:	6800      	ldr	r0, [r0, #0]
 80a21cc:	f7fe ffba 	bl	80a1144 <socket_receive>
            if (ret > 0)
 80a21d0:	2800      	cmp	r0, #0
 80a21d2:	dd0b      	ble.n	80a21ec <_ZN9TCPClient9availableEv+0x68>
 80a21d4:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a21d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a21da:	b90a      	cbnz	r2, 80a21e0 <_ZN9TCPClient9availableEv+0x5c>
 80a21dc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a21e0:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a21e2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a21e6:	4418      	add	r0, r3
 80a21e8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a21ec:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a21ee:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a21f2:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a21f6:	1a18      	subs	r0, r3, r0
}
 80a21f8:	bd38      	pop	{r3, r4, r5, pc}
 80a21fa:	bf00      	nop
 80a21fc:	080a459c 	.word	0x080a459c

080a2200 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2200:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2202:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2204:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2206:	6818      	ldr	r0, [r3, #0]
 80a2208:	f7fe ff84 	bl	80a1114 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a220c:	b118      	cbz	r0, 80a2216 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a220e:	6963      	ldr	r3, [r4, #20]
 80a2210:	6818      	ldr	r0, [r3, #0]
 80a2212:	f7fe ff9f 	bl	80a1154 <socket_close>
 80a2216:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2218:	f7fe ffa4 	bl	80a1164 <socket_handle_invalid>
 80a221c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a221e:	6960      	ldr	r0, [r4, #20]
 80a2220:	2211      	movs	r2, #17
 80a2222:	2100      	movs	r1, #0
 80a2224:	308c      	adds	r0, #140	; 0x8c
 80a2226:	f001 ff0e 	bl	80a4046 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a222a:	4620      	mov	r0, r4
}
 80a222c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2230:	f7ff bfa0 	b.w	80a2174 <_ZN9TCPClient12flush_bufferEv>

080a2234 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a223a:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a223c:	4b17      	ldr	r3, [pc, #92]	; (80a229c <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a223e:	2600      	movs	r6, #0
 80a2240:	6046      	str	r6, [r0, #4]
 80a2242:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a2244:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2246:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2248:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a224a:	20a0      	movs	r0, #160	; 0xa0
 80a224c:	460f      	mov	r7, r1
 80a224e:	f7fd ff24 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a2252:	4605      	mov	r5, r0
 80a2254:	b138      	cbz	r0, 80a2266 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a2256:	6007      	str	r7, [r0, #0]
 80a2258:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a225c:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a2260:	3088      	adds	r0, #136	; 0x88
 80a2262:	f7ff fc07 	bl	80a1a74 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2266:	2014      	movs	r0, #20
 80a2268:	f7fd ff17 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a226c:	4603      	mov	r3, r0
 80a226e:	b128      	cbz	r0, 80a227c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2270:	2201      	movs	r2, #1
 80a2272:	6042      	str	r2, [r0, #4]
 80a2274:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2276:	4a0a      	ldr	r2, [pc, #40]	; (80a22a0 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a2278:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a227a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a227c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a227e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2280:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2282:	b128      	cbz	r0, 80a2290 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2284:	6843      	ldr	r3, [r0, #4]
 80a2286:	3b01      	subs	r3, #1
 80a2288:	6043      	str	r3, [r0, #4]
 80a228a:	b90b      	cbnz	r3, 80a2290 <_ZN9TCPClientC1Em+0x5c>
 80a228c:	f7ff feea 	bl	80a2064 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2290:	4620      	mov	r0, r4
 80a2292:	f7ff ff6f 	bl	80a2174 <_ZN9TCPClient12flush_bufferEv>
}
 80a2296:	4620      	mov	r0, r4
 80a2298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a229a:	bf00      	nop
 80a229c:	080a44a8 	.word	0x080a44a8
 80a22a0:	080a448c 	.word	0x080a448c

080a22a4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a22a4:	b510      	push	{r4, lr}
 80a22a6:	4604      	mov	r4, r0
 80a22a8:	f7fe ff5c 	bl	80a1164 <socket_handle_invalid>
 80a22ac:	4601      	mov	r1, r0
 80a22ae:	4620      	mov	r0, r4
 80a22b0:	f7ff ffc0 	bl	80a2234 <_ZN9TCPClientC1Em>
{
}
 80a22b4:	4620      	mov	r0, r4
 80a22b6:	bd10      	pop	{r4, pc}

080a22b8 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a22b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a22bc:	4698      	mov	r8, r3
    stop();
 80a22be:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a22c0:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a22c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a22c4:	4606      	mov	r6, r0
 80a22c6:	460c      	mov	r4, r1
 80a22c8:	4615      	mov	r5, r2
    stop();
 80a22ca:	4798      	blx	r3
 80a22cc:	4b2f      	ldr	r3, [pc, #188]	; (80a238c <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a22ce:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a22d0:	6803      	ldr	r3, [r0, #0]
 80a22d2:	681b      	ldr	r3, [r3, #0]
 80a22d4:	4798      	blx	r3
 80a22d6:	2800      	cmp	r0, #0
 80a22d8:	d055      	beq.n	80a2386 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a22da:	462b      	mov	r3, r5
 80a22dc:	2206      	movs	r2, #6
 80a22de:	2101      	movs	r1, #1
 80a22e0:	f8cd 8000 	str.w	r8, [sp]
 80a22e4:	2002      	movs	r0, #2
 80a22e6:	6977      	ldr	r7, [r6, #20]
 80a22e8:	f7fe ff1c 	bl	80a1124 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a22ec:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a22ee:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a22f0:	9302      	str	r3, [sp, #8]
 80a22f2:	2700      	movs	r7, #0
 80a22f4:	6973      	ldr	r3, [r6, #20]
 80a22f6:	9703      	str	r7, [sp, #12]
 80a22f8:	681b      	ldr	r3, [r3, #0]
 80a22fa:	2001      	movs	r0, #1
 80a22fc:	9301      	str	r3, [sp, #4]
 80a22fe:	4b24      	ldr	r3, [pc, #144]	; (80a2390 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a2300:	aa02      	add	r2, sp, #8
 80a2302:	9300      	str	r3, [sp, #0]
 80a2304:	4923      	ldr	r1, [pc, #140]	; (80a2394 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a2306:	463b      	mov	r3, r7
 80a2308:	f7fe ffcc 	bl	80a12a4 <log_message>

          if (socket_handle_valid(d_->sock))
 80a230c:	6973      	ldr	r3, [r6, #20]
 80a230e:	6818      	ldr	r0, [r3, #0]
 80a2310:	f7fe ff00 	bl	80a1114 <socket_handle_valid>
 80a2314:	2800      	cmp	r0, #0
 80a2316:	d036      	beq.n	80a2386 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a2318:	4630      	mov	r0, r6
 80a231a:	f7ff ff2b 	bl	80a2174 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a231e:	2302      	movs	r3, #2
 80a2320:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2324:	0a2b      	lsrs	r3, r5, #8
 80a2326:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a232a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a232c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2330:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a2334:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a2336:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a233a:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a233e:	7963      	ldrb	r3, [r4, #5]
 80a2340:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2344:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2348:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a234c:	f7fe ff9a 	bl	80a1284 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2350:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2352:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2354:	2210      	movs	r2, #16
 80a2356:	a902      	add	r1, sp, #8
 80a2358:	6818      	ldr	r0, [r3, #0]
 80a235a:	f7fe feeb 	bl	80a1134 <socket_connect>
 80a235e:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2360:	4628      	mov	r0, r5
 80a2362:	f7fe ff8f 	bl	80a1284 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2368:	6975      	ldr	r5, [r6, #20]
 80a236a:	358c      	adds	r5, #140	; 0x8c
 80a236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a236e:	6823      	ldr	r3, [r4, #0]
 80a2370:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2372:	f1b8 0f00 	cmp.w	r8, #0
 80a2376:	d005      	beq.n	80a2384 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a2378:	6833      	ldr	r3, [r6, #0]
 80a237a:	4630      	mov	r0, r6
 80a237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a237e:	4798      	blx	r3
 80a2380:	4638      	mov	r0, r7
 80a2382:	e000      	b.n	80a2386 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2384:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a2386:	b00a      	add	sp, #40	; 0x28
 80a2388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a238c:	080a459c 	.word	0x080a459c
 80a2390:	080a44f3 	.word	0x080a44f3
 80a2394:	080a44ec 	.word	0x080a44ec

080a2398 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2398:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a239a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a239c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a239e:	6818      	ldr	r0, [r3, #0]
 80a23a0:	f7fe feb8 	bl	80a1114 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a23a4:	b908      	cbnz	r0, 80a23aa <_ZN9TCPClient6statusEv+0x12>
 80a23a6:	2000      	movs	r0, #0
 80a23a8:	bd10      	pop	{r4, pc}
 80a23aa:	4b07      	ldr	r3, [pc, #28]	; (80a23c8 <_ZN9TCPClient6statusEv+0x30>)
 80a23ac:	6818      	ldr	r0, [r3, #0]
 80a23ae:	6803      	ldr	r3, [r0, #0]
 80a23b0:	681b      	ldr	r3, [r3, #0]
 80a23b2:	4798      	blx	r3
 80a23b4:	2800      	cmp	r0, #0
 80a23b6:	d0f6      	beq.n	80a23a6 <_ZN9TCPClient6statusEv+0xe>
 80a23b8:	6963      	ldr	r3, [r4, #20]
 80a23ba:	6818      	ldr	r0, [r3, #0]
 80a23bc:	f7fe fea2 	bl	80a1104 <socket_active_status>
 80a23c0:	fab0 f080 	clz	r0, r0
 80a23c4:	0940      	lsrs	r0, r0, #5
}
 80a23c6:	bd10      	pop	{r4, pc}
 80a23c8:	080a459c 	.word	0x080a459c

080a23cc <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a23cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a23d0:	2500      	movs	r5, #0
 80a23d2:	6045      	str	r5, [r0, #4]
 80a23d4:	4604      	mov	r4, r0
 80a23d6:	460e      	mov	r6, r1
 80a23d8:	4617      	mov	r7, r2
 80a23da:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a23dc:	f7ff ffdc 	bl	80a2398 <_ZN9TCPClient6statusEv>
 80a23e0:	b160      	cbz	r0, 80a23fc <_ZN9TCPClient5writeEPKhjm+0x30>
 80a23e2:	6960      	ldr	r0, [r4, #20]
 80a23e4:	9501      	str	r5, [sp, #4]
 80a23e6:	f8cd 8000 	str.w	r8, [sp]
 80a23ea:	462b      	mov	r3, r5
 80a23ec:	463a      	mov	r2, r7
 80a23ee:	4631      	mov	r1, r6
 80a23f0:	6800      	ldr	r0, [r0, #0]
 80a23f2:	f7fe febf 	bl	80a1174 <socket_send_ex>
    if (ret < 0) {
 80a23f6:	2800      	cmp	r0, #0
 80a23f8:	da03      	bge.n	80a2402 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a23fa:	e001      	b.n	80a2400 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a23fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2400:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a2402:	b002      	add	sp, #8
 80a2404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2408 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a2408:	b538      	push	{r3, r4, r5, lr}
 80a240a:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a240c:	f7ff ffc4 	bl	80a2398 <_ZN9TCPClient6statusEv>
 80a2410:	bb00      	cbnz	r0, 80a2454 <_ZN9TCPClient9connectedEv+0x4c>
 80a2412:	6963      	ldr	r3, [r4, #20]
 80a2414:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2418:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a241c:	4291      	cmp	r1, r2
 80a241e:	d119      	bne.n	80a2454 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2420:	6818      	ldr	r0, [r3, #0]
 80a2422:	f7fe fe77 	bl	80a1114 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2426:	b128      	cbz	r0, 80a2434 <_ZN9TCPClient9connectedEv+0x2c>
 80a2428:	6963      	ldr	r3, [r4, #20]
 80a242a:	6818      	ldr	r0, [r3, #0]
 80a242c:	f7fe fe6a 	bl	80a1104 <socket_active_status>
 80a2430:	2801      	cmp	r0, #1
 80a2432:	d001      	beq.n	80a2438 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a2434:	2500      	movs	r5, #0
 80a2436:	e00e      	b.n	80a2456 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a2438:	6823      	ldr	r3, [r4, #0]
 80a243a:	4620      	mov	r0, r4
 80a243c:	691b      	ldr	r3, [r3, #16]
 80a243e:	4798      	blx	r3
 80a2440:	2800      	cmp	r0, #0
 80a2442:	bf14      	ite	ne
 80a2444:	2501      	movne	r5, #1
 80a2446:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2448:	d105      	bne.n	80a2456 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a244a:	6823      	ldr	r3, [r4, #0]
 80a244c:	4620      	mov	r0, r4
 80a244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2450:	4798      	blx	r3
 80a2452:	e000      	b.n	80a2456 <_ZN9TCPClient9connectedEv+0x4e>
 80a2454:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2456:	4628      	mov	r0, r5
 80a2458:	bd38      	pop	{r3, r4, r5, pc}

080a245a <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a245a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a245c:	f7ff ff9c 	bl	80a2398 <_ZN9TCPClient6statusEv>
}
 80a2460:	3000      	adds	r0, #0
 80a2462:	bf18      	it	ne
 80a2464:	2001      	movne	r0, #1
 80a2466:	bd08      	pop	{r3, pc}

080a2468 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a2468:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a246a:	2000      	movs	r0, #0
 80a246c:	f7fe ff7e 	bl	80a136c <spark_sync_time_pending>
 80a2470:	b128      	cbz	r0, 80a247e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2472:	f7fe ff6b 	bl	80a134c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2476:	f080 0001 	eor.w	r0, r0, #1
 80a247a:	b2c0      	uxtb	r0, r0
 80a247c:	bd08      	pop	{r3, pc}
 80a247e:	2001      	movs	r0, #1
    }
 80a2480:	bd08      	pop	{r3, pc}

080a2482 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2482:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2484:	2000      	movs	r0, #0
 80a2486:	f7fe fdb3 	bl	80a0ff0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a248a:	4604      	mov	r4, r0
 80a248c:	b968      	cbnz	r0, 80a24aa <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a248e:	f7fe ff11 	bl	80a12b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2492:	2801      	cmp	r0, #1
 80a2494:	d10b      	bne.n	80a24ae <_ZN9TimeClass7isValidEv+0x2c>
 80a2496:	4620      	mov	r0, r4
 80a2498:	f7fe ff2c 	bl	80a12f4 <system_thread_get_state>
 80a249c:	b938      	cbnz	r0, 80a24ae <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a249e:	f7ff ffe3 	bl	80a2468 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a24a2:	b930      	cbnz	r0, 80a24b2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a24a4:	f7fe ff4a 	bl	80a133c <spark_process>
 80a24a8:	e7f9      	b.n	80a249e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a24aa:	2001      	movs	r0, #1
 80a24ac:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a24ae:	2000      	movs	r0, #0
 80a24b0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a24b2:	f7ff ffd9 	bl	80a2468 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a24b6:	2000      	movs	r0, #0
 80a24b8:	f7fe fd9a 	bl	80a0ff0 <HAL_RTC_Time_Is_Valid>
 80a24bc:	3000      	adds	r0, #0
 80a24be:	bf18      	it	ne
 80a24c0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a24c2:	bd10      	pop	{r4, pc}

080a24c4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a24c4:	b508      	push	{r3, lr}
    (void)isValid();
 80a24c6:	f7ff ffdc 	bl	80a2482 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a24ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a24ce:	f7fe bd87 	b.w	80a0fe0 <HAL_RTC_Get_UnixTime>
	...

080a24d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a24d4:	4b02      	ldr	r3, [pc, #8]	; (80a24e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a24d6:	681a      	ldr	r2, [r3, #0]
 80a24d8:	4b02      	ldr	r3, [pc, #8]	; (80a24e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a24da:	601a      	str	r2, [r3, #0]
 80a24dc:	4770      	bx	lr
 80a24de:	bf00      	nop
 80a24e0:	20000304 	.word	0x20000304
 80a24e4:	2000041c 	.word	0x2000041c

080a24e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a24e8:	4770      	bx	lr

080a24ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24ea:	7441      	strb	r1, [r0, #17]
 80a24ec:	4770      	bx	lr

080a24ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a24ee:	7c00      	ldrb	r0, [r0, #16]
 80a24f0:	f7fe be90 	b.w	80a1214 <HAL_USART_Available_Data_For_Write>

080a24f4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a24f4:	7c00      	ldrb	r0, [r0, #16]
 80a24f6:	f7fe be65 	b.w	80a11c4 <HAL_USART_Available_Data>

080a24fa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a24fa:	7c00      	ldrb	r0, [r0, #16]
 80a24fc:	f7fe be72 	b.w	80a11e4 <HAL_USART_Peek_Data>

080a2500 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2500:	7c00      	ldrb	r0, [r0, #16]
 80a2502:	f7fe be67 	b.w	80a11d4 <HAL_USART_Read_Data>

080a2506 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2506:	7c00      	ldrb	r0, [r0, #16]
 80a2508:	f7fe be74 	b.w	80a11f4 <HAL_USART_Flush_Data>

080a250c <_ZN11USARTSerialD0Ev>:
 80a250c:	b510      	push	{r4, lr}
 80a250e:	4604      	mov	r4, r0
 80a2510:	f7fd fdc7 	bl	80a00a2 <_ZdlPv>
 80a2514:	4620      	mov	r0, r4
 80a2516:	bd10      	pop	{r4, pc}

080a2518 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2518:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a251a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a251c:	4604      	mov	r4, r0
 80a251e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2520:	b925      	cbnz	r5, 80a252c <_ZN11USARTSerial5writeEh+0x14>
 80a2522:	7c00      	ldrb	r0, [r0, #16]
 80a2524:	f7fe fe76 	bl	80a1214 <HAL_USART_Available_Data_For_Write>
 80a2528:	2800      	cmp	r0, #0
 80a252a:	dd05      	ble.n	80a2538 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a252c:	4631      	mov	r1, r6
 80a252e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2534:	f7fe be3e 	b.w	80a11b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2538:	4628      	mov	r0, r5
 80a253a:	bd70      	pop	{r4, r5, r6, pc}

080a253c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a253c:	b510      	push	{r4, lr}
 80a253e:	4604      	mov	r4, r0
 80a2540:	4608      	mov	r0, r1
 80a2542:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2544:	2200      	movs	r2, #0
 80a2546:	6062      	str	r2, [r4, #4]
 80a2548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a254c:	60a2      	str	r2, [r4, #8]
 80a254e:	4a05      	ldr	r2, [pc, #20]	; (80a2564 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2550:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2552:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2554:	2201      	movs	r2, #1
 80a2556:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2558:	461a      	mov	r2, r3
 80a255a:	f7fe fe23 	bl	80a11a4 <HAL_USART_Init>
}
 80a255e:	4620      	mov	r0, r4
 80a2560:	bd10      	pop	{r4, pc}
 80a2562:	bf00      	nop
 80a2564:	080a4538 	.word	0x080a4538

080a2568 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2568:	7c00      	ldrb	r0, [r0, #16]
 80a256a:	f7fe be4b 	b.w	80a1204 <HAL_USART_Is_Enabled>
	...

080a2570 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2570:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2572:	4d0c      	ldr	r5, [pc, #48]	; (80a25a4 <_Z22__fetch_global_Serial1v+0x34>)
 80a2574:	6829      	ldr	r1, [r5, #0]
 80a2576:	f011 0401 	ands.w	r4, r1, #1
 80a257a:	d111      	bne.n	80a25a0 <_Z22__fetch_global_Serial1v+0x30>
 80a257c:	4628      	mov	r0, r5
 80a257e:	f7fd fd94 	bl	80a00aa <__cxa_guard_acquire>
 80a2582:	b168      	cbz	r0, 80a25a0 <_Z22__fetch_global_Serial1v+0x30>
 80a2584:	4a08      	ldr	r2, [pc, #32]	; (80a25a8 <_Z22__fetch_global_Serial1v+0x38>)
 80a2586:	4621      	mov	r1, r4
 80a2588:	4b08      	ldr	r3, [pc, #32]	; (80a25ac <_Z22__fetch_global_Serial1v+0x3c>)
 80a258a:	4809      	ldr	r0, [pc, #36]	; (80a25b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a258c:	f7ff ffd6 	bl	80a253c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2590:	4628      	mov	r0, r5
 80a2592:	f7fd fd8f 	bl	80a00b4 <__cxa_guard_release>
 80a2596:	4a07      	ldr	r2, [pc, #28]	; (80a25b4 <_Z22__fetch_global_Serial1v+0x44>)
 80a2598:	4907      	ldr	r1, [pc, #28]	; (80a25b8 <_Z22__fetch_global_Serial1v+0x48>)
 80a259a:	4805      	ldr	r0, [pc, #20]	; (80a25b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a259c:	f000 fafe 	bl	80a2b9c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a25a0:	4803      	ldr	r0, [pc, #12]	; (80a25b0 <_Z22__fetch_global_Serial1v+0x40>)
 80a25a2:	bd38      	pop	{r3, r4, r5, pc}
 80a25a4:	200004b8 	.word	0x200004b8
 80a25a8:	200004bc 	.word	0x200004bc
 80a25ac:	20000434 	.word	0x20000434
 80a25b0:	20000420 	.word	0x20000420
 80a25b4:	20000370 	.word	0x20000370
 80a25b8:	080a24e9 	.word	0x080a24e9

080a25bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25bc:	7441      	strb	r1, [r0, #17]
 80a25be:	4770      	bx	lr

080a25c0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a25c0:	4770      	bx	lr

080a25c2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a25c2:	2100      	movs	r1, #0
 80a25c4:	7c00      	ldrb	r0, [r0, #16]
 80a25c6:	f7fe be45 	b.w	80a1254 <HAL_USB_USART_Receive_Data>

080a25ca <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a25ca:	2101      	movs	r1, #1
 80a25cc:	7c00      	ldrb	r0, [r0, #16]
 80a25ce:	f7fe be41 	b.w	80a1254 <HAL_USB_USART_Receive_Data>

080a25d2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a25d2:	7c00      	ldrb	r0, [r0, #16]
 80a25d4:	f7fe be36 	b.w	80a1244 <HAL_USB_USART_Available_Data_For_Write>

080a25d8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a25d8:	7c00      	ldrb	r0, [r0, #16]
 80a25da:	f7fe be2b 	b.w	80a1234 <HAL_USB_USART_Available_Data>

080a25de <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a25de:	b538      	push	{r3, r4, r5, lr}
 80a25e0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25e2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a25e4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25e6:	f7fe fe2d 	bl	80a1244 <HAL_USB_USART_Available_Data_For_Write>
 80a25ea:	2800      	cmp	r0, #0
 80a25ec:	dc01      	bgt.n	80a25f2 <_ZN9USBSerial5writeEh+0x14>
 80a25ee:	7c60      	ldrb	r0, [r4, #17]
 80a25f0:	b120      	cbz	r0, 80a25fc <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a25f2:	4629      	mov	r1, r5
 80a25f4:	7c20      	ldrb	r0, [r4, #16]
 80a25f6:	f7fe fe35 	bl	80a1264 <HAL_USB_USART_Send_Data>
    return 1;
 80a25fa:	2001      	movs	r0, #1
  }
  return 0;
}
 80a25fc:	bd38      	pop	{r3, r4, r5, pc}

080a25fe <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a25fe:	7c00      	ldrb	r0, [r0, #16]
 80a2600:	f7fe be38 	b.w	80a1274 <HAL_USB_USART_Flush_Data>

080a2604 <_ZN9USBSerialD0Ev>:
 80a2604:	b510      	push	{r4, lr}
 80a2606:	4604      	mov	r4, r0
 80a2608:	f7fd fd4b 	bl	80a00a2 <_ZdlPv>
 80a260c:	4620      	mov	r0, r4
 80a260e:	bd10      	pop	{r4, pc}

080a2610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2610:	b510      	push	{r4, lr}
 80a2612:	4604      	mov	r4, r0
 80a2614:	2300      	movs	r3, #0
 80a2616:	6063      	str	r3, [r4, #4]
 80a2618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a261c:	60a3      	str	r3, [r4, #8]
 80a261e:	4b05      	ldr	r3, [pc, #20]	; (80a2634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2620:	4608      	mov	r0, r1
 80a2622:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2624:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2626:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2628:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a262a:	4611      	mov	r1, r2
 80a262c:	f7fe fdfa 	bl	80a1224 <HAL_USB_USART_Init>
}
 80a2630:	4620      	mov	r0, r4
 80a2632:	bd10      	pop	{r4, pc}
 80a2634:	080a4568 	.word	0x080a4568

080a2638 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2638:	b510      	push	{r4, lr}
 80a263a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a263c:	2214      	movs	r2, #20
 80a263e:	2100      	movs	r1, #0
 80a2640:	f001 fd01 	bl	80a4046 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2644:	4b05      	ldr	r3, [pc, #20]	; (80a265c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2646:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2648:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a264a:	4b05      	ldr	r3, [pc, #20]	; (80a2660 <_Z19acquireSerialBufferv+0x28>)
 80a264c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a264e:	f240 1301 	movw	r3, #257	; 0x101
 80a2652:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2654:	2381      	movs	r3, #129	; 0x81
 80a2656:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2658:	bd10      	pop	{r4, pc}
 80a265a:	bf00      	nop
 80a265c:	200005c5 	.word	0x200005c5
 80a2660:	20000544 	.word	0x20000544

080a2664 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2664:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2666:	4d0e      	ldr	r5, [pc, #56]	; (80a26a0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2668:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a266a:	a801      	add	r0, sp, #4
 80a266c:	f7ff ffe4 	bl	80a2638 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2670:	6829      	ldr	r1, [r5, #0]
 80a2672:	f011 0401 	ands.w	r4, r1, #1
 80a2676:	d110      	bne.n	80a269a <_Z16_fetch_usbserialv+0x36>
 80a2678:	4628      	mov	r0, r5
 80a267a:	f7fd fd16 	bl	80a00aa <__cxa_guard_acquire>
 80a267e:	b160      	cbz	r0, 80a269a <_Z16_fetch_usbserialv+0x36>
 80a2680:	aa01      	add	r2, sp, #4
 80a2682:	4621      	mov	r1, r4
 80a2684:	4807      	ldr	r0, [pc, #28]	; (80a26a4 <_Z16_fetch_usbserialv+0x40>)
 80a2686:	f7ff ffc3 	bl	80a2610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a268a:	4628      	mov	r0, r5
 80a268c:	f7fd fd12 	bl	80a00b4 <__cxa_guard_release>
 80a2690:	4a05      	ldr	r2, [pc, #20]	; (80a26a8 <_Z16_fetch_usbserialv+0x44>)
 80a2692:	4906      	ldr	r1, [pc, #24]	; (80a26ac <_Z16_fetch_usbserialv+0x48>)
 80a2694:	4803      	ldr	r0, [pc, #12]	; (80a26a4 <_Z16_fetch_usbserialv+0x40>)
 80a2696:	f000 fa81 	bl	80a2b9c <__aeabi_atexit>
	return _usbserial;
}
 80a269a:	4802      	ldr	r0, [pc, #8]	; (80a26a4 <_Z16_fetch_usbserialv+0x40>)
 80a269c:	b007      	add	sp, #28
 80a269e:	bd30      	pop	{r4, r5, pc}
 80a26a0:	20000540 	.word	0x20000540
 80a26a4:	200006c8 	.word	0x200006c8
 80a26a8:	20000370 	.word	0x20000370
 80a26ac:	080a25c1 	.word	0x080a25c1

080a26b0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a26b0:	b510      	push	{r4, lr}
 80a26b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a26b4:	2214      	movs	r2, #20
 80a26b6:	2100      	movs	r1, #0
 80a26b8:	f001 fcc5 	bl	80a4046 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26bc:	4b05      	ldr	r3, [pc, #20]	; (80a26d4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26be:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a26c2:	4b05      	ldr	r3, [pc, #20]	; (80a26d8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a26c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a26c6:	f240 1301 	movw	r3, #257	; 0x101
 80a26ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a26cc:	2381      	movs	r3, #129	; 0x81
 80a26ce:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a26d0:	bd10      	pop	{r4, pc}
 80a26d2:	bf00      	nop
 80a26d4:	20000778 	.word	0x20000778
 80a26d8:	200006e0 	.word	0x200006e0

080a26dc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a26dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26de:	4c0e      	ldr	r4, [pc, #56]	; (80a2718 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a26e0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a26e2:	a801      	add	r0, sp, #4
 80a26e4:	f7ff ffe4 	bl	80a26b0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26e8:	6823      	ldr	r3, [r4, #0]
 80a26ea:	07db      	lsls	r3, r3, #31
 80a26ec:	d410      	bmi.n	80a2710 <_Z17_fetch_usbserial1v+0x34>
 80a26ee:	4620      	mov	r0, r4
 80a26f0:	f7fd fcdb 	bl	80a00aa <__cxa_guard_acquire>
 80a26f4:	b160      	cbz	r0, 80a2710 <_Z17_fetch_usbserial1v+0x34>
 80a26f6:	aa01      	add	r2, sp, #4
 80a26f8:	2101      	movs	r1, #1
 80a26fa:	4808      	ldr	r0, [pc, #32]	; (80a271c <_Z17_fetch_usbserial1v+0x40>)
 80a26fc:	f7ff ff88 	bl	80a2610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2700:	4620      	mov	r0, r4
 80a2702:	f7fd fcd7 	bl	80a00b4 <__cxa_guard_release>
 80a2706:	4a06      	ldr	r2, [pc, #24]	; (80a2720 <_Z17_fetch_usbserial1v+0x44>)
 80a2708:	4906      	ldr	r1, [pc, #24]	; (80a2724 <_Z17_fetch_usbserial1v+0x48>)
 80a270a:	4804      	ldr	r0, [pc, #16]	; (80a271c <_Z17_fetch_usbserial1v+0x40>)
 80a270c:	f000 fa46 	bl	80a2b9c <__aeabi_atexit>
  return _usbserial1;
}
 80a2710:	4802      	ldr	r0, [pc, #8]	; (80a271c <_Z17_fetch_usbserial1v+0x40>)
 80a2712:	b006      	add	sp, #24
 80a2714:	bd10      	pop	{r4, pc}
 80a2716:	bf00      	nop
 80a2718:	200006dc 	.word	0x200006dc
 80a271c:	20000764 	.word	0x20000764
 80a2720:	20000370 	.word	0x20000370
 80a2724:	080a25c1 	.word	0x080a25c1

080a2728 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2728:	4770      	bx	lr

080a272a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a272a:	2200      	movs	r2, #0
 80a272c:	4611      	mov	r1, r2
 80a272e:	4610      	mov	r0, r2
 80a2730:	f7fe be2c 	b.w	80a138c <network_ready>

080a2734 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2734:	4803      	ldr	r0, [pc, #12]	; (80a2744 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2736:	4b04      	ldr	r3, [pc, #16]	; (80a2748 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2738:	4a04      	ldr	r2, [pc, #16]	; (80a274c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a273a:	4905      	ldr	r1, [pc, #20]	; (80a2750 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a273c:	6003      	str	r3, [r0, #0]
 80a273e:	f000 ba2d 	b.w	80a2b9c <__aeabi_atexit>
 80a2742:	bf00      	nop
 80a2744:	2000087c 	.word	0x2000087c
 80a2748:	080a4598 	.word	0x080a4598
 80a274c:	20000370 	.word	0x20000370
 80a2750:	080a2729 	.word	0x080a2729

080a2754 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2754:	b510      	push	{r4, lr}
 80a2756:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2758:	f001 fcd3 	bl	80a4102 <strlen>
 80a275c:	3801      	subs	r0, #1
 80a275e:	1823      	adds	r3, r4, r0
 80a2760:	4620      	mov	r0, r4
	while(i<j){
 80a2762:	4298      	cmp	r0, r3
 80a2764:	d206      	bcs.n	80a2774 <_Z11str_reversePc+0x20>
		c = *i;
 80a2766:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2768:	7819      	ldrb	r1, [r3, #0]
 80a276a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a276e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a2772:	e7f6      	b.n	80a2762 <_Z11str_reversePc+0xe>
 80a2774:	bd10      	pop	{r4, pc}

080a2776 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2776:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80a2778:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a277a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a277e:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80a2780:	bf34      	ite	cc
 80a2782:	4615      	movcc	r5, r2
 80a2784:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2786:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2788:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80a278a:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a278c:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a278e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80a2792:	d107      	bne.n	80a27a4 <ltoa+0x2e>
 80a2794:	4298      	cmp	r0, r3
 80a2796:	da05      	bge.n	80a27a4 <ltoa+0x2e>
      {
            *head++ = '-';
 80a2798:	232d      	movs	r3, #45	; 0x2d
 80a279a:	f101 0801 	add.w	r8, r1, #1
 80a279e:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80a27a0:	4240      	negs	r0, r0
 80a27a2:	e001      	b.n	80a27a8 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80a27a4:	b1a8      	cbz	r0, 80a27d2 <ltoa+0x5c>
 80a27a6:	46a0      	mov	r8, r4
 80a27a8:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80a27ac:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a27ae:	462a      	mov	r2, r5
 80a27b0:	4601      	mov	r1, r0
 80a27b2:	a801      	add	r0, sp, #4
 80a27b4:	f001 fc28 	bl	80a4008 <ldiv>
 80a27b8:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a27ba:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80a27bc:	2a09      	cmp	r2, #9
 80a27be:	bfcc      	ite	gt
 80a27c0:	2337      	movgt	r3, #55	; 0x37
 80a27c2:	2330      	movle	r3, #48	; 0x30
 80a27c4:	4413      	add	r3, r2
 80a27c6:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a27ca:	3701      	adds	r7, #1
 80a27cc:	2800      	cmp	r0, #0
 80a27ce:	d1ee      	bne.n	80a27ae <ltoa+0x38>
 80a27d0:	e006      	b.n	80a27e0 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 80a27d2:	46a0      	mov	r8, r4
 80a27d4:	2330      	movs	r3, #48	; 0x30
 80a27d6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a27da:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 80a27de:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a27e0:	463a      	mov	r2, r7
 80a27e2:	1c71      	adds	r1, r6, #1
 80a27e4:	4640      	mov	r0, r8
 80a27e6:	f001 fc23 	bl	80a4030 <memcpy>
      return str;
}
 80a27ea:	4620      	mov	r0, r4
 80a27ec:	b00c      	add	sp, #48	; 0x30
 80a27ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a27f2 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a27f2:	b570      	push	{r4, r5, r6, lr}
 80a27f4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a27f6:	1e91      	subs	r1, r2, #2
 80a27f8:	2922      	cmp	r1, #34	; 0x22
 80a27fa:	d820      	bhi.n	80a283e <ultoa+0x4c>
 80a27fc:	4625      	mov	r5, r4
 80a27fe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2800:	b910      	cbnz	r0, 80a2808 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2802:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2804:	2230      	movs	r2, #48	; 0x30
 80a2806:	e00e      	b.n	80a2826 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2808:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a280c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2810:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2812:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2814:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2818:	bf94      	ite	ls
 80a281a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a281c:	3157      	addhi	r1, #87	; 0x57
 80a281e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2822:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2824:	e7eb      	b.n	80a27fe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2826:	4299      	cmp	r1, r3
 80a2828:	d202      	bcs.n	80a2830 <ultoa+0x3e>
            *ptr++ = '0';
 80a282a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a282e:	e7fa      	b.n	80a2826 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2830:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2832:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2834:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2836:	f7ff ff8d 	bl	80a2754 <_Z11str_reversePc>
	return buffer;
 80a283a:	4620      	mov	r0, r4
 80a283c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a283e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2840:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2844 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2844:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2846:	4b14      	ldr	r3, [pc, #80]	; (80a2898 <serialEventRun+0x54>)
 80a2848:	b133      	cbz	r3, 80a2858 <serialEventRun+0x14>
 80a284a:	f7ff ff0b 	bl	80a2664 <_Z16_fetch_usbserialv>
 80a284e:	6803      	ldr	r3, [r0, #0]
 80a2850:	691b      	ldr	r3, [r3, #16]
 80a2852:	4798      	blx	r3
 80a2854:	2800      	cmp	r0, #0
 80a2856:	dc16      	bgt.n	80a2886 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2858:	4b10      	ldr	r3, [pc, #64]	; (80a289c <serialEventRun+0x58>)
 80a285a:	b133      	cbz	r3, 80a286a <serialEventRun+0x26>
 80a285c:	f7ff fe88 	bl	80a2570 <_Z22__fetch_global_Serial1v>
 80a2860:	6803      	ldr	r3, [r0, #0]
 80a2862:	691b      	ldr	r3, [r3, #16]
 80a2864:	4798      	blx	r3
 80a2866:	2800      	cmp	r0, #0
 80a2868:	dc10      	bgt.n	80a288c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a286a:	4b0d      	ldr	r3, [pc, #52]	; (80a28a0 <serialEventRun+0x5c>)
 80a286c:	b10b      	cbz	r3, 80a2872 <serialEventRun+0x2e>
 80a286e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2872:	4b0c      	ldr	r3, [pc, #48]	; (80a28a4 <serialEventRun+0x60>)
 80a2874:	b17b      	cbz	r3, 80a2896 <serialEventRun+0x52>
 80a2876:	f7ff ff31 	bl	80a26dc <_Z17_fetch_usbserial1v>
 80a287a:	6803      	ldr	r3, [r0, #0]
 80a287c:	691b      	ldr	r3, [r3, #16]
 80a287e:	4798      	blx	r3
 80a2880:	2800      	cmp	r0, #0
 80a2882:	dc06      	bgt.n	80a2892 <serialEventRun+0x4e>
 80a2884:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2886:	f3af 8000 	nop.w
 80a288a:	e7e5      	b.n	80a2858 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a288c:	f3af 8000 	nop.w
 80a2890:	e7eb      	b.n	80a286a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2892:	f3af 8000 	nop.w
 80a2896:	bd08      	pop	{r3, pc}
	...

080a28a8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a28a8:	b508      	push	{r3, lr}
	serialEventRun();
 80a28aa:	f7ff ffcb 	bl	80a2844 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a28ae:	f7fe fb8f 	bl	80a0fd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a28b2:	4b01      	ldr	r3, [pc, #4]	; (80a28b8 <_post_loop+0x10>)
 80a28b4:	6018      	str	r0, [r3, #0]
 80a28b6:	bd08      	pop	{r3, pc}
 80a28b8:	20000888 	.word	0x20000888

080a28bc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a28bc:	4802      	ldr	r0, [pc, #8]	; (80a28c8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a28be:	4a03      	ldr	r2, [pc, #12]	; (80a28cc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a28c0:	4903      	ldr	r1, [pc, #12]	; (80a28d0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a28c2:	1a12      	subs	r2, r2, r0
 80a28c4:	f001 bbb4 	b.w	80a4030 <memcpy>
 80a28c8:	40024000 	.word	0x40024000
 80a28cc:	40024004 	.word	0x40024004
 80a28d0:	080a4748 	.word	0x080a4748

080a28d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a28d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a28d6:	2300      	movs	r3, #0
 80a28d8:	9300      	str	r3, [sp, #0]
 80a28da:	461a      	mov	r2, r3
 80a28dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a28e0:	f7fe fd1a 	bl	80a1318 <system_ctrl_set_result>
}
 80a28e4:	b003      	add	sp, #12
 80a28e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a28ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a28ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a28ee:	8843      	ldrh	r3, [r0, #2]
 80a28f0:	2b0a      	cmp	r3, #10
 80a28f2:	d008      	beq.n	80a2906 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a28f4:	2b50      	cmp	r3, #80	; 0x50
 80a28f6:	d109      	bne.n	80a290c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a28f8:	4b09      	ldr	r3, [pc, #36]	; (80a2920 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a28fa:	681b      	ldr	r3, [r3, #0]
 80a28fc:	b13b      	cbz	r3, 80a290e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a28fe:	b003      	add	sp, #12
 80a2900:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2904:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2906:	f7ff ffe5 	bl	80a28d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a290a:	e006      	b.n	80a291a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a290c:	2300      	movs	r3, #0
 80a290e:	9300      	str	r3, [sp, #0]
 80a2910:	461a      	mov	r2, r3
 80a2912:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2916:	f7fe fcff 	bl	80a1318 <system_ctrl_set_result>
        break;
    }
}
 80a291a:	b003      	add	sp, #12
 80a291c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2920:	20000880 	.word	0x20000880

080a2924 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2924:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2926:	4c10      	ldr	r4, [pc, #64]	; (80a2968 <module_user_init_hook+0x44>)
 80a2928:	4d10      	ldr	r5, [pc, #64]	; (80a296c <module_user_init_hook+0x48>)
 80a292a:	6823      	ldr	r3, [r4, #0]
 80a292c:	42ab      	cmp	r3, r5
 80a292e:	4b10      	ldr	r3, [pc, #64]	; (80a2970 <module_user_init_hook+0x4c>)
 80a2930:	bf0c      	ite	eq
 80a2932:	2201      	moveq	r2, #1
 80a2934:	2200      	movne	r2, #0
 80a2936:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2938:	d002      	beq.n	80a2940 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a293a:	f7ff ffbf 	bl	80a28bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a293e:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a2940:	f7fe fb3e 	bl	80a0fc0 <HAL_RNG_GetRandomNumber>
 80a2944:	f001 fb88 	bl	80a4058 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2948:	4b0a      	ldr	r3, [pc, #40]	; (80a2974 <module_user_init_hook+0x50>)
 80a294a:	b11b      	cbz	r3, 80a2954 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a294c:	f7fe fb38 	bl	80a0fc0 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a2950:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2954:	2100      	movs	r1, #0
 80a2956:	4807      	ldr	r0, [pc, #28]	; (80a2974 <module_user_init_hook+0x50>)
 80a2958:	f7fe fd10 	bl	80a137c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a295c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2960:	2100      	movs	r1, #0
 80a2962:	4805      	ldr	r0, [pc, #20]	; (80a2978 <module_user_init_hook+0x54>)
 80a2964:	f7fe bcce 	b.w	80a1304 <system_ctrl_set_app_request_handler>
 80a2968:	40024000 	.word	0x40024000
 80a296c:	9a271c1e 	.word	0x9a271c1e
 80a2970:	20000884 	.word	0x20000884
 80a2974:	00000000 	.word	0x00000000
 80a2978:	080a28ed 	.word	0x080a28ed

080a297c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80a297c:	b508      	push	{r3, lr}
 80a297e:	4b02      	ldr	r3, [pc, #8]	; (80a2988 <spark_protocol_instance+0xc>)
 80a2980:	681b      	ldr	r3, [r3, #0]
 80a2982:	681b      	ldr	r3, [r3, #0]
 80a2984:	9301      	str	r3, [sp, #4]
 80a2986:	bd08      	pop	{r3, pc}
 80a2988:	0802019c 	.word	0x0802019c

080a298c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80a298c:	b508      	push	{r3, lr}
 80a298e:	4b02      	ldr	r3, [pc, #8]	; (80a2998 <spark_protocol_set_product_id+0xc>)
 80a2990:	681b      	ldr	r3, [r3, #0]
 80a2992:	685b      	ldr	r3, [r3, #4]
 80a2994:	9301      	str	r3, [sp, #4]
 80a2996:	bd08      	pop	{r3, pc}
 80a2998:	0802019c 	.word	0x0802019c

080a299c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80a299c:	b508      	push	{r3, lr}
 80a299e:	4b02      	ldr	r3, [pc, #8]	; (80a29a8 <spark_protocol_set_product_firmware_version+0xc>)
 80a29a0:	681b      	ldr	r3, [r3, #0]
 80a29a2:	689b      	ldr	r3, [r3, #8]
 80a29a4:	9301      	str	r3, [sp, #4]
 80a29a6:	bd08      	pop	{r3, pc}
 80a29a8:	0802019c 	.word	0x0802019c

080a29ac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a29ac:	b510      	push	{r4, lr}
 80a29ae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a29b0:	480f      	ldr	r0, [pc, #60]	; (80a29f0 <pinAvailable+0x44>)
 80a29b2:	f7ff f92b 	bl	80a1c0c <_ZN8SPIClass9isEnabledEv>
 80a29b6:	b128      	cbz	r0, 80a29c4 <pinAvailable+0x18>
 80a29b8:	f1a4 030d 	sub.w	r3, r4, #13
 80a29bc:	2b02      	cmp	r3, #2
 80a29be:	d801      	bhi.n	80a29c4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a29c0:	2000      	movs	r0, #0
 80a29c2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a29c4:	f000 f890 	bl	80a2ae8 <_Z19__fetch_global_Wirev>
 80a29c8:	f7ff f830 	bl	80a1a2c <_ZN7TwoWire9isEnabledEv>
 80a29cc:	b108      	cbz	r0, 80a29d2 <pinAvailable+0x26>
 80a29ce:	2c01      	cmp	r4, #1
 80a29d0:	d9f6      	bls.n	80a29c0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a29d2:	f7ff fdcd 	bl	80a2570 <_Z22__fetch_global_Serial1v>
 80a29d6:	f7ff fdc7 	bl	80a2568 <_ZN11USARTSerial9isEnabledEv>
 80a29da:	b118      	cbz	r0, 80a29e4 <pinAvailable+0x38>
 80a29dc:	f1a4 0312 	sub.w	r3, r4, #18
 80a29e0:	2b01      	cmp	r3, #1
 80a29e2:	d9ed      	bls.n	80a29c0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a29e4:	2c17      	cmp	r4, #23
 80a29e6:	bf8c      	ite	hi
 80a29e8:	2000      	movhi	r0, #0
 80a29ea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a29ec:	bd10      	pop	{r4, pc}
 80a29ee:	bf00      	nop
 80a29f0:	200008bc 	.word	0x200008bc

080a29f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29f4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a29f6:	b538      	push	{r3, r4, r5, lr}
 80a29f8:	4604      	mov	r4, r0
 80a29fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29fc:	d80a      	bhi.n	80a2a14 <pinMode+0x20>
 80a29fe:	29ff      	cmp	r1, #255	; 0xff
 80a2a00:	d008      	beq.n	80a2a14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a02:	f7ff ffd3 	bl	80a29ac <pinAvailable>
 80a2a06:	b128      	cbz	r0, 80a2a14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2a08:	4629      	mov	r1, r5
 80a2a0a:	4620      	mov	r0, r4
}
 80a2a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2a10:	f7fe bb06 	b.w	80a1020 <HAL_Pin_Mode>
 80a2a14:	bd38      	pop	{r3, r4, r5, pc}

080a2a16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2a16:	b538      	push	{r3, r4, r5, lr}
 80a2a18:	4604      	mov	r4, r0
 80a2a1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2a1c:	f7fe fb08 	bl	80a1030 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2a20:	28ff      	cmp	r0, #255	; 0xff
 80a2a22:	d010      	beq.n	80a2a46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2a24:	2806      	cmp	r0, #6
 80a2a26:	d804      	bhi.n	80a2a32 <digitalWrite+0x1c>
 80a2a28:	234d      	movs	r3, #77	; 0x4d
 80a2a2a:	fa23 f000 	lsr.w	r0, r3, r0
 80a2a2e:	07c3      	lsls	r3, r0, #31
 80a2a30:	d409      	bmi.n	80a2a46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a32:	4620      	mov	r0, r4
 80a2a34:	f7ff ffba 	bl	80a29ac <pinAvailable>
 80a2a38:	b128      	cbz	r0, 80a2a46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a3a:	4629      	mov	r1, r5
 80a2a3c:	4620      	mov	r0, r4
}
 80a2a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a42:	f7fe bafd 	b.w	80a1040 <HAL_GPIO_Write>
 80a2a46:	bd38      	pop	{r3, r4, r5, pc}

080a2a48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2a48:	b510      	push	{r4, lr}
 80a2a4a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2a4c:	f7fe faf0 	bl	80a1030 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2a50:	3804      	subs	r0, #4
 80a2a52:	b2c0      	uxtb	r0, r0
 80a2a54:	2801      	cmp	r0, #1
 80a2a56:	d908      	bls.n	80a2a6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2a58:	4620      	mov	r0, r4
 80a2a5a:	f7ff ffa7 	bl	80a29ac <pinAvailable>
 80a2a5e:	b120      	cbz	r0, 80a2a6a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2a60:	4620      	mov	r0, r4
}
 80a2a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2a66:	f7fe baf3 	b.w	80a1050 <HAL_GPIO_Read>
}
 80a2a6a:	2000      	movs	r0, #0
 80a2a6c:	bd10      	pop	{r4, pc}

080a2a6e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2a6e:	b510      	push	{r4, lr}
 80a2a70:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2a72:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2a74:	bf9c      	itt	ls
 80a2a76:	340a      	addls	r4, #10
 80a2a78:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a7a:	4620      	mov	r0, r4
 80a2a7c:	f7ff ff96 	bl	80a29ac <pinAvailable>
 80a2a80:	b150      	cbz	r0, 80a2a98 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2a82:	2103      	movs	r1, #3
 80a2a84:	4620      	mov	r0, r4
 80a2a86:	f7fe fac3 	bl	80a1010 <HAL_Validate_Pin_Function>
 80a2a8a:	2803      	cmp	r0, #3
 80a2a8c:	d104      	bne.n	80a2a98 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2a8e:	4620      	mov	r0, r4
}
 80a2a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2a94:	f7fe baec 	b.w	80a1070 <HAL_ADC_Read>
}
 80a2a98:	2000      	movs	r0, #0
 80a2a9a:	bd10      	pop	{r4, pc}

080a2a9c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a2a9c:	b538      	push	{r3, r4, r5, lr}
 80a2a9e:	4604      	mov	r4, r0
 80a2aa0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a2aa2:	f7ff ff83 	bl	80a29ac <pinAvailable>
 80a2aa6:	b1f0      	cbz	r0, 80a2ae6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a2aa8:	2104      	movs	r1, #4
 80a2aaa:	4620      	mov	r0, r4
 80a2aac:	f7fe fab0 	bl	80a1010 <HAL_Validate_Pin_Function>
 80a2ab0:	2804      	cmp	r0, #4
 80a2ab2:	d105      	bne.n	80a2ac0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a2ab4:	b2a9      	uxth	r1, r5
 80a2ab6:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a2ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a2abc:	f7fe bad0 	b.w	80a1060 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a2ac0:	2102      	movs	r1, #2
 80a2ac2:	4620      	mov	r0, r4
 80a2ac4:	f7fe faa4 	bl	80a1010 <HAL_Validate_Pin_Function>
 80a2ac8:	2802      	cmp	r0, #2
 80a2aca:	d10c      	bne.n	80a2ae6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2acc:	4620      	mov	r0, r4
 80a2ace:	f7fe faaf 	bl	80a1030 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a2ad2:	2801      	cmp	r0, #1
 80a2ad4:	d001      	beq.n	80a2ada <_Z11analogWritetm+0x3e>
 80a2ad6:	2804      	cmp	r0, #4
 80a2ad8:	d105      	bne.n	80a2ae6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2ada:	4629      	mov	r1, r5
 80a2adc:	4620      	mov	r0, r4
    }
}
 80a2ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2ae2:	f7fe bacd 	b.w	80a1080 <HAL_PWM_Write_Ext>
 80a2ae6:	bd38      	pop	{r3, r4, r5, pc}

080a2ae8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2ae8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2aea:	4d0b      	ldr	r5, [pc, #44]	; (80a2b18 <_Z19__fetch_global_Wirev+0x30>)
 80a2aec:	6829      	ldr	r1, [r5, #0]
 80a2aee:	f011 0401 	ands.w	r4, r1, #1
 80a2af2:	d10f      	bne.n	80a2b14 <_Z19__fetch_global_Wirev+0x2c>
 80a2af4:	4628      	mov	r0, r5
 80a2af6:	f7fd fad8 	bl	80a00aa <__cxa_guard_acquire>
 80a2afa:	b158      	cbz	r0, 80a2b14 <_Z19__fetch_global_Wirev+0x2c>
 80a2afc:	4621      	mov	r1, r4
 80a2afe:	4807      	ldr	r0, [pc, #28]	; (80a2b1c <_Z19__fetch_global_Wirev+0x34>)
 80a2b00:	f7fe ff82 	bl	80a1a08 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2b04:	4628      	mov	r0, r5
 80a2b06:	f7fd fad5 	bl	80a00b4 <__cxa_guard_release>
 80a2b0a:	4a05      	ldr	r2, [pc, #20]	; (80a2b20 <_Z19__fetch_global_Wirev+0x38>)
 80a2b0c:	4905      	ldr	r1, [pc, #20]	; (80a2b24 <_Z19__fetch_global_Wirev+0x3c>)
 80a2b0e:	4803      	ldr	r0, [pc, #12]	; (80a2b1c <_Z19__fetch_global_Wirev+0x34>)
 80a2b10:	f000 f844 	bl	80a2b9c <__aeabi_atexit>
	return wire;
}
 80a2b14:	4801      	ldr	r0, [pc, #4]	; (80a2b1c <_Z19__fetch_global_Wirev+0x34>)
 80a2b16:	bd38      	pop	{r3, r4, r5, pc}
 80a2b18:	2000088c 	.word	0x2000088c
 80a2b1c:	20000890 	.word	0x20000890
 80a2b20:	20000370 	.word	0x20000370
 80a2b24:	080a19b1 	.word	0x080a19b1

080a2b28 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2b28:	b513      	push	{r0, r1, r4, lr}
 80a2b2a:	4c08      	ldr	r4, [pc, #32]	; (80a2b4c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2b2c:	2300      	movs	r3, #0
 80a2b2e:	461a      	mov	r2, r3
 80a2b30:	4619      	mov	r1, r3
 80a2b32:	9300      	str	r3, [sp, #0]
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	f7fe ffb9 	bl	80a1aac <_ZN9IPAddressC1Ehhhh>
 80a2b3a:	4620      	mov	r0, r4
 80a2b3c:	4a04      	ldr	r2, [pc, #16]	; (80a2b50 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2b3e:	4905      	ldr	r1, [pc, #20]	; (80a2b54 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2b40:	b002      	add	sp, #8
 80a2b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2b46:	f000 b829 	b.w	80a2b9c <__aeabi_atexit>
 80a2b4a:	bf00      	nop
 80a2b4c:	200008a4 	.word	0x200008a4
 80a2b50:	20000370 	.word	0x20000370
 80a2b54:	080a1a35 	.word	0x080a1a35

080a2b58 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b58:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2b5a:	4c0c      	ldr	r4, [pc, #48]	; (80a2b8c <_GLOBAL__sub_I_SPI+0x34>)
 80a2b5c:	4e0c      	ldr	r6, [pc, #48]	; (80a2b90 <_GLOBAL__sub_I_SPI+0x38>)
 80a2b5e:	4d0d      	ldr	r5, [pc, #52]	; (80a2b94 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2b60:	2100      	movs	r1, #0
 80a2b62:	4620      	mov	r0, r4
 80a2b64:	f7ff f83e 	bl	80a1be4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b68:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b6a:	4c0b      	ldr	r4, [pc, #44]	; (80a2b98 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2b6c:	4632      	mov	r2, r6
 80a2b6e:	4629      	mov	r1, r5
 80a2b70:	f000 f814 	bl	80a2b9c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b74:	2101      	movs	r1, #1
 80a2b76:	4620      	mov	r0, r4
 80a2b78:	f7ff f834 	bl	80a1be4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b7c:	4632      	mov	r2, r6
 80a2b7e:	4629      	mov	r1, r5
 80a2b80:	4620      	mov	r0, r4
 80a2b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2b86:	f000 b809 	b.w	80a2b9c <__aeabi_atexit>
 80a2b8a:	bf00      	nop
 80a2b8c:	200008bc 	.word	0x200008bc
 80a2b90:	20000370 	.word	0x20000370
 80a2b94:	080a1bd5 	.word	0x080a1bd5
 80a2b98:	200008cc 	.word	0x200008cc

080a2b9c <__aeabi_atexit>:
 80a2b9c:	460b      	mov	r3, r1
 80a2b9e:	4601      	mov	r1, r0
 80a2ba0:	4618      	mov	r0, r3
 80a2ba2:	f001 ba23 	b.w	80a3fec <__cxa_atexit>

080a2ba6 <_ZSt25__throw_bad_function_callv>:
 80a2ba6:	b508      	push	{r3, lr}
 80a2ba8:	f7fe fc10 	bl	80a13cc <abort>

080a2bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2bac:	4b24      	ldr	r3, [pc, #144]	; (80a2c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2bae:	681a      	ldr	r2, [r3, #0]
 80a2bb0:	07d0      	lsls	r0, r2, #31
 80a2bb2:	bf5c      	itt	pl
 80a2bb4:	2201      	movpl	r2, #1
 80a2bb6:	601a      	strpl	r2, [r3, #0]
 80a2bb8:	4b22      	ldr	r3, [pc, #136]	; (80a2c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2bba:	681a      	ldr	r2, [r3, #0]
 80a2bbc:	07d1      	lsls	r1, r2, #31
 80a2bbe:	bf5c      	itt	pl
 80a2bc0:	2201      	movpl	r2, #1
 80a2bc2:	601a      	strpl	r2, [r3, #0]
 80a2bc4:	4b20      	ldr	r3, [pc, #128]	; (80a2c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2bc6:	681a      	ldr	r2, [r3, #0]
 80a2bc8:	07d2      	lsls	r2, r2, #31
 80a2bca:	bf5c      	itt	pl
 80a2bcc:	2201      	movpl	r2, #1
 80a2bce:	601a      	strpl	r2, [r3, #0]
 80a2bd0:	4b1e      	ldr	r3, [pc, #120]	; (80a2c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2bd2:	681a      	ldr	r2, [r3, #0]
 80a2bd4:	07d0      	lsls	r0, r2, #31
 80a2bd6:	bf5c      	itt	pl
 80a2bd8:	2201      	movpl	r2, #1
 80a2bda:	601a      	strpl	r2, [r3, #0]
 80a2bdc:	4b1c      	ldr	r3, [pc, #112]	; (80a2c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2bde:	681a      	ldr	r2, [r3, #0]
 80a2be0:	07d1      	lsls	r1, r2, #31
 80a2be2:	bf5c      	itt	pl
 80a2be4:	2201      	movpl	r2, #1
 80a2be6:	601a      	strpl	r2, [r3, #0]
 80a2be8:	4b1a      	ldr	r3, [pc, #104]	; (80a2c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2bea:	681a      	ldr	r2, [r3, #0]
 80a2bec:	07d2      	lsls	r2, r2, #31
 80a2bee:	bf5c      	itt	pl
 80a2bf0:	2201      	movpl	r2, #1
 80a2bf2:	601a      	strpl	r2, [r3, #0]
 80a2bf4:	4b18      	ldr	r3, [pc, #96]	; (80a2c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2bf6:	681a      	ldr	r2, [r3, #0]
 80a2bf8:	07d0      	lsls	r0, r2, #31
 80a2bfa:	bf5c      	itt	pl
 80a2bfc:	2201      	movpl	r2, #1
 80a2bfe:	601a      	strpl	r2, [r3, #0]
 80a2c00:	4b16      	ldr	r3, [pc, #88]	; (80a2c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2c02:	681a      	ldr	r2, [r3, #0]
 80a2c04:	07d1      	lsls	r1, r2, #31
 80a2c06:	bf5c      	itt	pl
 80a2c08:	2201      	movpl	r2, #1
 80a2c0a:	601a      	strpl	r2, [r3, #0]
 80a2c0c:	4b14      	ldr	r3, [pc, #80]	; (80a2c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2c0e:	681a      	ldr	r2, [r3, #0]
 80a2c10:	07d2      	lsls	r2, r2, #31
 80a2c12:	bf5c      	itt	pl
 80a2c14:	2201      	movpl	r2, #1
 80a2c16:	601a      	strpl	r2, [r3, #0]
 80a2c18:	4b12      	ldr	r3, [pc, #72]	; (80a2c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2c1a:	681a      	ldr	r2, [r3, #0]
 80a2c1c:	07d0      	lsls	r0, r2, #31
 80a2c1e:	bf5c      	itt	pl
 80a2c20:	2201      	movpl	r2, #1
 80a2c22:	601a      	strpl	r2, [r3, #0]
 80a2c24:	4b10      	ldr	r3, [pc, #64]	; (80a2c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2c26:	681a      	ldr	r2, [r3, #0]
 80a2c28:	07d1      	lsls	r1, r2, #31
 80a2c2a:	bf5c      	itt	pl
 80a2c2c:	2201      	movpl	r2, #1
 80a2c2e:	601a      	strpl	r2, [r3, #0]
 80a2c30:	4b0e      	ldr	r3, [pc, #56]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2c32:	681a      	ldr	r2, [r3, #0]
 80a2c34:	07d2      	lsls	r2, r2, #31
 80a2c36:	bf5c      	itt	pl
 80a2c38:	2201      	movpl	r2, #1
 80a2c3a:	601a      	strpl	r2, [r3, #0]
 80a2c3c:	4770      	bx	lr
 80a2c3e:	bf00      	nop
 80a2c40:	20000908 	.word	0x20000908
 80a2c44:	20000904 	.word	0x20000904
 80a2c48:	20000900 	.word	0x20000900
 80a2c4c:	200008fc 	.word	0x200008fc
 80a2c50:	200008f8 	.word	0x200008f8
 80a2c54:	200008f4 	.word	0x200008f4
 80a2c58:	200008f0 	.word	0x200008f0
 80a2c5c:	200008ec 	.word	0x200008ec
 80a2c60:	200008e8 	.word	0x200008e8
 80a2c64:	200008e4 	.word	0x200008e4
 80a2c68:	200008e0 	.word	0x200008e0
 80a2c6c:	200008dc 	.word	0x200008dc

080a2c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2c70:	4b18      	ldr	r3, [pc, #96]	; (80a2cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2c72:	681a      	ldr	r2, [r3, #0]
 80a2c74:	07d1      	lsls	r1, r2, #31
 80a2c76:	bf5c      	itt	pl
 80a2c78:	2201      	movpl	r2, #1
 80a2c7a:	601a      	strpl	r2, [r3, #0]
 80a2c7c:	4b16      	ldr	r3, [pc, #88]	; (80a2cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c7e:	681a      	ldr	r2, [r3, #0]
 80a2c80:	07d2      	lsls	r2, r2, #31
 80a2c82:	bf5c      	itt	pl
 80a2c84:	2201      	movpl	r2, #1
 80a2c86:	601a      	strpl	r2, [r3, #0]
 80a2c88:	4b14      	ldr	r3, [pc, #80]	; (80a2cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c8a:	681a      	ldr	r2, [r3, #0]
 80a2c8c:	07d0      	lsls	r0, r2, #31
 80a2c8e:	bf5c      	itt	pl
 80a2c90:	2201      	movpl	r2, #1
 80a2c92:	601a      	strpl	r2, [r3, #0]
 80a2c94:	4b12      	ldr	r3, [pc, #72]	; (80a2ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c96:	681a      	ldr	r2, [r3, #0]
 80a2c98:	07d1      	lsls	r1, r2, #31
 80a2c9a:	bf5c      	itt	pl
 80a2c9c:	2201      	movpl	r2, #1
 80a2c9e:	601a      	strpl	r2, [r3, #0]
 80a2ca0:	4b10      	ldr	r3, [pc, #64]	; (80a2ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ca2:	681a      	ldr	r2, [r3, #0]
 80a2ca4:	07d2      	lsls	r2, r2, #31
 80a2ca6:	bf5c      	itt	pl
 80a2ca8:	2201      	movpl	r2, #1
 80a2caa:	601a      	strpl	r2, [r3, #0]
 80a2cac:	4b0e      	ldr	r3, [pc, #56]	; (80a2ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2cae:	681a      	ldr	r2, [r3, #0]
 80a2cb0:	07d0      	lsls	r0, r2, #31
 80a2cb2:	bf5c      	itt	pl
 80a2cb4:	2201      	movpl	r2, #1
 80a2cb6:	601a      	strpl	r2, [r3, #0]
 80a2cb8:	4b0c      	ldr	r3, [pc, #48]	; (80a2cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2cba:	681a      	ldr	r2, [r3, #0]
 80a2cbc:	07d1      	lsls	r1, r2, #31
 80a2cbe:	bf5c      	itt	pl
 80a2cc0:	2201      	movpl	r2, #1
 80a2cc2:	601a      	strpl	r2, [r3, #0]
 80a2cc4:	4b0a      	ldr	r3, [pc, #40]	; (80a2cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2cc6:	681a      	ldr	r2, [r3, #0]
 80a2cc8:	07d2      	lsls	r2, r2, #31
 80a2cca:	bf5c      	itt	pl
 80a2ccc:	2201      	movpl	r2, #1
 80a2cce:	601a      	strpl	r2, [r3, #0]
 80a2cd0:	4770      	bx	lr
 80a2cd2:	bf00      	nop
 80a2cd4:	20000928 	.word	0x20000928
 80a2cd8:	20000924 	.word	0x20000924
 80a2cdc:	20000920 	.word	0x20000920
 80a2ce0:	2000091c 	.word	0x2000091c
 80a2ce4:	20000918 	.word	0x20000918
 80a2ce8:	20000914 	.word	0x20000914
 80a2cec:	20000910 	.word	0x20000910
 80a2cf0:	2000090c 	.word	0x2000090c

080a2cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2cf4:	4b18      	ldr	r3, [pc, #96]	; (80a2d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2cf6:	681a      	ldr	r2, [r3, #0]
 80a2cf8:	07d1      	lsls	r1, r2, #31
 80a2cfa:	bf5c      	itt	pl
 80a2cfc:	2201      	movpl	r2, #1
 80a2cfe:	601a      	strpl	r2, [r3, #0]
 80a2d00:	4b16      	ldr	r3, [pc, #88]	; (80a2d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2d02:	681a      	ldr	r2, [r3, #0]
 80a2d04:	07d2      	lsls	r2, r2, #31
 80a2d06:	bf5c      	itt	pl
 80a2d08:	2201      	movpl	r2, #1
 80a2d0a:	601a      	strpl	r2, [r3, #0]
 80a2d0c:	4b14      	ldr	r3, [pc, #80]	; (80a2d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2d0e:	681a      	ldr	r2, [r3, #0]
 80a2d10:	07d0      	lsls	r0, r2, #31
 80a2d12:	bf5c      	itt	pl
 80a2d14:	2201      	movpl	r2, #1
 80a2d16:	601a      	strpl	r2, [r3, #0]
 80a2d18:	4b12      	ldr	r3, [pc, #72]	; (80a2d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2d1a:	681a      	ldr	r2, [r3, #0]
 80a2d1c:	07d1      	lsls	r1, r2, #31
 80a2d1e:	bf5c      	itt	pl
 80a2d20:	2201      	movpl	r2, #1
 80a2d22:	601a      	strpl	r2, [r3, #0]
 80a2d24:	4b10      	ldr	r3, [pc, #64]	; (80a2d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2d26:	681a      	ldr	r2, [r3, #0]
 80a2d28:	07d2      	lsls	r2, r2, #31
 80a2d2a:	bf5c      	itt	pl
 80a2d2c:	2201      	movpl	r2, #1
 80a2d2e:	601a      	strpl	r2, [r3, #0]
 80a2d30:	4b0e      	ldr	r3, [pc, #56]	; (80a2d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2d32:	681a      	ldr	r2, [r3, #0]
 80a2d34:	07d0      	lsls	r0, r2, #31
 80a2d36:	bf5c      	itt	pl
 80a2d38:	2201      	movpl	r2, #1
 80a2d3a:	601a      	strpl	r2, [r3, #0]
 80a2d3c:	4b0c      	ldr	r3, [pc, #48]	; (80a2d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2d3e:	681a      	ldr	r2, [r3, #0]
 80a2d40:	07d1      	lsls	r1, r2, #31
 80a2d42:	bf5c      	itt	pl
 80a2d44:	2201      	movpl	r2, #1
 80a2d46:	601a      	strpl	r2, [r3, #0]
 80a2d48:	4b0a      	ldr	r3, [pc, #40]	; (80a2d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2d4a:	681a      	ldr	r2, [r3, #0]
 80a2d4c:	07d2      	lsls	r2, r2, #31
 80a2d4e:	bf5c      	itt	pl
 80a2d50:	2201      	movpl	r2, #1
 80a2d52:	601a      	strpl	r2, [r3, #0]
 80a2d54:	4770      	bx	lr
 80a2d56:	bf00      	nop
 80a2d58:	20000948 	.word	0x20000948
 80a2d5c:	20000944 	.word	0x20000944
 80a2d60:	20000940 	.word	0x20000940
 80a2d64:	2000093c 	.word	0x2000093c
 80a2d68:	20000938 	.word	0x20000938
 80a2d6c:	20000934 	.word	0x20000934
 80a2d70:	20000930 	.word	0x20000930
 80a2d74:	2000092c 	.word	0x2000092c

080a2d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2d78:	4b24      	ldr	r3, [pc, #144]	; (80a2e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2d7a:	681a      	ldr	r2, [r3, #0]
 80a2d7c:	07d0      	lsls	r0, r2, #31
 80a2d7e:	bf5c      	itt	pl
 80a2d80:	2201      	movpl	r2, #1
 80a2d82:	601a      	strpl	r2, [r3, #0]
 80a2d84:	4b22      	ldr	r3, [pc, #136]	; (80a2e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2d86:	681a      	ldr	r2, [r3, #0]
 80a2d88:	07d1      	lsls	r1, r2, #31
 80a2d8a:	bf5c      	itt	pl
 80a2d8c:	2201      	movpl	r2, #1
 80a2d8e:	601a      	strpl	r2, [r3, #0]
 80a2d90:	4b20      	ldr	r3, [pc, #128]	; (80a2e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2d92:	681a      	ldr	r2, [r3, #0]
 80a2d94:	07d2      	lsls	r2, r2, #31
 80a2d96:	bf5c      	itt	pl
 80a2d98:	2201      	movpl	r2, #1
 80a2d9a:	601a      	strpl	r2, [r3, #0]
 80a2d9c:	4b1e      	ldr	r3, [pc, #120]	; (80a2e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2d9e:	681a      	ldr	r2, [r3, #0]
 80a2da0:	07d0      	lsls	r0, r2, #31
 80a2da2:	bf5c      	itt	pl
 80a2da4:	2201      	movpl	r2, #1
 80a2da6:	601a      	strpl	r2, [r3, #0]
 80a2da8:	4b1c      	ldr	r3, [pc, #112]	; (80a2e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2daa:	681a      	ldr	r2, [r3, #0]
 80a2dac:	07d1      	lsls	r1, r2, #31
 80a2dae:	bf5c      	itt	pl
 80a2db0:	2201      	movpl	r2, #1
 80a2db2:	601a      	strpl	r2, [r3, #0]
 80a2db4:	4b1a      	ldr	r3, [pc, #104]	; (80a2e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2db6:	681a      	ldr	r2, [r3, #0]
 80a2db8:	07d2      	lsls	r2, r2, #31
 80a2dba:	bf5c      	itt	pl
 80a2dbc:	2201      	movpl	r2, #1
 80a2dbe:	601a      	strpl	r2, [r3, #0]
 80a2dc0:	4b18      	ldr	r3, [pc, #96]	; (80a2e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2dc2:	681a      	ldr	r2, [r3, #0]
 80a2dc4:	07d0      	lsls	r0, r2, #31
 80a2dc6:	bf5c      	itt	pl
 80a2dc8:	2201      	movpl	r2, #1
 80a2dca:	601a      	strpl	r2, [r3, #0]
 80a2dcc:	4b16      	ldr	r3, [pc, #88]	; (80a2e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2dce:	681a      	ldr	r2, [r3, #0]
 80a2dd0:	07d1      	lsls	r1, r2, #31
 80a2dd2:	bf5c      	itt	pl
 80a2dd4:	2201      	movpl	r2, #1
 80a2dd6:	601a      	strpl	r2, [r3, #0]
 80a2dd8:	4b14      	ldr	r3, [pc, #80]	; (80a2e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2dda:	681a      	ldr	r2, [r3, #0]
 80a2ddc:	07d2      	lsls	r2, r2, #31
 80a2dde:	bf5c      	itt	pl
 80a2de0:	2201      	movpl	r2, #1
 80a2de2:	601a      	strpl	r2, [r3, #0]
 80a2de4:	4b12      	ldr	r3, [pc, #72]	; (80a2e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2de6:	681a      	ldr	r2, [r3, #0]
 80a2de8:	07d0      	lsls	r0, r2, #31
 80a2dea:	bf5c      	itt	pl
 80a2dec:	2201      	movpl	r2, #1
 80a2dee:	601a      	strpl	r2, [r3, #0]
 80a2df0:	4b10      	ldr	r3, [pc, #64]	; (80a2e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2df2:	681a      	ldr	r2, [r3, #0]
 80a2df4:	07d1      	lsls	r1, r2, #31
 80a2df6:	bf5c      	itt	pl
 80a2df8:	2201      	movpl	r2, #1
 80a2dfa:	601a      	strpl	r2, [r3, #0]
 80a2dfc:	4b0e      	ldr	r3, [pc, #56]	; (80a2e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2dfe:	681a      	ldr	r2, [r3, #0]
 80a2e00:	07d2      	lsls	r2, r2, #31
 80a2e02:	bf5c      	itt	pl
 80a2e04:	2201      	movpl	r2, #1
 80a2e06:	601a      	strpl	r2, [r3, #0]
 80a2e08:	4770      	bx	lr
 80a2e0a:	bf00      	nop
 80a2e0c:	20000978 	.word	0x20000978
 80a2e10:	20000974 	.word	0x20000974
 80a2e14:	20000970 	.word	0x20000970
 80a2e18:	2000096c 	.word	0x2000096c
 80a2e1c:	20000968 	.word	0x20000968
 80a2e20:	20000964 	.word	0x20000964
 80a2e24:	20000960 	.word	0x20000960
 80a2e28:	2000095c 	.word	0x2000095c
 80a2e2c:	20000958 	.word	0x20000958
 80a2e30:	20000954 	.word	0x20000954
 80a2e34:	20000950 	.word	0x20000950
 80a2e38:	2000094c 	.word	0x2000094c

080a2e3c <__aeabi_drsub>:
 80a2e3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2e40:	e002      	b.n	80a2e48 <__adddf3>
 80a2e42:	bf00      	nop

080a2e44 <__aeabi_dsub>:
 80a2e44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2e48 <__adddf3>:
 80a2e48:	b530      	push	{r4, r5, lr}
 80a2e4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2e4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2e52:	ea94 0f05 	teq	r4, r5
 80a2e56:	bf08      	it	eq
 80a2e58:	ea90 0f02 	teqeq	r0, r2
 80a2e5c:	bf1f      	itttt	ne
 80a2e5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2e62:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2e66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2e6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e6e:	f000 80e2 	beq.w	80a3036 <__adddf3+0x1ee>
 80a2e72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2e76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2e7a:	bfb8      	it	lt
 80a2e7c:	426d      	neglt	r5, r5
 80a2e7e:	dd0c      	ble.n	80a2e9a <__adddf3+0x52>
 80a2e80:	442c      	add	r4, r5
 80a2e82:	ea80 0202 	eor.w	r2, r0, r2
 80a2e86:	ea81 0303 	eor.w	r3, r1, r3
 80a2e8a:	ea82 0000 	eor.w	r0, r2, r0
 80a2e8e:	ea83 0101 	eor.w	r1, r3, r1
 80a2e92:	ea80 0202 	eor.w	r2, r0, r2
 80a2e96:	ea81 0303 	eor.w	r3, r1, r3
 80a2e9a:	2d36      	cmp	r5, #54	; 0x36
 80a2e9c:	bf88      	it	hi
 80a2e9e:	bd30      	pophi	{r4, r5, pc}
 80a2ea0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2ea4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ea8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2eac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2eb0:	d002      	beq.n	80a2eb8 <__adddf3+0x70>
 80a2eb2:	4240      	negs	r0, r0
 80a2eb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2eb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2ebc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2ec0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2ec4:	d002      	beq.n	80a2ecc <__adddf3+0x84>
 80a2ec6:	4252      	negs	r2, r2
 80a2ec8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2ecc:	ea94 0f05 	teq	r4, r5
 80a2ed0:	f000 80a7 	beq.w	80a3022 <__adddf3+0x1da>
 80a2ed4:	f1a4 0401 	sub.w	r4, r4, #1
 80a2ed8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2edc:	db0d      	blt.n	80a2efa <__adddf3+0xb2>
 80a2ede:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2ee2:	fa22 f205 	lsr.w	r2, r2, r5
 80a2ee6:	1880      	adds	r0, r0, r2
 80a2ee8:	f141 0100 	adc.w	r1, r1, #0
 80a2eec:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2ef0:	1880      	adds	r0, r0, r2
 80a2ef2:	fa43 f305 	asr.w	r3, r3, r5
 80a2ef6:	4159      	adcs	r1, r3
 80a2ef8:	e00e      	b.n	80a2f18 <__adddf3+0xd0>
 80a2efa:	f1a5 0520 	sub.w	r5, r5, #32
 80a2efe:	f10e 0e20 	add.w	lr, lr, #32
 80a2f02:	2a01      	cmp	r2, #1
 80a2f04:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2f08:	bf28      	it	cs
 80a2f0a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2f0e:	fa43 f305 	asr.w	r3, r3, r5
 80a2f12:	18c0      	adds	r0, r0, r3
 80a2f14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2f18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f1c:	d507      	bpl.n	80a2f2e <__adddf3+0xe6>
 80a2f1e:	f04f 0e00 	mov.w	lr, #0
 80a2f22:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2f26:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2f2a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2f2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2f32:	d31b      	bcc.n	80a2f6c <__adddf3+0x124>
 80a2f34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2f38:	d30c      	bcc.n	80a2f54 <__adddf3+0x10c>
 80a2f3a:	0849      	lsrs	r1, r1, #1
 80a2f3c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2f40:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2f44:	f104 0401 	add.w	r4, r4, #1
 80a2f48:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2f4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2f50:	f080 809a 	bcs.w	80a3088 <__adddf3+0x240>
 80a2f54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2f58:	bf08      	it	eq
 80a2f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2f5e:	f150 0000 	adcs.w	r0, r0, #0
 80a2f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2f66:	ea41 0105 	orr.w	r1, r1, r5
 80a2f6a:	bd30      	pop	{r4, r5, pc}
 80a2f6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2f70:	4140      	adcs	r0, r0
 80a2f72:	eb41 0101 	adc.w	r1, r1, r1
 80a2f76:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2f7a:	f1a4 0401 	sub.w	r4, r4, #1
 80a2f7e:	d1e9      	bne.n	80a2f54 <__adddf3+0x10c>
 80a2f80:	f091 0f00 	teq	r1, #0
 80a2f84:	bf04      	itt	eq
 80a2f86:	4601      	moveq	r1, r0
 80a2f88:	2000      	moveq	r0, #0
 80a2f8a:	fab1 f381 	clz	r3, r1
 80a2f8e:	bf08      	it	eq
 80a2f90:	3320      	addeq	r3, #32
 80a2f92:	f1a3 030b 	sub.w	r3, r3, #11
 80a2f96:	f1b3 0220 	subs.w	r2, r3, #32
 80a2f9a:	da0c      	bge.n	80a2fb6 <__adddf3+0x16e>
 80a2f9c:	320c      	adds	r2, #12
 80a2f9e:	dd08      	ble.n	80a2fb2 <__adddf3+0x16a>
 80a2fa0:	f102 0c14 	add.w	ip, r2, #20
 80a2fa4:	f1c2 020c 	rsb	r2, r2, #12
 80a2fa8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2fac:	fa21 f102 	lsr.w	r1, r1, r2
 80a2fb0:	e00c      	b.n	80a2fcc <__adddf3+0x184>
 80a2fb2:	f102 0214 	add.w	r2, r2, #20
 80a2fb6:	bfd8      	it	le
 80a2fb8:	f1c2 0c20 	rsble	ip, r2, #32
 80a2fbc:	fa01 f102 	lsl.w	r1, r1, r2
 80a2fc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2fc4:	bfdc      	itt	le
 80a2fc6:	ea41 010c 	orrle.w	r1, r1, ip
 80a2fca:	4090      	lslle	r0, r2
 80a2fcc:	1ae4      	subs	r4, r4, r3
 80a2fce:	bfa2      	ittt	ge
 80a2fd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2fd4:	4329      	orrge	r1, r5
 80a2fd6:	bd30      	popge	{r4, r5, pc}
 80a2fd8:	ea6f 0404 	mvn.w	r4, r4
 80a2fdc:	3c1f      	subs	r4, #31
 80a2fde:	da1c      	bge.n	80a301a <__adddf3+0x1d2>
 80a2fe0:	340c      	adds	r4, #12
 80a2fe2:	dc0e      	bgt.n	80a3002 <__adddf3+0x1ba>
 80a2fe4:	f104 0414 	add.w	r4, r4, #20
 80a2fe8:	f1c4 0220 	rsb	r2, r4, #32
 80a2fec:	fa20 f004 	lsr.w	r0, r0, r4
 80a2ff0:	fa01 f302 	lsl.w	r3, r1, r2
 80a2ff4:	ea40 0003 	orr.w	r0, r0, r3
 80a2ff8:	fa21 f304 	lsr.w	r3, r1, r4
 80a2ffc:	ea45 0103 	orr.w	r1, r5, r3
 80a3000:	bd30      	pop	{r4, r5, pc}
 80a3002:	f1c4 040c 	rsb	r4, r4, #12
 80a3006:	f1c4 0220 	rsb	r2, r4, #32
 80a300a:	fa20 f002 	lsr.w	r0, r0, r2
 80a300e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3012:	ea40 0003 	orr.w	r0, r0, r3
 80a3016:	4629      	mov	r1, r5
 80a3018:	bd30      	pop	{r4, r5, pc}
 80a301a:	fa21 f004 	lsr.w	r0, r1, r4
 80a301e:	4629      	mov	r1, r5
 80a3020:	bd30      	pop	{r4, r5, pc}
 80a3022:	f094 0f00 	teq	r4, #0
 80a3026:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a302a:	bf06      	itte	eq
 80a302c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3030:	3401      	addeq	r4, #1
 80a3032:	3d01      	subne	r5, #1
 80a3034:	e74e      	b.n	80a2ed4 <__adddf3+0x8c>
 80a3036:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a303a:	bf18      	it	ne
 80a303c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3040:	d029      	beq.n	80a3096 <__adddf3+0x24e>
 80a3042:	ea94 0f05 	teq	r4, r5
 80a3046:	bf08      	it	eq
 80a3048:	ea90 0f02 	teqeq	r0, r2
 80a304c:	d005      	beq.n	80a305a <__adddf3+0x212>
 80a304e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3052:	bf04      	itt	eq
 80a3054:	4619      	moveq	r1, r3
 80a3056:	4610      	moveq	r0, r2
 80a3058:	bd30      	pop	{r4, r5, pc}
 80a305a:	ea91 0f03 	teq	r1, r3
 80a305e:	bf1e      	ittt	ne
 80a3060:	2100      	movne	r1, #0
 80a3062:	2000      	movne	r0, #0
 80a3064:	bd30      	popne	{r4, r5, pc}
 80a3066:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a306a:	d105      	bne.n	80a3078 <__adddf3+0x230>
 80a306c:	0040      	lsls	r0, r0, #1
 80a306e:	4149      	adcs	r1, r1
 80a3070:	bf28      	it	cs
 80a3072:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3076:	bd30      	pop	{r4, r5, pc}
 80a3078:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a307c:	bf3c      	itt	cc
 80a307e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3082:	bd30      	popcc	{r4, r5, pc}
 80a3084:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3088:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a308c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3090:	f04f 0000 	mov.w	r0, #0
 80a3094:	bd30      	pop	{r4, r5, pc}
 80a3096:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a309a:	bf1a      	itte	ne
 80a309c:	4619      	movne	r1, r3
 80a309e:	4610      	movne	r0, r2
 80a30a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a30a4:	bf1c      	itt	ne
 80a30a6:	460b      	movne	r3, r1
 80a30a8:	4602      	movne	r2, r0
 80a30aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a30ae:	bf06      	itte	eq
 80a30b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a30b4:	ea91 0f03 	teqeq	r1, r3
 80a30b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a30bc:	bd30      	pop	{r4, r5, pc}
 80a30be:	bf00      	nop

080a30c0 <__aeabi_ui2d>:
 80a30c0:	f090 0f00 	teq	r0, #0
 80a30c4:	bf04      	itt	eq
 80a30c6:	2100      	moveq	r1, #0
 80a30c8:	4770      	bxeq	lr
 80a30ca:	b530      	push	{r4, r5, lr}
 80a30cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a30d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a30d4:	f04f 0500 	mov.w	r5, #0
 80a30d8:	f04f 0100 	mov.w	r1, #0
 80a30dc:	e750      	b.n	80a2f80 <__adddf3+0x138>
 80a30de:	bf00      	nop

080a30e0 <__aeabi_i2d>:
 80a30e0:	f090 0f00 	teq	r0, #0
 80a30e4:	bf04      	itt	eq
 80a30e6:	2100      	moveq	r1, #0
 80a30e8:	4770      	bxeq	lr
 80a30ea:	b530      	push	{r4, r5, lr}
 80a30ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a30f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a30f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a30f8:	bf48      	it	mi
 80a30fa:	4240      	negmi	r0, r0
 80a30fc:	f04f 0100 	mov.w	r1, #0
 80a3100:	e73e      	b.n	80a2f80 <__adddf3+0x138>
 80a3102:	bf00      	nop

080a3104 <__aeabi_f2d>:
 80a3104:	0042      	lsls	r2, r0, #1
 80a3106:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a310a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a310e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3112:	bf1f      	itttt	ne
 80a3114:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3118:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a311c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3120:	4770      	bxne	lr
 80a3122:	f092 0f00 	teq	r2, #0
 80a3126:	bf14      	ite	ne
 80a3128:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a312c:	4770      	bxeq	lr
 80a312e:	b530      	push	{r4, r5, lr}
 80a3130:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a313c:	e720      	b.n	80a2f80 <__adddf3+0x138>
 80a313e:	bf00      	nop

080a3140 <__aeabi_ul2d>:
 80a3140:	ea50 0201 	orrs.w	r2, r0, r1
 80a3144:	bf08      	it	eq
 80a3146:	4770      	bxeq	lr
 80a3148:	b530      	push	{r4, r5, lr}
 80a314a:	f04f 0500 	mov.w	r5, #0
 80a314e:	e00a      	b.n	80a3166 <__aeabi_l2d+0x16>

080a3150 <__aeabi_l2d>:
 80a3150:	ea50 0201 	orrs.w	r2, r0, r1
 80a3154:	bf08      	it	eq
 80a3156:	4770      	bxeq	lr
 80a3158:	b530      	push	{r4, r5, lr}
 80a315a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a315e:	d502      	bpl.n	80a3166 <__aeabi_l2d+0x16>
 80a3160:	4240      	negs	r0, r0
 80a3162:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3166:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a316a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a316e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3172:	f43f aedc 	beq.w	80a2f2e <__adddf3+0xe6>
 80a3176:	f04f 0203 	mov.w	r2, #3
 80a317a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a317e:	bf18      	it	ne
 80a3180:	3203      	addne	r2, #3
 80a3182:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3186:	bf18      	it	ne
 80a3188:	3203      	addne	r2, #3
 80a318a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a318e:	f1c2 0320 	rsb	r3, r2, #32
 80a3192:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3196:	fa20 f002 	lsr.w	r0, r0, r2
 80a319a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a319e:	ea40 000e 	orr.w	r0, r0, lr
 80a31a2:	fa21 f102 	lsr.w	r1, r1, r2
 80a31a6:	4414      	add	r4, r2
 80a31a8:	e6c1      	b.n	80a2f2e <__adddf3+0xe6>
 80a31aa:	bf00      	nop

080a31ac <__aeabi_dmul>:
 80a31ac:	b570      	push	{r4, r5, r6, lr}
 80a31ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a31b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a31b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a31ba:	bf1d      	ittte	ne
 80a31bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a31c0:	ea94 0f0c 	teqne	r4, ip
 80a31c4:	ea95 0f0c 	teqne	r5, ip
 80a31c8:	f000 f8de 	bleq	80a3388 <__aeabi_dmul+0x1dc>
 80a31cc:	442c      	add	r4, r5
 80a31ce:	ea81 0603 	eor.w	r6, r1, r3
 80a31d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a31d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a31da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a31de:	bf18      	it	ne
 80a31e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a31e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a31e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a31ec:	d038      	beq.n	80a3260 <__aeabi_dmul+0xb4>
 80a31ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80a31f2:	f04f 0500 	mov.w	r5, #0
 80a31f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a31fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a31fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3202:	f04f 0600 	mov.w	r6, #0
 80a3206:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a320a:	f09c 0f00 	teq	ip, #0
 80a320e:	bf18      	it	ne
 80a3210:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3214:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3218:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a321c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3220:	d204      	bcs.n	80a322c <__aeabi_dmul+0x80>
 80a3222:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3226:	416d      	adcs	r5, r5
 80a3228:	eb46 0606 	adc.w	r6, r6, r6
 80a322c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3230:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3234:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3238:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a323c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3240:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3244:	bf88      	it	hi
 80a3246:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a324a:	d81e      	bhi.n	80a328a <__aeabi_dmul+0xde>
 80a324c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3250:	bf08      	it	eq
 80a3252:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3256:	f150 0000 	adcs.w	r0, r0, #0
 80a325a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a325e:	bd70      	pop	{r4, r5, r6, pc}
 80a3260:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3264:	ea46 0101 	orr.w	r1, r6, r1
 80a3268:	ea40 0002 	orr.w	r0, r0, r2
 80a326c:	ea81 0103 	eor.w	r1, r1, r3
 80a3270:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3274:	bfc2      	ittt	gt
 80a3276:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a327a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a327e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3284:	f04f 0e00 	mov.w	lr, #0
 80a3288:	3c01      	subs	r4, #1
 80a328a:	f300 80ab 	bgt.w	80a33e4 <__aeabi_dmul+0x238>
 80a328e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3292:	bfde      	ittt	le
 80a3294:	2000      	movle	r0, #0
 80a3296:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a329a:	bd70      	pople	{r4, r5, r6, pc}
 80a329c:	f1c4 0400 	rsb	r4, r4, #0
 80a32a0:	3c20      	subs	r4, #32
 80a32a2:	da35      	bge.n	80a3310 <__aeabi_dmul+0x164>
 80a32a4:	340c      	adds	r4, #12
 80a32a6:	dc1b      	bgt.n	80a32e0 <__aeabi_dmul+0x134>
 80a32a8:	f104 0414 	add.w	r4, r4, #20
 80a32ac:	f1c4 0520 	rsb	r5, r4, #32
 80a32b0:	fa00 f305 	lsl.w	r3, r0, r5
 80a32b4:	fa20 f004 	lsr.w	r0, r0, r4
 80a32b8:	fa01 f205 	lsl.w	r2, r1, r5
 80a32bc:	ea40 0002 	orr.w	r0, r0, r2
 80a32c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a32c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a32c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a32cc:	fa21 f604 	lsr.w	r6, r1, r4
 80a32d0:	eb42 0106 	adc.w	r1, r2, r6
 80a32d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a32d8:	bf08      	it	eq
 80a32da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a32de:	bd70      	pop	{r4, r5, r6, pc}
 80a32e0:	f1c4 040c 	rsb	r4, r4, #12
 80a32e4:	f1c4 0520 	rsb	r5, r4, #32
 80a32e8:	fa00 f304 	lsl.w	r3, r0, r4
 80a32ec:	fa20 f005 	lsr.w	r0, r0, r5
 80a32f0:	fa01 f204 	lsl.w	r2, r1, r4
 80a32f4:	ea40 0002 	orr.w	r0, r0, r2
 80a32f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a32fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3300:	f141 0100 	adc.w	r1, r1, #0
 80a3304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3308:	bf08      	it	eq
 80a330a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a330e:	bd70      	pop	{r4, r5, r6, pc}
 80a3310:	f1c4 0520 	rsb	r5, r4, #32
 80a3314:	fa00 f205 	lsl.w	r2, r0, r5
 80a3318:	ea4e 0e02 	orr.w	lr, lr, r2
 80a331c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3320:	fa01 f205 	lsl.w	r2, r1, r5
 80a3324:	ea43 0302 	orr.w	r3, r3, r2
 80a3328:	fa21 f004 	lsr.w	r0, r1, r4
 80a332c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3330:	fa21 f204 	lsr.w	r2, r1, r4
 80a3334:	ea20 0002 	bic.w	r0, r0, r2
 80a3338:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a333c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3340:	bf08      	it	eq
 80a3342:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3346:	bd70      	pop	{r4, r5, r6, pc}
 80a3348:	f094 0f00 	teq	r4, #0
 80a334c:	d10f      	bne.n	80a336e <__aeabi_dmul+0x1c2>
 80a334e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3352:	0040      	lsls	r0, r0, #1
 80a3354:	eb41 0101 	adc.w	r1, r1, r1
 80a3358:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a335c:	bf08      	it	eq
 80a335e:	3c01      	subeq	r4, #1
 80a3360:	d0f7      	beq.n	80a3352 <__aeabi_dmul+0x1a6>
 80a3362:	ea41 0106 	orr.w	r1, r1, r6
 80a3366:	f095 0f00 	teq	r5, #0
 80a336a:	bf18      	it	ne
 80a336c:	4770      	bxne	lr
 80a336e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3372:	0052      	lsls	r2, r2, #1
 80a3374:	eb43 0303 	adc.w	r3, r3, r3
 80a3378:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a337c:	bf08      	it	eq
 80a337e:	3d01      	subeq	r5, #1
 80a3380:	d0f7      	beq.n	80a3372 <__aeabi_dmul+0x1c6>
 80a3382:	ea43 0306 	orr.w	r3, r3, r6
 80a3386:	4770      	bx	lr
 80a3388:	ea94 0f0c 	teq	r4, ip
 80a338c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3390:	bf18      	it	ne
 80a3392:	ea95 0f0c 	teqne	r5, ip
 80a3396:	d00c      	beq.n	80a33b2 <__aeabi_dmul+0x206>
 80a3398:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a339c:	bf18      	it	ne
 80a339e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a33a2:	d1d1      	bne.n	80a3348 <__aeabi_dmul+0x19c>
 80a33a4:	ea81 0103 	eor.w	r1, r1, r3
 80a33a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a33ac:	f04f 0000 	mov.w	r0, #0
 80a33b0:	bd70      	pop	{r4, r5, r6, pc}
 80a33b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a33b6:	bf06      	itte	eq
 80a33b8:	4610      	moveq	r0, r2
 80a33ba:	4619      	moveq	r1, r3
 80a33bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a33c0:	d019      	beq.n	80a33f6 <__aeabi_dmul+0x24a>
 80a33c2:	ea94 0f0c 	teq	r4, ip
 80a33c6:	d102      	bne.n	80a33ce <__aeabi_dmul+0x222>
 80a33c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a33cc:	d113      	bne.n	80a33f6 <__aeabi_dmul+0x24a>
 80a33ce:	ea95 0f0c 	teq	r5, ip
 80a33d2:	d105      	bne.n	80a33e0 <__aeabi_dmul+0x234>
 80a33d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a33d8:	bf1c      	itt	ne
 80a33da:	4610      	movne	r0, r2
 80a33dc:	4619      	movne	r1, r3
 80a33de:	d10a      	bne.n	80a33f6 <__aeabi_dmul+0x24a>
 80a33e0:	ea81 0103 	eor.w	r1, r1, r3
 80a33e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a33e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a33ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a33f0:	f04f 0000 	mov.w	r0, #0
 80a33f4:	bd70      	pop	{r4, r5, r6, pc}
 80a33f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a33fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a33fe:	bd70      	pop	{r4, r5, r6, pc}

080a3400 <__aeabi_ddiv>:
 80a3400:	b570      	push	{r4, r5, r6, lr}
 80a3402:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3406:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a340a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a340e:	bf1d      	ittte	ne
 80a3410:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3414:	ea94 0f0c 	teqne	r4, ip
 80a3418:	ea95 0f0c 	teqne	r5, ip
 80a341c:	f000 f8a7 	bleq	80a356e <__aeabi_ddiv+0x16e>
 80a3420:	eba4 0405 	sub.w	r4, r4, r5
 80a3424:	ea81 0e03 	eor.w	lr, r1, r3
 80a3428:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a342c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3430:	f000 8088 	beq.w	80a3544 <__aeabi_ddiv+0x144>
 80a3434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3438:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a343c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3440:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3444:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3448:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a344c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3450:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3454:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3458:	429d      	cmp	r5, r3
 80a345a:	bf08      	it	eq
 80a345c:	4296      	cmpeq	r6, r2
 80a345e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3462:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3466:	d202      	bcs.n	80a346e <__aeabi_ddiv+0x6e>
 80a3468:	085b      	lsrs	r3, r3, #1
 80a346a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a346e:	1ab6      	subs	r6, r6, r2
 80a3470:	eb65 0503 	sbc.w	r5, r5, r3
 80a3474:	085b      	lsrs	r3, r3, #1
 80a3476:	ea4f 0232 	mov.w	r2, r2, rrx
 80a347a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a347e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3482:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3486:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a348a:	bf22      	ittt	cs
 80a348c:	1ab6      	subcs	r6, r6, r2
 80a348e:	4675      	movcs	r5, lr
 80a3490:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3494:	085b      	lsrs	r3, r3, #1
 80a3496:	ea4f 0232 	mov.w	r2, r2, rrx
 80a349a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a349e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a34a2:	bf22      	ittt	cs
 80a34a4:	1ab6      	subcs	r6, r6, r2
 80a34a6:	4675      	movcs	r5, lr
 80a34a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a34ac:	085b      	lsrs	r3, r3, #1
 80a34ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a34b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a34b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a34ba:	bf22      	ittt	cs
 80a34bc:	1ab6      	subcs	r6, r6, r2
 80a34be:	4675      	movcs	r5, lr
 80a34c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a34c4:	085b      	lsrs	r3, r3, #1
 80a34c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a34ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a34ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a34d2:	bf22      	ittt	cs
 80a34d4:	1ab6      	subcs	r6, r6, r2
 80a34d6:	4675      	movcs	r5, lr
 80a34d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a34dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a34e0:	d018      	beq.n	80a3514 <__aeabi_ddiv+0x114>
 80a34e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a34e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a34ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a34ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a34f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a34f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a34fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a34fe:	d1c0      	bne.n	80a3482 <__aeabi_ddiv+0x82>
 80a3500:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3504:	d10b      	bne.n	80a351e <__aeabi_ddiv+0x11e>
 80a3506:	ea41 0100 	orr.w	r1, r1, r0
 80a350a:	f04f 0000 	mov.w	r0, #0
 80a350e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3512:	e7b6      	b.n	80a3482 <__aeabi_ddiv+0x82>
 80a3514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3518:	bf04      	itt	eq
 80a351a:	4301      	orreq	r1, r0
 80a351c:	2000      	moveq	r0, #0
 80a351e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3522:	bf88      	it	hi
 80a3524:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3528:	f63f aeaf 	bhi.w	80a328a <__aeabi_dmul+0xde>
 80a352c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3530:	bf04      	itt	eq
 80a3532:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a353a:	f150 0000 	adcs.w	r0, r0, #0
 80a353e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3542:	bd70      	pop	{r4, r5, r6, pc}
 80a3544:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3548:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a354c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3550:	bfc2      	ittt	gt
 80a3552:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3556:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a355a:	bd70      	popgt	{r4, r5, r6, pc}
 80a355c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3560:	f04f 0e00 	mov.w	lr, #0
 80a3564:	3c01      	subs	r4, #1
 80a3566:	e690      	b.n	80a328a <__aeabi_dmul+0xde>
 80a3568:	ea45 0e06 	orr.w	lr, r5, r6
 80a356c:	e68d      	b.n	80a328a <__aeabi_dmul+0xde>
 80a356e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3572:	ea94 0f0c 	teq	r4, ip
 80a3576:	bf08      	it	eq
 80a3578:	ea95 0f0c 	teqeq	r5, ip
 80a357c:	f43f af3b 	beq.w	80a33f6 <__aeabi_dmul+0x24a>
 80a3580:	ea94 0f0c 	teq	r4, ip
 80a3584:	d10a      	bne.n	80a359c <__aeabi_ddiv+0x19c>
 80a3586:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a358a:	f47f af34 	bne.w	80a33f6 <__aeabi_dmul+0x24a>
 80a358e:	ea95 0f0c 	teq	r5, ip
 80a3592:	f47f af25 	bne.w	80a33e0 <__aeabi_dmul+0x234>
 80a3596:	4610      	mov	r0, r2
 80a3598:	4619      	mov	r1, r3
 80a359a:	e72c      	b.n	80a33f6 <__aeabi_dmul+0x24a>
 80a359c:	ea95 0f0c 	teq	r5, ip
 80a35a0:	d106      	bne.n	80a35b0 <__aeabi_ddiv+0x1b0>
 80a35a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a35a6:	f43f aefd 	beq.w	80a33a4 <__aeabi_dmul+0x1f8>
 80a35aa:	4610      	mov	r0, r2
 80a35ac:	4619      	mov	r1, r3
 80a35ae:	e722      	b.n	80a33f6 <__aeabi_dmul+0x24a>
 80a35b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a35b4:	bf18      	it	ne
 80a35b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a35ba:	f47f aec5 	bne.w	80a3348 <__aeabi_dmul+0x19c>
 80a35be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a35c2:	f47f af0d 	bne.w	80a33e0 <__aeabi_dmul+0x234>
 80a35c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a35ca:	f47f aeeb 	bne.w	80a33a4 <__aeabi_dmul+0x1f8>
 80a35ce:	e712      	b.n	80a33f6 <__aeabi_dmul+0x24a>

080a35d0 <__gedf2>:
 80a35d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a35d4:	e006      	b.n	80a35e4 <__cmpdf2+0x4>
 80a35d6:	bf00      	nop

080a35d8 <__ledf2>:
 80a35d8:	f04f 0c01 	mov.w	ip, #1
 80a35dc:	e002      	b.n	80a35e4 <__cmpdf2+0x4>
 80a35de:	bf00      	nop

080a35e0 <__cmpdf2>:
 80a35e0:	f04f 0c01 	mov.w	ip, #1
 80a35e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a35e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a35ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a35f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a35f4:	bf18      	it	ne
 80a35f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a35fa:	d01b      	beq.n	80a3634 <__cmpdf2+0x54>
 80a35fc:	b001      	add	sp, #4
 80a35fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3602:	bf0c      	ite	eq
 80a3604:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3608:	ea91 0f03 	teqne	r1, r3
 80a360c:	bf02      	ittt	eq
 80a360e:	ea90 0f02 	teqeq	r0, r2
 80a3612:	2000      	moveq	r0, #0
 80a3614:	4770      	bxeq	lr
 80a3616:	f110 0f00 	cmn.w	r0, #0
 80a361a:	ea91 0f03 	teq	r1, r3
 80a361e:	bf58      	it	pl
 80a3620:	4299      	cmppl	r1, r3
 80a3622:	bf08      	it	eq
 80a3624:	4290      	cmpeq	r0, r2
 80a3626:	bf2c      	ite	cs
 80a3628:	17d8      	asrcs	r0, r3, #31
 80a362a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a362e:	f040 0001 	orr.w	r0, r0, #1
 80a3632:	4770      	bx	lr
 80a3634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a363c:	d102      	bne.n	80a3644 <__cmpdf2+0x64>
 80a363e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3642:	d107      	bne.n	80a3654 <__cmpdf2+0x74>
 80a3644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a364c:	d1d6      	bne.n	80a35fc <__cmpdf2+0x1c>
 80a364e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3652:	d0d3      	beq.n	80a35fc <__cmpdf2+0x1c>
 80a3654:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3658:	4770      	bx	lr
 80a365a:	bf00      	nop

080a365c <__aeabi_cdrcmple>:
 80a365c:	4684      	mov	ip, r0
 80a365e:	4610      	mov	r0, r2
 80a3660:	4662      	mov	r2, ip
 80a3662:	468c      	mov	ip, r1
 80a3664:	4619      	mov	r1, r3
 80a3666:	4663      	mov	r3, ip
 80a3668:	e000      	b.n	80a366c <__aeabi_cdcmpeq>
 80a366a:	bf00      	nop

080a366c <__aeabi_cdcmpeq>:
 80a366c:	b501      	push	{r0, lr}
 80a366e:	f7ff ffb7 	bl	80a35e0 <__cmpdf2>
 80a3672:	2800      	cmp	r0, #0
 80a3674:	bf48      	it	mi
 80a3676:	f110 0f00 	cmnmi.w	r0, #0
 80a367a:	bd01      	pop	{r0, pc}

080a367c <__aeabi_dcmpeq>:
 80a367c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3680:	f7ff fff4 	bl	80a366c <__aeabi_cdcmpeq>
 80a3684:	bf0c      	ite	eq
 80a3686:	2001      	moveq	r0, #1
 80a3688:	2000      	movne	r0, #0
 80a368a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a368e:	bf00      	nop

080a3690 <__aeabi_dcmplt>:
 80a3690:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3694:	f7ff ffea 	bl	80a366c <__aeabi_cdcmpeq>
 80a3698:	bf34      	ite	cc
 80a369a:	2001      	movcc	r0, #1
 80a369c:	2000      	movcs	r0, #0
 80a369e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36a2:	bf00      	nop

080a36a4 <__aeabi_dcmple>:
 80a36a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36a8:	f7ff ffe0 	bl	80a366c <__aeabi_cdcmpeq>
 80a36ac:	bf94      	ite	ls
 80a36ae:	2001      	movls	r0, #1
 80a36b0:	2000      	movhi	r0, #0
 80a36b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36b6:	bf00      	nop

080a36b8 <__aeabi_dcmpge>:
 80a36b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36bc:	f7ff ffce 	bl	80a365c <__aeabi_cdrcmple>
 80a36c0:	bf94      	ite	ls
 80a36c2:	2001      	movls	r0, #1
 80a36c4:	2000      	movhi	r0, #0
 80a36c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36ca:	bf00      	nop

080a36cc <__aeabi_dcmpgt>:
 80a36cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a36d0:	f7ff ffc4 	bl	80a365c <__aeabi_cdrcmple>
 80a36d4:	bf34      	ite	cc
 80a36d6:	2001      	movcc	r0, #1
 80a36d8:	2000      	movcs	r0, #0
 80a36da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a36de:	bf00      	nop

080a36e0 <__aeabi_d2uiz>:
 80a36e0:	004a      	lsls	r2, r1, #1
 80a36e2:	d211      	bcs.n	80a3708 <__aeabi_d2uiz+0x28>
 80a36e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a36e8:	d211      	bcs.n	80a370e <__aeabi_d2uiz+0x2e>
 80a36ea:	d50d      	bpl.n	80a3708 <__aeabi_d2uiz+0x28>
 80a36ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a36f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a36f4:	d40e      	bmi.n	80a3714 <__aeabi_d2uiz+0x34>
 80a36f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a36fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a36fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3702:	fa23 f002 	lsr.w	r0, r3, r2
 80a3706:	4770      	bx	lr
 80a3708:	f04f 0000 	mov.w	r0, #0
 80a370c:	4770      	bx	lr
 80a370e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3712:	d102      	bne.n	80a371a <__aeabi_d2uiz+0x3a>
 80a3714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3718:	4770      	bx	lr
 80a371a:	f04f 0000 	mov.w	r0, #0
 80a371e:	4770      	bx	lr

080a3720 <__aeabi_d2f>:
 80a3720:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3724:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3728:	bf24      	itt	cs
 80a372a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a372e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3732:	d90d      	bls.n	80a3750 <__aeabi_d2f+0x30>
 80a3734:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3738:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a373c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3740:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3744:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3748:	bf08      	it	eq
 80a374a:	f020 0001 	biceq.w	r0, r0, #1
 80a374e:	4770      	bx	lr
 80a3750:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3754:	d121      	bne.n	80a379a <__aeabi_d2f+0x7a>
 80a3756:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a375a:	bfbc      	itt	lt
 80a375c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3760:	4770      	bxlt	lr
 80a3762:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3766:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a376a:	f1c2 0218 	rsb	r2, r2, #24
 80a376e:	f1c2 0c20 	rsb	ip, r2, #32
 80a3772:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3776:	fa20 f002 	lsr.w	r0, r0, r2
 80a377a:	bf18      	it	ne
 80a377c:	f040 0001 	orrne.w	r0, r0, #1
 80a3780:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3784:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3788:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a378c:	ea40 000c 	orr.w	r0, r0, ip
 80a3790:	fa23 f302 	lsr.w	r3, r3, r2
 80a3794:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3798:	e7cc      	b.n	80a3734 <__aeabi_d2f+0x14>
 80a379a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a379e:	d107      	bne.n	80a37b0 <__aeabi_d2f+0x90>
 80a37a0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a37a4:	bf1e      	ittt	ne
 80a37a6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a37aa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a37ae:	4770      	bxne	lr
 80a37b0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a37b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a37b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a37bc:	4770      	bx	lr
 80a37be:	bf00      	nop

080a37c0 <__aeabi_frsub>:
 80a37c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a37c4:	e002      	b.n	80a37cc <__addsf3>
 80a37c6:	bf00      	nop

080a37c8 <__aeabi_fsub>:
 80a37c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a37cc <__addsf3>:
 80a37cc:	0042      	lsls	r2, r0, #1
 80a37ce:	bf1f      	itttt	ne
 80a37d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a37d4:	ea92 0f03 	teqne	r2, r3
 80a37d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a37dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a37e0:	d06a      	beq.n	80a38b8 <__addsf3+0xec>
 80a37e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a37e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a37ea:	bfc1      	itttt	gt
 80a37ec:	18d2      	addgt	r2, r2, r3
 80a37ee:	4041      	eorgt	r1, r0
 80a37f0:	4048      	eorgt	r0, r1
 80a37f2:	4041      	eorgt	r1, r0
 80a37f4:	bfb8      	it	lt
 80a37f6:	425b      	neglt	r3, r3
 80a37f8:	2b19      	cmp	r3, #25
 80a37fa:	bf88      	it	hi
 80a37fc:	4770      	bxhi	lr
 80a37fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3802:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3806:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a380a:	bf18      	it	ne
 80a380c:	4240      	negne	r0, r0
 80a380e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3812:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3816:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a381a:	bf18      	it	ne
 80a381c:	4249      	negne	r1, r1
 80a381e:	ea92 0f03 	teq	r2, r3
 80a3822:	d03f      	beq.n	80a38a4 <__addsf3+0xd8>
 80a3824:	f1a2 0201 	sub.w	r2, r2, #1
 80a3828:	fa41 fc03 	asr.w	ip, r1, r3
 80a382c:	eb10 000c 	adds.w	r0, r0, ip
 80a3830:	f1c3 0320 	rsb	r3, r3, #32
 80a3834:	fa01 f103 	lsl.w	r1, r1, r3
 80a3838:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a383c:	d502      	bpl.n	80a3844 <__addsf3+0x78>
 80a383e:	4249      	negs	r1, r1
 80a3840:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3844:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3848:	d313      	bcc.n	80a3872 <__addsf3+0xa6>
 80a384a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a384e:	d306      	bcc.n	80a385e <__addsf3+0x92>
 80a3850:	0840      	lsrs	r0, r0, #1
 80a3852:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3856:	f102 0201 	add.w	r2, r2, #1
 80a385a:	2afe      	cmp	r2, #254	; 0xfe
 80a385c:	d251      	bcs.n	80a3902 <__addsf3+0x136>
 80a385e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3862:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3866:	bf08      	it	eq
 80a3868:	f020 0001 	biceq.w	r0, r0, #1
 80a386c:	ea40 0003 	orr.w	r0, r0, r3
 80a3870:	4770      	bx	lr
 80a3872:	0049      	lsls	r1, r1, #1
 80a3874:	eb40 0000 	adc.w	r0, r0, r0
 80a3878:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a387c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3880:	d1ed      	bne.n	80a385e <__addsf3+0x92>
 80a3882:	fab0 fc80 	clz	ip, r0
 80a3886:	f1ac 0c08 	sub.w	ip, ip, #8
 80a388a:	ebb2 020c 	subs.w	r2, r2, ip
 80a388e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3892:	bfaa      	itet	ge
 80a3894:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3898:	4252      	neglt	r2, r2
 80a389a:	4318      	orrge	r0, r3
 80a389c:	bfbc      	itt	lt
 80a389e:	40d0      	lsrlt	r0, r2
 80a38a0:	4318      	orrlt	r0, r3
 80a38a2:	4770      	bx	lr
 80a38a4:	f092 0f00 	teq	r2, #0
 80a38a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a38ac:	bf06      	itte	eq
 80a38ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a38b2:	3201      	addeq	r2, #1
 80a38b4:	3b01      	subne	r3, #1
 80a38b6:	e7b5      	b.n	80a3824 <__addsf3+0x58>
 80a38b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a38bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a38c0:	bf18      	it	ne
 80a38c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a38c6:	d021      	beq.n	80a390c <__addsf3+0x140>
 80a38c8:	ea92 0f03 	teq	r2, r3
 80a38cc:	d004      	beq.n	80a38d8 <__addsf3+0x10c>
 80a38ce:	f092 0f00 	teq	r2, #0
 80a38d2:	bf08      	it	eq
 80a38d4:	4608      	moveq	r0, r1
 80a38d6:	4770      	bx	lr
 80a38d8:	ea90 0f01 	teq	r0, r1
 80a38dc:	bf1c      	itt	ne
 80a38de:	2000      	movne	r0, #0
 80a38e0:	4770      	bxne	lr
 80a38e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a38e6:	d104      	bne.n	80a38f2 <__addsf3+0x126>
 80a38e8:	0040      	lsls	r0, r0, #1
 80a38ea:	bf28      	it	cs
 80a38ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a38f0:	4770      	bx	lr
 80a38f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a38f6:	bf3c      	itt	cc
 80a38f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a38fc:	4770      	bxcc	lr
 80a38fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3902:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a390a:	4770      	bx	lr
 80a390c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3910:	bf16      	itet	ne
 80a3912:	4608      	movne	r0, r1
 80a3914:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3918:	4601      	movne	r1, r0
 80a391a:	0242      	lsls	r2, r0, #9
 80a391c:	bf06      	itte	eq
 80a391e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3922:	ea90 0f01 	teqeq	r0, r1
 80a3926:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a392a:	4770      	bx	lr

080a392c <__aeabi_ui2f>:
 80a392c:	f04f 0300 	mov.w	r3, #0
 80a3930:	e004      	b.n	80a393c <__aeabi_i2f+0x8>
 80a3932:	bf00      	nop

080a3934 <__aeabi_i2f>:
 80a3934:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3938:	bf48      	it	mi
 80a393a:	4240      	negmi	r0, r0
 80a393c:	ea5f 0c00 	movs.w	ip, r0
 80a3940:	bf08      	it	eq
 80a3942:	4770      	bxeq	lr
 80a3944:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3948:	4601      	mov	r1, r0
 80a394a:	f04f 0000 	mov.w	r0, #0
 80a394e:	e01c      	b.n	80a398a <__aeabi_l2f+0x2a>

080a3950 <__aeabi_ul2f>:
 80a3950:	ea50 0201 	orrs.w	r2, r0, r1
 80a3954:	bf08      	it	eq
 80a3956:	4770      	bxeq	lr
 80a3958:	f04f 0300 	mov.w	r3, #0
 80a395c:	e00a      	b.n	80a3974 <__aeabi_l2f+0x14>
 80a395e:	bf00      	nop

080a3960 <__aeabi_l2f>:
 80a3960:	ea50 0201 	orrs.w	r2, r0, r1
 80a3964:	bf08      	it	eq
 80a3966:	4770      	bxeq	lr
 80a3968:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a396c:	d502      	bpl.n	80a3974 <__aeabi_l2f+0x14>
 80a396e:	4240      	negs	r0, r0
 80a3970:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3974:	ea5f 0c01 	movs.w	ip, r1
 80a3978:	bf02      	ittt	eq
 80a397a:	4684      	moveq	ip, r0
 80a397c:	4601      	moveq	r1, r0
 80a397e:	2000      	moveq	r0, #0
 80a3980:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3984:	bf08      	it	eq
 80a3986:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a398a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a398e:	fabc f28c 	clz	r2, ip
 80a3992:	3a08      	subs	r2, #8
 80a3994:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3998:	db10      	blt.n	80a39bc <__aeabi_l2f+0x5c>
 80a399a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a399e:	4463      	add	r3, ip
 80a39a0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a39a4:	f1c2 0220 	rsb	r2, r2, #32
 80a39a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a39ac:	fa20 f202 	lsr.w	r2, r0, r2
 80a39b0:	eb43 0002 	adc.w	r0, r3, r2
 80a39b4:	bf08      	it	eq
 80a39b6:	f020 0001 	biceq.w	r0, r0, #1
 80a39ba:	4770      	bx	lr
 80a39bc:	f102 0220 	add.w	r2, r2, #32
 80a39c0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a39c4:	f1c2 0220 	rsb	r2, r2, #32
 80a39c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a39cc:	fa21 f202 	lsr.w	r2, r1, r2
 80a39d0:	eb43 0002 	adc.w	r0, r3, r2
 80a39d4:	bf08      	it	eq
 80a39d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a39da:	4770      	bx	lr

080a39dc <__aeabi_fmul>:
 80a39dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a39e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a39e4:	bf1e      	ittt	ne
 80a39e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a39ea:	ea92 0f0c 	teqne	r2, ip
 80a39ee:	ea93 0f0c 	teqne	r3, ip
 80a39f2:	d06f      	beq.n	80a3ad4 <__aeabi_fmul+0xf8>
 80a39f4:	441a      	add	r2, r3
 80a39f6:	ea80 0c01 	eor.w	ip, r0, r1
 80a39fa:	0240      	lsls	r0, r0, #9
 80a39fc:	bf18      	it	ne
 80a39fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3a02:	d01e      	beq.n	80a3a42 <__aeabi_fmul+0x66>
 80a3a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3a08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3a0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3a10:	fba0 3101 	umull	r3, r1, r0, r1
 80a3a14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3a18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3a1c:	bf3e      	ittt	cc
 80a3a1e:	0049      	lslcc	r1, r1, #1
 80a3a20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3a24:	005b      	lslcc	r3, r3, #1
 80a3a26:	ea40 0001 	orr.w	r0, r0, r1
 80a3a2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3a2e:	2afd      	cmp	r2, #253	; 0xfd
 80a3a30:	d81d      	bhi.n	80a3a6e <__aeabi_fmul+0x92>
 80a3a32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3a36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3a3a:	bf08      	it	eq
 80a3a3c:	f020 0001 	biceq.w	r0, r0, #1
 80a3a40:	4770      	bx	lr
 80a3a42:	f090 0f00 	teq	r0, #0
 80a3a46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3a4a:	bf08      	it	eq
 80a3a4c:	0249      	lsleq	r1, r1, #9
 80a3a4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3a52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3a56:	3a7f      	subs	r2, #127	; 0x7f
 80a3a58:	bfc2      	ittt	gt
 80a3a5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3a5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3a62:	4770      	bxgt	lr
 80a3a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a68:	f04f 0300 	mov.w	r3, #0
 80a3a6c:	3a01      	subs	r2, #1
 80a3a6e:	dc5d      	bgt.n	80a3b2c <__aeabi_fmul+0x150>
 80a3a70:	f112 0f19 	cmn.w	r2, #25
 80a3a74:	bfdc      	itt	le
 80a3a76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3a7a:	4770      	bxle	lr
 80a3a7c:	f1c2 0200 	rsb	r2, r2, #0
 80a3a80:	0041      	lsls	r1, r0, #1
 80a3a82:	fa21 f102 	lsr.w	r1, r1, r2
 80a3a86:	f1c2 0220 	rsb	r2, r2, #32
 80a3a8a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3a8e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3a92:	f140 0000 	adc.w	r0, r0, #0
 80a3a96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3a9a:	bf08      	it	eq
 80a3a9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3aa0:	4770      	bx	lr
 80a3aa2:	f092 0f00 	teq	r2, #0
 80a3aa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3aaa:	bf02      	ittt	eq
 80a3aac:	0040      	lsleq	r0, r0, #1
 80a3aae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3ab2:	3a01      	subeq	r2, #1
 80a3ab4:	d0f9      	beq.n	80a3aaa <__aeabi_fmul+0xce>
 80a3ab6:	ea40 000c 	orr.w	r0, r0, ip
 80a3aba:	f093 0f00 	teq	r3, #0
 80a3abe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3ac2:	bf02      	ittt	eq
 80a3ac4:	0049      	lsleq	r1, r1, #1
 80a3ac6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3aca:	3b01      	subeq	r3, #1
 80a3acc:	d0f9      	beq.n	80a3ac2 <__aeabi_fmul+0xe6>
 80a3ace:	ea41 010c 	orr.w	r1, r1, ip
 80a3ad2:	e78f      	b.n	80a39f4 <__aeabi_fmul+0x18>
 80a3ad4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3ad8:	ea92 0f0c 	teq	r2, ip
 80a3adc:	bf18      	it	ne
 80a3ade:	ea93 0f0c 	teqne	r3, ip
 80a3ae2:	d00a      	beq.n	80a3afa <__aeabi_fmul+0x11e>
 80a3ae4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3ae8:	bf18      	it	ne
 80a3aea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3aee:	d1d8      	bne.n	80a3aa2 <__aeabi_fmul+0xc6>
 80a3af0:	ea80 0001 	eor.w	r0, r0, r1
 80a3af4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3af8:	4770      	bx	lr
 80a3afa:	f090 0f00 	teq	r0, #0
 80a3afe:	bf17      	itett	ne
 80a3b00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3b04:	4608      	moveq	r0, r1
 80a3b06:	f091 0f00 	teqne	r1, #0
 80a3b0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3b0e:	d014      	beq.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3b10:	ea92 0f0c 	teq	r2, ip
 80a3b14:	d101      	bne.n	80a3b1a <__aeabi_fmul+0x13e>
 80a3b16:	0242      	lsls	r2, r0, #9
 80a3b18:	d10f      	bne.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3b1a:	ea93 0f0c 	teq	r3, ip
 80a3b1e:	d103      	bne.n	80a3b28 <__aeabi_fmul+0x14c>
 80a3b20:	024b      	lsls	r3, r1, #9
 80a3b22:	bf18      	it	ne
 80a3b24:	4608      	movne	r0, r1
 80a3b26:	d108      	bne.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3b28:	ea80 0001 	eor.w	r0, r0, r1
 80a3b2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3b38:	4770      	bx	lr
 80a3b3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3b3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3b42:	4770      	bx	lr

080a3b44 <__aeabi_fdiv>:
 80a3b44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3b48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3b4c:	bf1e      	ittt	ne
 80a3b4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3b52:	ea92 0f0c 	teqne	r2, ip
 80a3b56:	ea93 0f0c 	teqne	r3, ip
 80a3b5a:	d069      	beq.n	80a3c30 <__aeabi_fdiv+0xec>
 80a3b5c:	eba2 0203 	sub.w	r2, r2, r3
 80a3b60:	ea80 0c01 	eor.w	ip, r0, r1
 80a3b64:	0249      	lsls	r1, r1, #9
 80a3b66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3b6a:	d037      	beq.n	80a3bdc <__aeabi_fdiv+0x98>
 80a3b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3b70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3b74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3b78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3b7c:	428b      	cmp	r3, r1
 80a3b7e:	bf38      	it	cc
 80a3b80:	005b      	lslcc	r3, r3, #1
 80a3b82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3b86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3b8a:	428b      	cmp	r3, r1
 80a3b8c:	bf24      	itt	cs
 80a3b8e:	1a5b      	subcs	r3, r3, r1
 80a3b90:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3b94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3b98:	bf24      	itt	cs
 80a3b9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3b9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3ba2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3ba6:	bf24      	itt	cs
 80a3ba8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3bb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3bb4:	bf24      	itt	cs
 80a3bb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3bba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3bbe:	011b      	lsls	r3, r3, #4
 80a3bc0:	bf18      	it	ne
 80a3bc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3bc6:	d1e0      	bne.n	80a3b8a <__aeabi_fdiv+0x46>
 80a3bc8:	2afd      	cmp	r2, #253	; 0xfd
 80a3bca:	f63f af50 	bhi.w	80a3a6e <__aeabi_fmul+0x92>
 80a3bce:	428b      	cmp	r3, r1
 80a3bd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3bd4:	bf08      	it	eq
 80a3bd6:	f020 0001 	biceq.w	r0, r0, #1
 80a3bda:	4770      	bx	lr
 80a3bdc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3be0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3be4:	327f      	adds	r2, #127	; 0x7f
 80a3be6:	bfc2      	ittt	gt
 80a3be8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3bec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3bf0:	4770      	bxgt	lr
 80a3bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3bf6:	f04f 0300 	mov.w	r3, #0
 80a3bfa:	3a01      	subs	r2, #1
 80a3bfc:	e737      	b.n	80a3a6e <__aeabi_fmul+0x92>
 80a3bfe:	f092 0f00 	teq	r2, #0
 80a3c02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3c06:	bf02      	ittt	eq
 80a3c08:	0040      	lsleq	r0, r0, #1
 80a3c0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3c0e:	3a01      	subeq	r2, #1
 80a3c10:	d0f9      	beq.n	80a3c06 <__aeabi_fdiv+0xc2>
 80a3c12:	ea40 000c 	orr.w	r0, r0, ip
 80a3c16:	f093 0f00 	teq	r3, #0
 80a3c1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3c1e:	bf02      	ittt	eq
 80a3c20:	0049      	lsleq	r1, r1, #1
 80a3c22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3c26:	3b01      	subeq	r3, #1
 80a3c28:	d0f9      	beq.n	80a3c1e <__aeabi_fdiv+0xda>
 80a3c2a:	ea41 010c 	orr.w	r1, r1, ip
 80a3c2e:	e795      	b.n	80a3b5c <__aeabi_fdiv+0x18>
 80a3c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3c34:	ea92 0f0c 	teq	r2, ip
 80a3c38:	d108      	bne.n	80a3c4c <__aeabi_fdiv+0x108>
 80a3c3a:	0242      	lsls	r2, r0, #9
 80a3c3c:	f47f af7d 	bne.w	80a3b3a <__aeabi_fmul+0x15e>
 80a3c40:	ea93 0f0c 	teq	r3, ip
 80a3c44:	f47f af70 	bne.w	80a3b28 <__aeabi_fmul+0x14c>
 80a3c48:	4608      	mov	r0, r1
 80a3c4a:	e776      	b.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3c4c:	ea93 0f0c 	teq	r3, ip
 80a3c50:	d104      	bne.n	80a3c5c <__aeabi_fdiv+0x118>
 80a3c52:	024b      	lsls	r3, r1, #9
 80a3c54:	f43f af4c 	beq.w	80a3af0 <__aeabi_fmul+0x114>
 80a3c58:	4608      	mov	r0, r1
 80a3c5a:	e76e      	b.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3c5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3c60:	bf18      	it	ne
 80a3c62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3c66:	d1ca      	bne.n	80a3bfe <__aeabi_fdiv+0xba>
 80a3c68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3c6c:	f47f af5c 	bne.w	80a3b28 <__aeabi_fmul+0x14c>
 80a3c70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3c74:	f47f af3c 	bne.w	80a3af0 <__aeabi_fmul+0x114>
 80a3c78:	e75f      	b.n	80a3b3a <__aeabi_fmul+0x15e>
 80a3c7a:	bf00      	nop

080a3c7c <__aeabi_uldivmod>:
 80a3c7c:	b953      	cbnz	r3, 80a3c94 <__aeabi_uldivmod+0x18>
 80a3c7e:	b94a      	cbnz	r2, 80a3c94 <__aeabi_uldivmod+0x18>
 80a3c80:	2900      	cmp	r1, #0
 80a3c82:	bf08      	it	eq
 80a3c84:	2800      	cmpeq	r0, #0
 80a3c86:	bf1c      	itt	ne
 80a3c88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a3c8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a3c90:	f000 b9a6 	b.w	80a3fe0 <__aeabi_idiv0>
 80a3c94:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3c9c:	f000 f82a 	bl	80a3cf4 <__udivmoddi4>
 80a3ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3ca8:	b004      	add	sp, #16
 80a3caa:	4770      	bx	lr

080a3cac <__aeabi_d2ulz>:
 80a3cac:	b5d0      	push	{r4, r6, r7, lr}
 80a3cae:	2200      	movs	r2, #0
 80a3cb0:	4b0e      	ldr	r3, [pc, #56]	; (80a3cec <__aeabi_d2ulz+0x40>)
 80a3cb2:	4606      	mov	r6, r0
 80a3cb4:	460f      	mov	r7, r1
 80a3cb6:	f7ff fa79 	bl	80a31ac <__aeabi_dmul>
 80a3cba:	f7ff fd11 	bl	80a36e0 <__aeabi_d2uiz>
 80a3cbe:	4604      	mov	r4, r0
 80a3cc0:	f7ff f9fe 	bl	80a30c0 <__aeabi_ui2d>
 80a3cc4:	2200      	movs	r2, #0
 80a3cc6:	4b0a      	ldr	r3, [pc, #40]	; (80a3cf0 <__aeabi_d2ulz+0x44>)
 80a3cc8:	f7ff fa70 	bl	80a31ac <__aeabi_dmul>
 80a3ccc:	4602      	mov	r2, r0
 80a3cce:	460b      	mov	r3, r1
 80a3cd0:	4630      	mov	r0, r6
 80a3cd2:	4639      	mov	r1, r7
 80a3cd4:	f7ff f8b6 	bl	80a2e44 <__aeabi_dsub>
 80a3cd8:	f7ff fd02 	bl	80a36e0 <__aeabi_d2uiz>
 80a3cdc:	4623      	mov	r3, r4
 80a3cde:	2200      	movs	r2, #0
 80a3ce0:	ea42 0200 	orr.w	r2, r2, r0
 80a3ce4:	4610      	mov	r0, r2
 80a3ce6:	4619      	mov	r1, r3
 80a3ce8:	bdd0      	pop	{r4, r6, r7, pc}
 80a3cea:	bf00      	nop
 80a3cec:	3df00000 	.word	0x3df00000
 80a3cf0:	41f00000 	.word	0x41f00000

080a3cf4 <__udivmoddi4>:
 80a3cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3cf8:	468c      	mov	ip, r1
 80a3cfa:	460c      	mov	r4, r1
 80a3cfc:	4605      	mov	r5, r0
 80a3cfe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3d00:	2b00      	cmp	r3, #0
 80a3d02:	d14f      	bne.n	80a3da4 <__udivmoddi4+0xb0>
 80a3d04:	428a      	cmp	r2, r1
 80a3d06:	4617      	mov	r7, r2
 80a3d08:	d96b      	bls.n	80a3de2 <__udivmoddi4+0xee>
 80a3d0a:	fab2 fe82 	clz	lr, r2
 80a3d0e:	f1be 0f00 	cmp.w	lr, #0
 80a3d12:	d00b      	beq.n	80a3d2c <__udivmoddi4+0x38>
 80a3d14:	f1ce 0520 	rsb	r5, lr, #32
 80a3d18:	fa20 f505 	lsr.w	r5, r0, r5
 80a3d1c:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3d20:	ea45 0c03 	orr.w	ip, r5, r3
 80a3d24:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3d28:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3d2c:	0c39      	lsrs	r1, r7, #16
 80a3d2e:	fbbc f0f1 	udiv	r0, ip, r1
 80a3d32:	b2ba      	uxth	r2, r7
 80a3d34:	fb01 c310 	mls	r3, r1, r0, ip
 80a3d38:	fb00 f802 	mul.w	r8, r0, r2
 80a3d3c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3d40:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3d44:	45a0      	cmp	r8, r4
 80a3d46:	d909      	bls.n	80a3d5c <__udivmoddi4+0x68>
 80a3d48:	19e4      	adds	r4, r4, r7
 80a3d4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a3d4e:	f080 8128 	bcs.w	80a3fa2 <__udivmoddi4+0x2ae>
 80a3d52:	45a0      	cmp	r8, r4
 80a3d54:	f240 8125 	bls.w	80a3fa2 <__udivmoddi4+0x2ae>
 80a3d58:	3802      	subs	r0, #2
 80a3d5a:	443c      	add	r4, r7
 80a3d5c:	ebc8 0404 	rsb	r4, r8, r4
 80a3d60:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3d64:	fb01 4c13 	mls	ip, r1, r3, r4
 80a3d68:	fb03 f202 	mul.w	r2, r3, r2
 80a3d6c:	b2ac      	uxth	r4, r5
 80a3d6e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3d72:	428a      	cmp	r2, r1
 80a3d74:	d909      	bls.n	80a3d8a <__udivmoddi4+0x96>
 80a3d76:	19c9      	adds	r1, r1, r7
 80a3d78:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a3d7c:	f080 810f 	bcs.w	80a3f9e <__udivmoddi4+0x2aa>
 80a3d80:	428a      	cmp	r2, r1
 80a3d82:	f240 810c 	bls.w	80a3f9e <__udivmoddi4+0x2aa>
 80a3d86:	3b02      	subs	r3, #2
 80a3d88:	4439      	add	r1, r7
 80a3d8a:	1a8a      	subs	r2, r1, r2
 80a3d8c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3d90:	2100      	movs	r1, #0
 80a3d92:	2e00      	cmp	r6, #0
 80a3d94:	d063      	beq.n	80a3e5e <__udivmoddi4+0x16a>
 80a3d96:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3d9a:	2300      	movs	r3, #0
 80a3d9c:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3da4:	428b      	cmp	r3, r1
 80a3da6:	d907      	bls.n	80a3db8 <__udivmoddi4+0xc4>
 80a3da8:	2e00      	cmp	r6, #0
 80a3daa:	d056      	beq.n	80a3e5a <__udivmoddi4+0x166>
 80a3dac:	2100      	movs	r1, #0
 80a3dae:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3db2:	4608      	mov	r0, r1
 80a3db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3db8:	fab3 f183 	clz	r1, r3
 80a3dbc:	2900      	cmp	r1, #0
 80a3dbe:	f040 8093 	bne.w	80a3ee8 <__udivmoddi4+0x1f4>
 80a3dc2:	42a3      	cmp	r3, r4
 80a3dc4:	d302      	bcc.n	80a3dcc <__udivmoddi4+0xd8>
 80a3dc6:	4282      	cmp	r2, r0
 80a3dc8:	f200 80fe 	bhi.w	80a3fc8 <__udivmoddi4+0x2d4>
 80a3dcc:	1a85      	subs	r5, r0, r2
 80a3dce:	eb64 0303 	sbc.w	r3, r4, r3
 80a3dd2:	469c      	mov	ip, r3
 80a3dd4:	2001      	movs	r0, #1
 80a3dd6:	2e00      	cmp	r6, #0
 80a3dd8:	d041      	beq.n	80a3e5e <__udivmoddi4+0x16a>
 80a3dda:	e886 1020 	stmia.w	r6, {r5, ip}
 80a3dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3de2:	b912      	cbnz	r2, 80a3dea <__udivmoddi4+0xf6>
 80a3de4:	2701      	movs	r7, #1
 80a3de6:	fbb7 f7f2 	udiv	r7, r7, r2
 80a3dea:	fab7 fe87 	clz	lr, r7
 80a3dee:	f1be 0f00 	cmp.w	lr, #0
 80a3df2:	d136      	bne.n	80a3e62 <__udivmoddi4+0x16e>
 80a3df4:	1be4      	subs	r4, r4, r7
 80a3df6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3dfa:	fa1f f987 	uxth.w	r9, r7
 80a3dfe:	2101      	movs	r1, #1
 80a3e00:	fbb4 f3f8 	udiv	r3, r4, r8
 80a3e04:	fb08 4413 	mls	r4, r8, r3, r4
 80a3e08:	fb09 f203 	mul.w	r2, r9, r3
 80a3e0c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3e10:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a3e14:	42a2      	cmp	r2, r4
 80a3e16:	d907      	bls.n	80a3e28 <__udivmoddi4+0x134>
 80a3e18:	19e4      	adds	r4, r4, r7
 80a3e1a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a3e1e:	d202      	bcs.n	80a3e26 <__udivmoddi4+0x132>
 80a3e20:	42a2      	cmp	r2, r4
 80a3e22:	f200 80d3 	bhi.w	80a3fcc <__udivmoddi4+0x2d8>
 80a3e26:	4603      	mov	r3, r0
 80a3e28:	1aa4      	subs	r4, r4, r2
 80a3e2a:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3e2e:	fb08 4810 	mls	r8, r8, r0, r4
 80a3e32:	fb09 f900 	mul.w	r9, r9, r0
 80a3e36:	b2ac      	uxth	r4, r5
 80a3e38:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3e3c:	4591      	cmp	r9, r2
 80a3e3e:	d907      	bls.n	80a3e50 <__udivmoddi4+0x15c>
 80a3e40:	19d2      	adds	r2, r2, r7
 80a3e42:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a3e46:	d202      	bcs.n	80a3e4e <__udivmoddi4+0x15a>
 80a3e48:	4591      	cmp	r9, r2
 80a3e4a:	f200 80ba 	bhi.w	80a3fc2 <__udivmoddi4+0x2ce>
 80a3e4e:	4620      	mov	r0, r4
 80a3e50:	ebc9 0202 	rsb	r2, r9, r2
 80a3e54:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3e58:	e79b      	b.n	80a3d92 <__udivmoddi4+0x9e>
 80a3e5a:	4631      	mov	r1, r6
 80a3e5c:	4630      	mov	r0, r6
 80a3e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e62:	fa07 f70e 	lsl.w	r7, r7, lr
 80a3e66:	f1ce 0c20 	rsb	ip, lr, #32
 80a3e6a:	fa24 f30c 	lsr.w	r3, r4, ip
 80a3e6e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3e72:	fbb3 faf8 	udiv	sl, r3, r8
 80a3e76:	fa1f f987 	uxth.w	r9, r7
 80a3e7a:	fb08 351a 	mls	r5, r8, sl, r3
 80a3e7e:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3e82:	fa04 f40e 	lsl.w	r4, r4, lr
 80a3e86:	fb0a fb09 	mul.w	fp, sl, r9
 80a3e8a:	ea4c 0c04 	orr.w	ip, ip, r4
 80a3e8e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3e92:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a3e96:	459b      	cmp	fp, r3
 80a3e98:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3e9c:	d90a      	bls.n	80a3eb4 <__udivmoddi4+0x1c0>
 80a3e9e:	19db      	adds	r3, r3, r7
 80a3ea0:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a3ea4:	f080 808b 	bcs.w	80a3fbe <__udivmoddi4+0x2ca>
 80a3ea8:	459b      	cmp	fp, r3
 80a3eaa:	f240 8088 	bls.w	80a3fbe <__udivmoddi4+0x2ca>
 80a3eae:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3eb2:	443b      	add	r3, r7
 80a3eb4:	ebcb 0303 	rsb	r3, fp, r3
 80a3eb8:	fbb3 f0f8 	udiv	r0, r3, r8
 80a3ebc:	fb08 3310 	mls	r3, r8, r0, r3
 80a3ec0:	fb00 f409 	mul.w	r4, r0, r9
 80a3ec4:	fa1f fc8c 	uxth.w	ip, ip
 80a3ec8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a3ecc:	429c      	cmp	r4, r3
 80a3ece:	d907      	bls.n	80a3ee0 <__udivmoddi4+0x1ec>
 80a3ed0:	19db      	adds	r3, r3, r7
 80a3ed2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3ed6:	d26e      	bcs.n	80a3fb6 <__udivmoddi4+0x2c2>
 80a3ed8:	429c      	cmp	r4, r3
 80a3eda:	d96c      	bls.n	80a3fb6 <__udivmoddi4+0x2c2>
 80a3edc:	3802      	subs	r0, #2
 80a3ede:	443b      	add	r3, r7
 80a3ee0:	1b1c      	subs	r4, r3, r4
 80a3ee2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a3ee6:	e78b      	b.n	80a3e00 <__udivmoddi4+0x10c>
 80a3ee8:	f1c1 0e20 	rsb	lr, r1, #32
 80a3eec:	408b      	lsls	r3, r1
 80a3eee:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a3ef2:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3ef6:	fa24 f70e 	lsr.w	r7, r4, lr
 80a3efa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a3efe:	fbb7 faf9 	udiv	sl, r7, r9
 80a3f02:	fa1f f38c 	uxth.w	r3, ip
 80a3f06:	fb09 771a 	mls	r7, r9, sl, r7
 80a3f0a:	fa20 f80e 	lsr.w	r8, r0, lr
 80a3f0e:	408c      	lsls	r4, r1
 80a3f10:	fb0a f503 	mul.w	r5, sl, r3
 80a3f14:	ea48 0404 	orr.w	r4, r8, r4
 80a3f18:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3f1c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a3f20:	42bd      	cmp	r5, r7
 80a3f22:	fa02 f201 	lsl.w	r2, r2, r1
 80a3f26:	fa00 fb01 	lsl.w	fp, r0, r1
 80a3f2a:	d909      	bls.n	80a3f40 <__udivmoddi4+0x24c>
 80a3f2c:	eb17 070c 	adds.w	r7, r7, ip
 80a3f30:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a3f34:	d241      	bcs.n	80a3fba <__udivmoddi4+0x2c6>
 80a3f36:	42bd      	cmp	r5, r7
 80a3f38:	d93f      	bls.n	80a3fba <__udivmoddi4+0x2c6>
 80a3f3a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3f3e:	4467      	add	r7, ip
 80a3f40:	1b7f      	subs	r7, r7, r5
 80a3f42:	fbb7 f5f9 	udiv	r5, r7, r9
 80a3f46:	fb09 7715 	mls	r7, r9, r5, r7
 80a3f4a:	fb05 f303 	mul.w	r3, r5, r3
 80a3f4e:	b2a4      	uxth	r4, r4
 80a3f50:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3f54:	42bb      	cmp	r3, r7
 80a3f56:	d908      	bls.n	80a3f6a <__udivmoddi4+0x276>
 80a3f58:	eb17 070c 	adds.w	r7, r7, ip
 80a3f5c:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a3f60:	d227      	bcs.n	80a3fb2 <__udivmoddi4+0x2be>
 80a3f62:	42bb      	cmp	r3, r7
 80a3f64:	d925      	bls.n	80a3fb2 <__udivmoddi4+0x2be>
 80a3f66:	3d02      	subs	r5, #2
 80a3f68:	4467      	add	r7, ip
 80a3f6a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a3f6e:	fba0 8902 	umull	r8, r9, r0, r2
 80a3f72:	1aff      	subs	r7, r7, r3
 80a3f74:	454f      	cmp	r7, r9
 80a3f76:	4645      	mov	r5, r8
 80a3f78:	464c      	mov	r4, r9
 80a3f7a:	d314      	bcc.n	80a3fa6 <__udivmoddi4+0x2b2>
 80a3f7c:	d029      	beq.n	80a3fd2 <__udivmoddi4+0x2de>
 80a3f7e:	b366      	cbz	r6, 80a3fda <__udivmoddi4+0x2e6>
 80a3f80:	ebbb 0305 	subs.w	r3, fp, r5
 80a3f84:	eb67 0704 	sbc.w	r7, r7, r4
 80a3f88:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a3f8c:	40cb      	lsrs	r3, r1
 80a3f8e:	40cf      	lsrs	r7, r1
 80a3f90:	ea4e 0303 	orr.w	r3, lr, r3
 80a3f94:	e886 0088 	stmia.w	r6, {r3, r7}
 80a3f98:	2100      	movs	r1, #0
 80a3f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f9e:	4623      	mov	r3, r4
 80a3fa0:	e6f3      	b.n	80a3d8a <__udivmoddi4+0x96>
 80a3fa2:	4618      	mov	r0, r3
 80a3fa4:	e6da      	b.n	80a3d5c <__udivmoddi4+0x68>
 80a3fa6:	ebb8 0502 	subs.w	r5, r8, r2
 80a3faa:	eb69 040c 	sbc.w	r4, r9, ip
 80a3fae:	3801      	subs	r0, #1
 80a3fb0:	e7e5      	b.n	80a3f7e <__udivmoddi4+0x28a>
 80a3fb2:	4605      	mov	r5, r0
 80a3fb4:	e7d9      	b.n	80a3f6a <__udivmoddi4+0x276>
 80a3fb6:	4610      	mov	r0, r2
 80a3fb8:	e792      	b.n	80a3ee0 <__udivmoddi4+0x1ec>
 80a3fba:	4682      	mov	sl, r0
 80a3fbc:	e7c0      	b.n	80a3f40 <__udivmoddi4+0x24c>
 80a3fbe:	4692      	mov	sl, r2
 80a3fc0:	e778      	b.n	80a3eb4 <__udivmoddi4+0x1c0>
 80a3fc2:	3802      	subs	r0, #2
 80a3fc4:	443a      	add	r2, r7
 80a3fc6:	e743      	b.n	80a3e50 <__udivmoddi4+0x15c>
 80a3fc8:	4608      	mov	r0, r1
 80a3fca:	e704      	b.n	80a3dd6 <__udivmoddi4+0xe2>
 80a3fcc:	3b02      	subs	r3, #2
 80a3fce:	443c      	add	r4, r7
 80a3fd0:	e72a      	b.n	80a3e28 <__udivmoddi4+0x134>
 80a3fd2:	45c3      	cmp	fp, r8
 80a3fd4:	d3e7      	bcc.n	80a3fa6 <__udivmoddi4+0x2b2>
 80a3fd6:	463c      	mov	r4, r7
 80a3fd8:	e7d1      	b.n	80a3f7e <__udivmoddi4+0x28a>
 80a3fda:	4631      	mov	r1, r6
 80a3fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3fe0 <__aeabi_idiv0>:
 80a3fe0:	4770      	bx	lr
 80a3fe2:	bf00      	nop

080a3fe4 <atol>:
 80a3fe4:	220a      	movs	r2, #10
 80a3fe6:	2100      	movs	r1, #0
 80a3fe8:	f000 b92e 	b.w	80a4248 <strtol>

080a3fec <__cxa_atexit>:
 80a3fec:	b510      	push	{r4, lr}
 80a3fee:	4c05      	ldr	r4, [pc, #20]	; (80a4004 <__cxa_atexit+0x18>)
 80a3ff0:	4613      	mov	r3, r2
 80a3ff2:	b12c      	cbz	r4, 80a4000 <__cxa_atexit+0x14>
 80a3ff4:	460a      	mov	r2, r1
 80a3ff6:	4601      	mov	r1, r0
 80a3ff8:	2002      	movs	r0, #2
 80a3ffa:	f3af 8000 	nop.w
 80a3ffe:	bd10      	pop	{r4, pc}
 80a4000:	4620      	mov	r0, r4
 80a4002:	bd10      	pop	{r4, pc}
 80a4004:	00000000 	.word	0x00000000

080a4008 <ldiv>:
 80a4008:	b510      	push	{r4, lr}
 80a400a:	fb91 f4f2 	sdiv	r4, r1, r2
 80a400e:	2900      	cmp	r1, #0
 80a4010:	fb02 1314 	mls	r3, r2, r4, r1
 80a4014:	db04      	blt.n	80a4020 <ldiv+0x18>
 80a4016:	2b00      	cmp	r3, #0
 80a4018:	da07      	bge.n	80a402a <ldiv+0x22>
 80a401a:	3401      	adds	r4, #1
 80a401c:	1a9b      	subs	r3, r3, r2
 80a401e:	e004      	b.n	80a402a <ldiv+0x22>
 80a4020:	2b00      	cmp	r3, #0
 80a4022:	bfc4      	itt	gt
 80a4024:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a4028:	189b      	addgt	r3, r3, r2
 80a402a:	6004      	str	r4, [r0, #0]
 80a402c:	6043      	str	r3, [r0, #4]
 80a402e:	bd10      	pop	{r4, pc}

080a4030 <memcpy>:
 80a4030:	b510      	push	{r4, lr}
 80a4032:	1e43      	subs	r3, r0, #1
 80a4034:	440a      	add	r2, r1
 80a4036:	4291      	cmp	r1, r2
 80a4038:	d004      	beq.n	80a4044 <memcpy+0x14>
 80a403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4042:	e7f8      	b.n	80a4036 <memcpy+0x6>
 80a4044:	bd10      	pop	{r4, pc}

080a4046 <memset>:
 80a4046:	4603      	mov	r3, r0
 80a4048:	4402      	add	r2, r0
 80a404a:	4293      	cmp	r3, r2
 80a404c:	d002      	beq.n	80a4054 <memset+0xe>
 80a404e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4052:	e7fa      	b.n	80a404a <memset+0x4>
 80a4054:	4770      	bx	lr
	...

080a4058 <srand>:
 80a4058:	b538      	push	{r3, r4, r5, lr}
 80a405a:	4b12      	ldr	r3, [pc, #72]	; (80a40a4 <srand+0x4c>)
 80a405c:	4605      	mov	r5, r0
 80a405e:	681c      	ldr	r4, [r3, #0]
 80a4060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4062:	b9d3      	cbnz	r3, 80a409a <srand+0x42>
 80a4064:	2018      	movs	r0, #24
 80a4066:	f7fd f999 	bl	80a139c <malloc>
 80a406a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a406e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4070:	8003      	strh	r3, [r0, #0]
 80a4072:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4076:	8043      	strh	r3, [r0, #2]
 80a4078:	f241 2334 	movw	r3, #4660	; 0x1234
 80a407c:	8083      	strh	r3, [r0, #4]
 80a407e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4082:	80c3      	strh	r3, [r0, #6]
 80a4084:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4088:	8103      	strh	r3, [r0, #8]
 80a408a:	2305      	movs	r3, #5
 80a408c:	8143      	strh	r3, [r0, #10]
 80a408e:	230b      	movs	r3, #11
 80a4090:	8183      	strh	r3, [r0, #12]
 80a4092:	2201      	movs	r2, #1
 80a4094:	2300      	movs	r3, #0
 80a4096:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a409a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a409c:	2200      	movs	r2, #0
 80a409e:	611d      	str	r5, [r3, #16]
 80a40a0:	615a      	str	r2, [r3, #20]
 80a40a2:	bd38      	pop	{r3, r4, r5, pc}
 80a40a4:	2000036c 	.word	0x2000036c

080a40a8 <strcmp>:
 80a40a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a40ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a40b0:	2a01      	cmp	r2, #1
 80a40b2:	bf28      	it	cs
 80a40b4:	429a      	cmpcs	r2, r3
 80a40b6:	d0f7      	beq.n	80a40a8 <strcmp>
 80a40b8:	1ad0      	subs	r0, r2, r3
 80a40ba:	4770      	bx	lr

080a40bc <strcpy>:
 80a40bc:	4603      	mov	r3, r0
 80a40be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a40c2:	f803 2b01 	strb.w	r2, [r3], #1
 80a40c6:	2a00      	cmp	r2, #0
 80a40c8:	d1f9      	bne.n	80a40be <strcpy+0x2>
 80a40ca:	4770      	bx	lr

080a40cc <strdup>:
 80a40cc:	4b02      	ldr	r3, [pc, #8]	; (80a40d8 <strdup+0xc>)
 80a40ce:	4601      	mov	r1, r0
 80a40d0:	6818      	ldr	r0, [r3, #0]
 80a40d2:	f000 b803 	b.w	80a40dc <_strdup_r>
 80a40d6:	bf00      	nop
 80a40d8:	2000036c 	.word	0x2000036c

080a40dc <_strdup_r>:
 80a40dc:	b570      	push	{r4, r5, r6, lr}
 80a40de:	4606      	mov	r6, r0
 80a40e0:	4608      	mov	r0, r1
 80a40e2:	460c      	mov	r4, r1
 80a40e4:	f000 f80d 	bl	80a4102 <strlen>
 80a40e8:	1c45      	adds	r5, r0, #1
 80a40ea:	4629      	mov	r1, r5
 80a40ec:	4630      	mov	r0, r6
 80a40ee:	f7fd f975 	bl	80a13dc <_malloc_r>
 80a40f2:	4606      	mov	r6, r0
 80a40f4:	b118      	cbz	r0, 80a40fe <_strdup_r+0x22>
 80a40f6:	462a      	mov	r2, r5
 80a40f8:	4621      	mov	r1, r4
 80a40fa:	f7ff ff99 	bl	80a4030 <memcpy>
 80a40fe:	4630      	mov	r0, r6
 80a4100:	bd70      	pop	{r4, r5, r6, pc}

080a4102 <strlen>:
 80a4102:	4603      	mov	r3, r0
 80a4104:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4108:	2a00      	cmp	r2, #0
 80a410a:	d1fb      	bne.n	80a4104 <strlen+0x2>
 80a410c:	1a18      	subs	r0, r3, r0
 80a410e:	3801      	subs	r0, #1
 80a4110:	4770      	bx	lr

080a4112 <strncmp>:
 80a4112:	b530      	push	{r4, r5, lr}
 80a4114:	b182      	cbz	r2, 80a4138 <strncmp+0x26>
 80a4116:	1e45      	subs	r5, r0, #1
 80a4118:	3901      	subs	r1, #1
 80a411a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a411e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4122:	42a3      	cmp	r3, r4
 80a4124:	d106      	bne.n	80a4134 <strncmp+0x22>
 80a4126:	43ec      	mvns	r4, r5
 80a4128:	4414      	add	r4, r2
 80a412a:	42e0      	cmn	r0, r4
 80a412c:	d001      	beq.n	80a4132 <strncmp+0x20>
 80a412e:	2b00      	cmp	r3, #0
 80a4130:	d1f3      	bne.n	80a411a <strncmp+0x8>
 80a4132:	461c      	mov	r4, r3
 80a4134:	1b18      	subs	r0, r3, r4
 80a4136:	bd30      	pop	{r4, r5, pc}
 80a4138:	4610      	mov	r0, r2
 80a413a:	bd30      	pop	{r4, r5, pc}

080a413c <_strtol_r>:
 80a413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4140:	460f      	mov	r7, r1
 80a4142:	4680      	mov	r8, r0
 80a4144:	483f      	ldr	r0, [pc, #252]	; (80a4244 <_strtol_r+0x108>)
 80a4146:	f8d0 9000 	ldr.w	r9, [r0]
 80a414a:	463d      	mov	r5, r7
 80a414c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4150:	eb09 0004 	add.w	r0, r9, r4
 80a4154:	7840      	ldrb	r0, [r0, #1]
 80a4156:	f000 0008 	and.w	r0, r0, #8
 80a415a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a415e:	b108      	cbz	r0, 80a4164 <_strtol_r+0x28>
 80a4160:	462f      	mov	r7, r5
 80a4162:	e7f2      	b.n	80a414a <_strtol_r+0xe>
 80a4164:	2c2d      	cmp	r4, #45	; 0x2d
 80a4166:	d103      	bne.n	80a4170 <_strtol_r+0x34>
 80a4168:	1cbd      	adds	r5, r7, #2
 80a416a:	787c      	ldrb	r4, [r7, #1]
 80a416c:	2601      	movs	r6, #1
 80a416e:	e003      	b.n	80a4178 <_strtol_r+0x3c>
 80a4170:	2c2b      	cmp	r4, #43	; 0x2b
 80a4172:	bf04      	itt	eq
 80a4174:	787c      	ldrbeq	r4, [r7, #1]
 80a4176:	1cbd      	addeq	r5, r7, #2
 80a4178:	b113      	cbz	r3, 80a4180 <_strtol_r+0x44>
 80a417a:	2b10      	cmp	r3, #16
 80a417c:	d10a      	bne.n	80a4194 <_strtol_r+0x58>
 80a417e:	e05b      	b.n	80a4238 <_strtol_r+0xfc>
 80a4180:	2c30      	cmp	r4, #48	; 0x30
 80a4182:	d157      	bne.n	80a4234 <_strtol_r+0xf8>
 80a4184:	7828      	ldrb	r0, [r5, #0]
 80a4186:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a418a:	2858      	cmp	r0, #88	; 0x58
 80a418c:	d14d      	bne.n	80a422a <_strtol_r+0xee>
 80a418e:	786c      	ldrb	r4, [r5, #1]
 80a4190:	2310      	movs	r3, #16
 80a4192:	3502      	adds	r5, #2
 80a4194:	2e00      	cmp	r6, #0
 80a4196:	bf14      	ite	ne
 80a4198:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a419c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a41a0:	fbbc faf3 	udiv	sl, ip, r3
 80a41a4:	2700      	movs	r7, #0
 80a41a6:	4638      	mov	r0, r7
 80a41a8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a41ac:	eb09 0e04 	add.w	lr, r9, r4
 80a41b0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a41b4:	f01e 0f04 	tst.w	lr, #4
 80a41b8:	d001      	beq.n	80a41be <_strtol_r+0x82>
 80a41ba:	3c30      	subs	r4, #48	; 0x30
 80a41bc:	e00b      	b.n	80a41d6 <_strtol_r+0x9a>
 80a41be:	f01e 0e03 	ands.w	lr, lr, #3
 80a41c2:	d01b      	beq.n	80a41fc <_strtol_r+0xc0>
 80a41c4:	f1be 0f01 	cmp.w	lr, #1
 80a41c8:	bf0c      	ite	eq
 80a41ca:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a41ce:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a41d2:	ebce 0404 	rsb	r4, lr, r4
 80a41d6:	42a3      	cmp	r3, r4
 80a41d8:	dd10      	ble.n	80a41fc <_strtol_r+0xc0>
 80a41da:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a41de:	d00a      	beq.n	80a41f6 <_strtol_r+0xba>
 80a41e0:	4550      	cmp	r0, sl
 80a41e2:	d806      	bhi.n	80a41f2 <_strtol_r+0xb6>
 80a41e4:	d101      	bne.n	80a41ea <_strtol_r+0xae>
 80a41e6:	4564      	cmp	r4, ip
 80a41e8:	dc03      	bgt.n	80a41f2 <_strtol_r+0xb6>
 80a41ea:	fb03 4000 	mla	r0, r3, r0, r4
 80a41ee:	2701      	movs	r7, #1
 80a41f0:	e001      	b.n	80a41f6 <_strtol_r+0xba>
 80a41f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a41f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a41fa:	e7d7      	b.n	80a41ac <_strtol_r+0x70>
 80a41fc:	1c7b      	adds	r3, r7, #1
 80a41fe:	d10c      	bne.n	80a421a <_strtol_r+0xde>
 80a4200:	2e00      	cmp	r6, #0
 80a4202:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a4206:	bf14      	ite	ne
 80a4208:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a420c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4210:	f8c8 3000 	str.w	r3, [r8]
 80a4214:	b92a      	cbnz	r2, 80a4222 <_strtol_r+0xe6>
 80a4216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a421a:	b106      	cbz	r6, 80a421e <_strtol_r+0xe2>
 80a421c:	4240      	negs	r0, r0
 80a421e:	b172      	cbz	r2, 80a423e <_strtol_r+0x102>
 80a4220:	b107      	cbz	r7, 80a4224 <_strtol_r+0xe8>
 80a4222:	1e69      	subs	r1, r5, #1
 80a4224:	6011      	str	r1, [r2, #0]
 80a4226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a422a:	2430      	movs	r4, #48	; 0x30
 80a422c:	2b00      	cmp	r3, #0
 80a422e:	d1b1      	bne.n	80a4194 <_strtol_r+0x58>
 80a4230:	2308      	movs	r3, #8
 80a4232:	e7af      	b.n	80a4194 <_strtol_r+0x58>
 80a4234:	230a      	movs	r3, #10
 80a4236:	e7ad      	b.n	80a4194 <_strtol_r+0x58>
 80a4238:	2c30      	cmp	r4, #48	; 0x30
 80a423a:	d0a3      	beq.n	80a4184 <_strtol_r+0x48>
 80a423c:	e7aa      	b.n	80a4194 <_strtol_r+0x58>
 80a423e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4242:	bf00      	nop
 80a4244:	20000308 	.word	0x20000308

080a4248 <strtol>:
 80a4248:	4613      	mov	r3, r2
 80a424a:	460a      	mov	r2, r1
 80a424c:	4601      	mov	r1, r0
 80a424e:	4802      	ldr	r0, [pc, #8]	; (80a4258 <strtol+0x10>)
 80a4250:	6800      	ldr	r0, [r0, #0]
 80a4252:	f7ff bf73 	b.w	80a413c <_strtol_r>
 80a4256:	bf00      	nop
 80a4258:	2000036c 	.word	0x2000036c

080a425c <dynalib_user>:
 80a425c:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a426c:	00000000 00410044 48474948 574f4c00     ....D.A.HIGH.LOW
 80a427c:	35307800 48005f33 00686769 652d796d     .x053_.High.my-e
 80a428c:	746e6576 776f4c00 35307800 61625f33     vent.Low.x053_ba
 80a429c:	72657474 6c6f5679 65676174 35307800     tteryVoltage.x05
 80a42ac:	68635f33 65677261 00706d41 33353078     3_chargeAmp.x053
 80a42bc:	6c6f735f 6f507261 00726577 69676964     _solarPower.digi
 80a42cc:	726c6174 00646165 69676964 776c6174     talread.digitalw
 80a42dc:	65746972 616e6100 72676f6c 00646165     rite.analogread.
 80a42ec:	6c616e61 7277676f 00657469 61647075     analogwrite.upda
 80a42fc:	74536574 00737461 5454514d 6e6f6320     teStats.MQTT con
 80a430c:	7463656e 73006465 6e6e696b 6b732e79     nected.skinny.sk
 80a431c:	61686379 2e737472 0074656e 514d0400     ycharts.net...MQ
 80a432c:	00045454 49514d06 03706473              TT...MQIsdp.

080a4338 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4340:	080a1413 080a1419 080a1441 080a1425     ........A...%...
 80a4350:	080a1415                                ....

080a4354 <_ZTV7TwoWire>:
	...
 80a435c:	080a19b1 080a19fb 080a19d3 080a19b3     ................
 80a436c:	080a19db 080a19e3 080a19eb 080a19f3     ................

080a437c <_ZTV9IPAddress>:
	...
 80a4384:	080a1a43 080a1a35 080a1a37 6e6c0066     C...5...7...f.ln
 80a4394:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a43a4:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a43b4:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a43c4:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a43d4:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a43e4:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a43f4:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a4404:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a4414:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a4424:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a4434:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a4444:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a4454:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a4464:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a4474 <_ZTV8SPIClass>:
	...
 80a447c:	080a1bd5 080a1bd7                       ........

080a4484 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a448c:	080a1fe1 080a1fe7 080a2107 080a1ff3     .........!......
 80a449c:	080a1fe3                                ....

080a44a0 <_ZTV9TCPClient>:
	...
 80a44a8:	080a0761 080a0795 080a1f9d 080a1fb7     a...............
 80a44b8:	080a2185 080a20d3 080a20a5 080a1fdf     .!... ... ......
 80a44c8:	080a22b9 080a1ff9 080a2123 080a2201     ."......#!..."..
 80a44d8:	080a2409 080a245b 080a1fc7 080a23cd     .$..[$.......#..
 80a44e8:	080a2085 69726977 5400676e 6c435043     . ..wiring.TCPCl
 80a44f8:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a4508:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a4518:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a4528:	74637361 00656d69                       asctime.

080a4530 <_ZTV11USARTSerial>:
	...
 80a4538:	080a24e9 080a250d 080a2519 080a1b01     .$...%...%......
 80a4548:	080a24f5 080a2501 080a24fb 080a2507     .$...%...$...%..
 80a4558:	080a24eb 080a24ef                       .$...$..

080a4560 <_ZTV9USBSerial>:
	...
 80a4568:	080a25c1 080a2605 080a25df 080a1b01     .%...&...%......
 80a4578:	080a25d9 080a25c3 080a25cb 080a25ff     .%...%...%...%..
 80a4588:	080a25d3 080a25bd                       .%...%..

080a4590 <_ZTVN5spark9WiFiClassE>:
	...
 80a4598:	080a272b                                +'..

080a459c <_ZN5spark7NetworkE>:
 80a459c:	2000087c                                |.. 

080a45a0 <_ctype_>:
 80a45a0:	20202000 20202020 28282020 20282828     .         ((((( 
 80a45b0:	20202020 20202020 20202020 20202020                     
 80a45c0:	10108820 10101010 10101010 10101010      ...............
 80a45d0:	04040410 04040404 10040404 10101010     ................
 80a45e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a45f0:	01010101 01010101 01010101 10101010     ................
 80a4600:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4610:	02020202 02020202 02020202 10101010     ................
 80a4620:	00000020 00000000 00000000 00000000      ...............
	...

080a46a4 <__sf_fake_stdin>:
	...

080a46c4 <__sf_fake_stdout>:
	...

080a46e4 <__sf_fake_stderr>:
	...
 80a4704:	00000043                                         C.

080a4706 <link_const_variable_data_end>:
	...

080a4708 <link_constructors_location>:
 80a4708:	080a06e9 	.word	0x080a06e9
 80a470c:	080a0f99 	.word	0x080a0f99
 80a4710:	080a0f9d 	.word	0x080a0f9d
 80a4714:	080a1af1 	.word	0x080a1af1
 80a4718:	080a1bb9 	.word	0x080a1bb9
 80a471c:	080a1f5d 	.word	0x080a1f5d
 80a4720:	080a24d5 	.word	0x080a24d5
 80a4724:	080a2735 	.word	0x080a2735
 80a4728:	080a2b29 	.word	0x080a2b29
 80a472c:	080a2b59 	.word	0x080a2b59
 80a4730:	080a2bad 	.word	0x080a2bad
 80a4734:	080a2c71 	.word	0x080a2c71
 80a4738:	080a2cf5 	.word	0x080a2cf5
 80a473c:	080a2d79 	.word	0x080a2d79
