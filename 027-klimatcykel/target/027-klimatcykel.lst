
/Users/jido/Documents/GitHub/x045-027-laddbox/027-klimatcykel/target/027-klimatcykel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a18f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a18f4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000580  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1960  080a1960  00021960  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1988  080a1988  00021988  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000913f7  00000000  00000000  0002198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d0d9  00000000  00000000  000b2d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011e55  00000000  00000000  000bfe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001cb0  00000000  00000000  000d1cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002f88  00000000  00000000  000d3961  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000207ee  00000000  00000000  000d68e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c7cd  00000000  00000000  000f70d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00096aa5  00000000  00000000  001138a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b10c  00000000  00000000  001aa34c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	38 15 0a 08                                         8...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f98f 	bl	80a1350 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f994 	bl	80a1366 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a18f4 	.word	0x080a18f4
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200008ec 	.word	0x200008ec
 80a0058:	200008ec 	.word	0x200008ec

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fef3 	bl	80a0e48 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a18bc 	.word	0x080a18bc
 80a0084:	080a18ec 	.word	0x080a18ec

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b944 	b.w	80a0314 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f939 	bl	80a0304 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 be99 	b.w	80a0dcc <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 babd 	b.w	80a0618 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00b2:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00b4:	b085      	sub	sp, #20
 80a00b6:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00b8:	f000 fcc0 	bl	80a0a3c <_ZNK6String6charAtEj>
 80a00bc:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00c0:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00c2:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00c4:	d825      	bhi.n	80a0112 <_Z17tinkerDigitalRead6String+0x62>

	if(pin.startsWith("D"))
 80a00c6:	4916      	ldr	r1, [pc, #88]	; (80a0120 <_Z17tinkerDigitalRead6String+0x70>)
 80a00c8:	4668      	mov	r0, sp
 80a00ca:	f000 fc3f 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a00ce:	4669      	mov	r1, sp
 80a00d0:	4630      	mov	r0, r6
 80a00d2:	f000 fca1 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a00d6:	4607      	mov	r7, r0
 80a00d8:	4668      	mov	r0, sp
 80a00da:	f000 fbf0 	bl	80a08be <_ZN6StringD1Ev>
 80a00de:	b10f      	cbz	r7, 80a00e4 <_Z17tinkerDigitalRead6String+0x34>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 80a00e0:	b2ac      	uxth	r4, r5
 80a00e2:	e00e      	b.n	80a0102 <_Z17tinkerDigitalRead6String+0x52>
		return digitalRead(pinNumber);
	}
	else if (pin.startsWith("A"))
 80a00e4:	490f      	ldr	r1, [pc, #60]	; (80a0124 <_Z17tinkerDigitalRead6String+0x74>)
 80a00e6:	4668      	mov	r0, sp
 80a00e8:	f000 fc30 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a00ec:	4669      	mov	r1, sp
 80a00ee:	4630      	mov	r0, r6
 80a00f0:	f000 fc92 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a00f4:	4605      	mov	r5, r0
 80a00f6:	4668      	mov	r0, sp
 80a00f8:	f000 fbe1 	bl	80a08be <_ZN6StringD1Ev>
 80a00fc:	b165      	cbz	r5, 80a0118 <_Z17tinkerDigitalRead6String+0x68>
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 80a00fe:	3c26      	subs	r4, #38	; 0x26
 80a0100:	b2a4      	uxth	r4, r4
 80a0102:	4620      	mov	r0, r4
 80a0104:	2103      	movs	r1, #3
 80a0106:	f000 feef 	bl	80a0ee8 <pinMode>
		return digitalRead(pinNumber+10);
 80a010a:	4620      	mov	r0, r4
 80a010c:	f000 ff16 	bl	80a0f3c <digitalRead>
 80a0110:	e004      	b.n	80a011c <_Z17tinkerDigitalRead6String+0x6c>
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0116:	e001      	b.n	80a011c <_Z17tinkerDigitalRead6String+0x6c>
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
 80a0118:	f06f 0001 	mvn.w	r0, #1
}
 80a011c:	b005      	add	sp, #20
 80a011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0120:	080a154c 	.word	0x080a154c
 80a0124:	080a154e 	.word	0x080a154e

080a0128 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a0128:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a012a:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a012c:	b085      	sub	sp, #20
 80a012e:	4606      	mov	r6, r0
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0130:	f000 fc84 	bl	80a0a3c <_ZNK6String6charAtEj>
 80a0134:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0138:	2c07      	cmp	r4, #7
 80a013a:	d845      	bhi.n	80a01c8 <_Z18tinkerDigitalWrite6String+0xa0>

	if(command.substring(3,7) == "HIGH") value = 1;
 80a013c:	2307      	movs	r3, #7
 80a013e:	2203      	movs	r2, #3
 80a0140:	4631      	mov	r1, r6
 80a0142:	4668      	mov	r0, sp
 80a0144:	f000 fc7c 	bl	80a0a40 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0148:	4924      	ldr	r1, [pc, #144]	; (80a01dc <_Z18tinkerDigitalWrite6String+0xb4>)
 80a014a:	4668      	mov	r0, sp
 80a014c:	f000 fc3c 	bl	80a09c8 <_ZNK6String6equalsEPKc>
 80a0150:	4605      	mov	r5, r0
 80a0152:	4668      	mov	r0, sp
 80a0154:	f000 fbb3 	bl	80a08be <_ZN6StringD1Ev>
 80a0158:	b97d      	cbnz	r5, 80a017a <_Z18tinkerDigitalWrite6String+0x52>
	else if(command.substring(3,6) == "LOW") value = 0;
 80a015a:	2306      	movs	r3, #6
 80a015c:	2203      	movs	r2, #3
 80a015e:	4631      	mov	r1, r6
 80a0160:	4668      	mov	r0, sp
 80a0162:	f000 fc6d 	bl	80a0a40 <_ZNK6String9substringEjj>
 80a0166:	491e      	ldr	r1, [pc, #120]	; (80a01e0 <_Z18tinkerDigitalWrite6String+0xb8>)
 80a0168:	4668      	mov	r0, sp
 80a016a:	f000 fc2d 	bl	80a09c8 <_ZNK6String6equalsEPKc>
 80a016e:	4607      	mov	r7, r0
 80a0170:	4668      	mov	r0, sp
 80a0172:	f000 fba4 	bl	80a08be <_ZN6StringD1Ev>
 80a0176:	b90f      	cbnz	r7, 80a017c <_Z18tinkerDigitalWrite6String+0x54>
 80a0178:	e029      	b.n	80a01ce <_Z18tinkerDigitalWrite6String+0xa6>
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	if(command.substring(3,7) == "HIGH") value = 1;
 80a017a:	2501      	movs	r5, #1
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;

	if(command.startsWith("D"))
 80a017c:	4919      	ldr	r1, [pc, #100]	; (80a01e4 <_Z18tinkerDigitalWrite6String+0xbc>)
 80a017e:	4668      	mov	r0, sp
 80a0180:	f000 fbe4 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0184:	4669      	mov	r1, sp
 80a0186:	4630      	mov	r0, r6
 80a0188:	f000 fc46 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a018c:	4607      	mov	r7, r0
 80a018e:	4668      	mov	r0, sp
 80a0190:	f000 fb95 	bl	80a08be <_ZN6StringD1Ev>
 80a0194:	b96f      	cbnz	r7, 80a01b2 <_Z18tinkerDigitalWrite6String+0x8a>
	{
		pinMode(pinNumber, OUTPUT);
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
 80a0196:	4914      	ldr	r1, [pc, #80]	; (80a01e8 <_Z18tinkerDigitalWrite6String+0xc0>)
 80a0198:	4668      	mov	r0, sp
 80a019a:	f000 fbd7 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a019e:	4630      	mov	r0, r6
 80a01a0:	4669      	mov	r1, sp
 80a01a2:	f000 fc39 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a01a6:	4606      	mov	r6, r0
 80a01a8:	4668      	mov	r0, sp
 80a01aa:	f000 fb88 	bl	80a08be <_ZN6StringD1Ev>
 80a01ae:	b18e      	cbz	r6, 80a01d4 <_Z18tinkerDigitalWrite6String+0xac>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a01b0:	340a      	adds	r4, #10
 80a01b2:	b2a4      	uxth	r4, r4
 80a01b4:	2101      	movs	r1, #1
 80a01b6:	4620      	mov	r0, r4
 80a01b8:	f000 fe96 	bl	80a0ee8 <pinMode>
		digitalWrite(pinNumber+10, value);
 80a01bc:	4620      	mov	r0, r4
 80a01be:	4629      	mov	r1, r5
 80a01c0:	f000 fea3 	bl	80a0f0a <digitalWrite>
		return 1;
 80a01c4:	2001      	movs	r0, #1
 80a01c6:	e007      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>
{
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a01c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a01cc:	e004      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>

	if(command.substring(3,7) == "HIGH") value = 1;
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;
 80a01ce:	f06f 0001 	mvn.w	r0, #1
 80a01d2:	e001      	b.n	80a01d8 <_Z18tinkerDigitalWrite6String+0xb0>
	{
		pinMode(pinNumber+10, OUTPUT);
		digitalWrite(pinNumber+10, value);
		return 1;
	}
	else return -3;
 80a01d4:	f06f 0002 	mvn.w	r0, #2
}
 80a01d8:	b005      	add	sp, #20
 80a01da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a01dc:	080a1550 	.word	0x080a1550
 80a01e0:	080a1555 	.word	0x080a1555
 80a01e4:	080a154c 	.word	0x080a154c
 80a01e8:	080a154e 	.word	0x080a154e

080a01ec <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a01ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a01ee:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a01f0:	4605      	mov	r5, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a01f2:	f000 fc23 	bl	80a0a3c <_ZNK6String6charAtEj>
 80a01f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a01fa:	2b07      	cmp	r3, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a01fc:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a01fe:	d81f      	bhi.n	80a0240 <_Z16tinkerAnalogRead6String+0x54>

	if(pin.startsWith("D"))
 80a0200:	4914      	ldr	r1, [pc, #80]	; (80a0254 <_Z16tinkerAnalogRead6String+0x68>)
 80a0202:	4668      	mov	r0, sp
 80a0204:	f000 fba2 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0208:	4669      	mov	r1, sp
 80a020a:	4628      	mov	r0, r5
 80a020c:	f000 fc04 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a0210:	4606      	mov	r6, r0
 80a0212:	4668      	mov	r0, sp
 80a0214:	f000 fb53 	bl	80a08be <_ZN6StringD1Ev>
 80a0218:	b9ae      	cbnz	r6, 80a0246 <_Z16tinkerAnalogRead6String+0x5a>
	{
		return -3;
	}
	else if (pin.startsWith("A"))
 80a021a:	490f      	ldr	r1, [pc, #60]	; (80a0258 <_Z16tinkerAnalogRead6String+0x6c>)
 80a021c:	4668      	mov	r0, sp
 80a021e:	f000 fb95 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0222:	4628      	mov	r0, r5
 80a0224:	4669      	mov	r1, sp
 80a0226:	f000 fbf7 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a022a:	4605      	mov	r5, r0
 80a022c:	4668      	mov	r0, sp
 80a022e:	f000 fb46 	bl	80a08be <_ZN6StringD1Ev>
 80a0232:	b15d      	cbz	r5, 80a024c <_Z16tinkerAnalogRead6String+0x60>
	{
		return analogRead(pinNumber+10);
 80a0234:	f1a4 0026 	sub.w	r0, r4, #38	; 0x26
 80a0238:	b280      	uxth	r0, r0
 80a023a:	f000 fe92 	bl	80a0f62 <analogRead>
 80a023e:	e007      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0244:	e004      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>

	if(pin.startsWith("D"))
	{
		return -3;
 80a0246:	f06f 0002 	mvn.w	r0, #2
 80a024a:	e001      	b.n	80a0250 <_Z16tinkerAnalogRead6String+0x64>
	}
	else if (pin.startsWith("A"))
	{
		return analogRead(pinNumber+10);
	}
	return -2;
 80a024c:	f06f 0001 	mvn.w	r0, #1
}
 80a0250:	b004      	add	sp, #16
 80a0252:	bd70      	pop	{r4, r5, r6, pc}
 80a0254:	080a154c 	.word	0x080a154c
 80a0258:	080a154e 	.word	0x080a154e

080a025c <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a025c:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a025e:	2101      	movs	r1, #1
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a0260:	b089      	sub	sp, #36	; 0x24
 80a0262:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0264:	f000 fbea 	bl	80a0a3c <_ZNK6String6charAtEj>
 80a0268:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a026c:	2d07      	cmp	r5, #7
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a026e:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0270:	d83e      	bhi.n	80a02f0 <_Z17tinkerAnalogWrite6String+0x94>

	String value = command.substring(3);
 80a0272:	2203      	movs	r2, #3
 80a0274:	4631      	mov	r1, r6
 80a0276:	4668      	mov	r0, sp
 80a0278:	f000 fc0a 	bl	80a0a90 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 80a027c:	491f      	ldr	r1, [pc, #124]	; (80a02fc <_Z17tinkerAnalogWrite6String+0xa0>)
 80a027e:	a804      	add	r0, sp, #16
 80a0280:	f000 fb64 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a0284:	a904      	add	r1, sp, #16
 80a0286:	4630      	mov	r0, r6
 80a0288:	f000 fbc6 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a028c:	4607      	mov	r7, r0
 80a028e:	a804      	add	r0, sp, #16
 80a0290:	f000 fb15 	bl	80a08be <_ZN6StringD1Ev>
 80a0294:	b157      	cbz	r7, 80a02ac <_Z17tinkerAnalogWrite6String+0x50>
	{
		pinMode(pinNumber, OUTPUT);
 80a0296:	b2ad      	uxth	r5, r5
 80a0298:	2101      	movs	r1, #1
 80a029a:	4628      	mov	r0, r5
 80a029c:	f000 fe24 	bl	80a0ee8 <pinMode>
		analogWrite(pinNumber, value.toInt());
 80a02a0:	4668      	mov	r0, sp
 80a02a2:	f000 fbfc 	bl	80a0a9e <_ZNK6String5toIntEv>
 80a02a6:	4601      	mov	r1, r0
 80a02a8:	4628      	mov	r0, r5
 80a02aa:	e017      	b.n	80a02dc <_Z17tinkerAnalogWrite6String+0x80>
		return 1;
	}
	else if(command.startsWith("A"))
 80a02ac:	4914      	ldr	r1, [pc, #80]	; (80a0300 <_Z17tinkerAnalogWrite6String+0xa4>)
 80a02ae:	a804      	add	r0, sp, #16
 80a02b0:	f000 fb4c 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
 80a02b4:	a904      	add	r1, sp, #16
 80a02b6:	4630      	mov	r0, r6
 80a02b8:	f000 fbae 	bl	80a0a18 <_ZNK6String10startsWithERKS_>
 80a02bc:	4605      	mov	r5, r0
 80a02be:	a804      	add	r0, sp, #16
 80a02c0:	f000 fafd 	bl	80a08be <_ZN6StringD1Ev>
 80a02c4:	b175      	cbz	r5, 80a02e4 <_Z17tinkerAnalogWrite6String+0x88>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a02c6:	3c26      	subs	r4, #38	; 0x26
 80a02c8:	b2a4      	uxth	r4, r4
 80a02ca:	2101      	movs	r1, #1
 80a02cc:	4620      	mov	r0, r4
 80a02ce:	f000 fe0b 	bl	80a0ee8 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 80a02d2:	4668      	mov	r0, sp
 80a02d4:	f000 fbe3 	bl	80a0a9e <_ZNK6String5toIntEv>
 80a02d8:	4601      	mov	r1, r0
 80a02da:	4620      	mov	r0, r4
 80a02dc:	f000 fe58 	bl	80a0f90 <_Z11analogWritetm>
		return 1;
 80a02e0:	2401      	movs	r4, #1
 80a02e2:	e001      	b.n	80a02e8 <_Z17tinkerAnalogWrite6String+0x8c>
	}
	else return -2;
 80a02e4:	f06f 0401 	mvn.w	r4, #1
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	String value = command.substring(3);
 80a02e8:	4668      	mov	r0, sp
 80a02ea:	f000 fae8 	bl	80a08be <_ZN6StringD1Ev>
 80a02ee:	e001      	b.n	80a02f4 <_Z17tinkerAnalogWrite6String+0x98>
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a02f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
		return 1;
	}
	else return -2;
}
 80a02f4:	4620      	mov	r0, r4
 80a02f6:	b009      	add	sp, #36	; 0x24
 80a02f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a02fa:	bf00      	nop
 80a02fc:	080a154c 	.word	0x080a154c
 80a0300:	080a154e 	.word	0x080a154e

080a0304 <loop>:

}

/* This function loops forever --------------------------------------------*/
void loop()
{
 80a0304:	4770      	bx	lr
	...

080a0308 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0308:	4602      	mov	r2, r0
 80a030a:	4801      	ldr	r0, [pc, #4]	; (80a0310 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a030c:	f000 b9b3 	b.w	80a0676 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0310:	080a064b 	.word	0x080a064b

080a0314 <setup>:
int tinkerAnalogRead(String pin);
int tinkerAnalogWrite(String command);

/* This function is called once at start up ----------------------------------*/
void setup()
{
 80a0314:	b508      	push	{r3, lr}
	//Setup the Tinker application here

	//Register all the Tinker functions
	Particle.function("digitalread", tinkerDigitalRead);
 80a0316:	4908      	ldr	r1, [pc, #32]	; (80a0338 <setup+0x24>)
 80a0318:	4808      	ldr	r0, [pc, #32]	; (80a033c <setup+0x28>)
 80a031a:	f7ff fff5 	bl	80a0308 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("digitalwrite", tinkerDigitalWrite);
 80a031e:	4908      	ldr	r1, [pc, #32]	; (80a0340 <setup+0x2c>)
 80a0320:	4808      	ldr	r0, [pc, #32]	; (80a0344 <setup+0x30>)
 80a0322:	f7ff fff1 	bl	80a0308 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogread", tinkerAnalogRead);
 80a0326:	4908      	ldr	r1, [pc, #32]	; (80a0348 <setup+0x34>)
 80a0328:	4808      	ldr	r0, [pc, #32]	; (80a034c <setup+0x38>)
 80a032a:	f7ff ffed 	bl	80a0308 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogwrite", tinkerAnalogWrite);
 80a032e:	4908      	ldr	r1, [pc, #32]	; (80a0350 <setup+0x3c>)
 80a0330:	4808      	ldr	r0, [pc, #32]	; (80a0354 <setup+0x40>)
 80a0332:	f7ff ffe9 	bl	80a0308 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
 80a0336:	bd08      	pop	{r3, pc}
 80a0338:	080a00b1 	.word	0x080a00b1
 80a033c:	080a1559 	.word	0x080a1559
 80a0340:	080a0129 	.word	0x080a0129
 80a0344:	080a1565 	.word	0x080a1565
 80a0348:	080a01ed 	.word	0x080a01ed
 80a034c:	080a1572 	.word	0x080a1572
 80a0350:	080a025d 	.word	0x080a025d
 80a0354:	080a157d 	.word	0x080a157d

080a0358 <_GLOBAL__sub_I_setup>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0358:	f000 b820 	b.w	80a039c <HAL_Pin_Map>

080a035c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a035c:	b508      	push	{r3, lr}
 80a035e:	4b02      	ldr	r3, [pc, #8]	; (80a0368 <os_mutex_create+0xc>)
 80a0360:	681b      	ldr	r3, [r3, #0]
 80a0362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0364:	9301      	str	r3, [sp, #4]
 80a0366:	bd08      	pop	{r3, pc}
 80a0368:	080601d0 	.word	0x080601d0

080a036c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a036c:	b508      	push	{r3, lr}
 80a036e:	4b02      	ldr	r3, [pc, #8]	; (80a0378 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0370:	681b      	ldr	r3, [r3, #0]
 80a0372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0374:	9301      	str	r3, [sp, #4]
 80a0376:	bd08      	pop	{r3, pc}
 80a0378:	080601b8 	.word	0x080601b8

080a037c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a037c:	b508      	push	{r3, lr}
 80a037e:	4b02      	ldr	r3, [pc, #8]	; (80a0388 <HAL_RNG_GetRandomNumber+0xc>)
 80a0380:	681b      	ldr	r3, [r3, #0]
 80a0382:	685b      	ldr	r3, [r3, #4]
 80a0384:	9301      	str	r3, [sp, #4]
 80a0386:	bd08      	pop	{r3, pc}
 80a0388:	0806019c 	.word	0x0806019c

080a038c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a038c:	b508      	push	{r3, lr}
 80a038e:	4b02      	ldr	r3, [pc, #8]	; (80a0398 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0390:	681b      	ldr	r3, [r3, #0]
 80a0392:	695b      	ldr	r3, [r3, #20]
 80a0394:	9301      	str	r3, [sp, #4]
 80a0396:	bd08      	pop	{r3, pc}
 80a0398:	0806019c 	.word	0x0806019c

080a039c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a039c:	b508      	push	{r3, lr}
 80a039e:	4b02      	ldr	r3, [pc, #8]	; (80a03a8 <HAL_Pin_Map+0xc>)
 80a03a0:	681b      	ldr	r3, [r3, #0]
 80a03a2:	681b      	ldr	r3, [r3, #0]
 80a03a4:	9301      	str	r3, [sp, #4]
 80a03a6:	bd08      	pop	{r3, pc}
 80a03a8:	080601b0 	.word	0x080601b0

080a03ac <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a03ac:	b508      	push	{r3, lr}
 80a03ae:	4b02      	ldr	r3, [pc, #8]	; (80a03b8 <HAL_Validate_Pin_Function+0xc>)
 80a03b0:	681b      	ldr	r3, [r3, #0]
 80a03b2:	685b      	ldr	r3, [r3, #4]
 80a03b4:	9301      	str	r3, [sp, #4]
 80a03b6:	bd08      	pop	{r3, pc}
 80a03b8:	080601b0 	.word	0x080601b0

080a03bc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a03bc:	b508      	push	{r3, lr}
 80a03be:	4b02      	ldr	r3, [pc, #8]	; (80a03c8 <HAL_Pin_Mode+0xc>)
 80a03c0:	681b      	ldr	r3, [r3, #0]
 80a03c2:	689b      	ldr	r3, [r3, #8]
 80a03c4:	9301      	str	r3, [sp, #4]
 80a03c6:	bd08      	pop	{r3, pc}
 80a03c8:	080601b0 	.word	0x080601b0

080a03cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <HAL_Get_Pin_Mode+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	68db      	ldr	r3, [r3, #12]
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601b0 	.word	0x080601b0

080a03dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <HAL_GPIO_Write+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	691b      	ldr	r3, [r3, #16]
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601b0 	.word	0x080601b0

080a03ec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <HAL_GPIO_Read+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	695b      	ldr	r3, [r3, #20]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601b0 	.word	0x080601b0

080a03fc <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <HAL_DAC_Write+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601b0 	.word	0x080601b0

080a040c <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <HAL_ADC_Read+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601b0 	.word	0x080601b0

080a041c <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <HAL_PWM_Write_Ext+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601b0 	.word	0x080601b0

080a042c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <HAL_I2C_Write_Data+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601ac 	.word	0x080601ac

080a043c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_I2C_Available_Data+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601ac 	.word	0x080601ac

080a044c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_I2C_Read_Data+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601ac 	.word	0x080601ac

080a045c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_I2C_Peek_Data+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601ac 	.word	0x080601ac

080a046c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_I2C_Flush_Data+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601ac 	.word	0x080601ac

080a047c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_I2C_Is_Enabled+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601ac 	.word	0x080601ac

080a048c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b03      	ldr	r3, [pc, #12]	; (80a049c <HAL_I2C_Init+0x10>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0496:	9301      	str	r3, [sp, #4]
 80a0498:	bd08      	pop	{r3, pc}
 80a049a:	0000      	.short	0x0000
 80a049c:	080601ac 	.word	0x080601ac

080a04a0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04a0:	b508      	push	{r3, lr}
 80a04a2:	4b02      	ldr	r3, [pc, #8]	; (80a04ac <HAL_SPI_Init+0xc>)
 80a04a4:	681b      	ldr	r3, [r3, #0]
 80a04a6:	69db      	ldr	r3, [r3, #28]
 80a04a8:	9301      	str	r3, [sp, #4]
 80a04aa:	bd08      	pop	{r3, pc}
 80a04ac:	080601b4 	.word	0x080601b4

080a04b0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a04b0:	b508      	push	{r3, lr}
 80a04b2:	4b02      	ldr	r3, [pc, #8]	; (80a04bc <HAL_SPI_Is_Enabled+0xc>)
 80a04b4:	681b      	ldr	r3, [r3, #0]
 80a04b6:	6a1b      	ldr	r3, [r3, #32]
 80a04b8:	9301      	str	r3, [sp, #4]
 80a04ba:	bd08      	pop	{r3, pc}
 80a04bc:	080601b4 	.word	0x080601b4

080a04c0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a04c0:	b508      	push	{r3, lr}
 80a04c2:	4b02      	ldr	r3, [pc, #8]	; (80a04cc <HAL_USART_Init+0xc>)
 80a04c4:	681b      	ldr	r3, [r3, #0]
 80a04c6:	699b      	ldr	r3, [r3, #24]
 80a04c8:	9301      	str	r3, [sp, #4]
 80a04ca:	bd08      	pop	{r3, pc}
 80a04cc:	080601c4 	.word	0x080601c4

080a04d0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a04d0:	b508      	push	{r3, lr}
 80a04d2:	4b02      	ldr	r3, [pc, #8]	; (80a04dc <HAL_USART_Write_Data+0xc>)
 80a04d4:	681b      	ldr	r3, [r3, #0]
 80a04d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a04d8:	9301      	str	r3, [sp, #4]
 80a04da:	bd08      	pop	{r3, pc}
 80a04dc:	080601c4 	.word	0x080601c4

080a04e0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a04e0:	b508      	push	{r3, lr}
 80a04e2:	4b02      	ldr	r3, [pc, #8]	; (80a04ec <HAL_USART_Available_Data+0xc>)
 80a04e4:	681b      	ldr	r3, [r3, #0]
 80a04e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a04e8:	9301      	str	r3, [sp, #4]
 80a04ea:	bd08      	pop	{r3, pc}
 80a04ec:	080601c4 	.word	0x080601c4

080a04f0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a04f0:	b508      	push	{r3, lr}
 80a04f2:	4b02      	ldr	r3, [pc, #8]	; (80a04fc <HAL_USART_Read_Data+0xc>)
 80a04f4:	681b      	ldr	r3, [r3, #0]
 80a04f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04f8:	9301      	str	r3, [sp, #4]
 80a04fa:	bd08      	pop	{r3, pc}
 80a04fc:	080601c4 	.word	0x080601c4

080a0500 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0500:	b508      	push	{r3, lr}
 80a0502:	4b02      	ldr	r3, [pc, #8]	; (80a050c <HAL_USART_Peek_Data+0xc>)
 80a0504:	681b      	ldr	r3, [r3, #0]
 80a0506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0508:	9301      	str	r3, [sp, #4]
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	080601c4 	.word	0x080601c4

080a0510 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0510:	b508      	push	{r3, lr}
 80a0512:	4b02      	ldr	r3, [pc, #8]	; (80a051c <HAL_USART_Flush_Data+0xc>)
 80a0514:	681b      	ldr	r3, [r3, #0]
 80a0516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0518:	9301      	str	r3, [sp, #4]
 80a051a:	bd08      	pop	{r3, pc}
 80a051c:	080601c4 	.word	0x080601c4

080a0520 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0520:	b508      	push	{r3, lr}
 80a0522:	4b02      	ldr	r3, [pc, #8]	; (80a052c <HAL_USART_Is_Enabled+0xc>)
 80a0524:	681b      	ldr	r3, [r3, #0]
 80a0526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0528:	9301      	str	r3, [sp, #4]
 80a052a:	bd08      	pop	{r3, pc}
 80a052c:	080601c4 	.word	0x080601c4

080a0530 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0530:	b508      	push	{r3, lr}
 80a0532:	4b02      	ldr	r3, [pc, #8]	; (80a053c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0534:	681b      	ldr	r3, [r3, #0]
 80a0536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0538:	9301      	str	r3, [sp, #4]
 80a053a:	bd08      	pop	{r3, pc}
 80a053c:	080601c4 	.word	0x080601c4

080a0540 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b02      	ldr	r3, [pc, #8]	; (80a054c <HAL_USB_USART_Init+0xc>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	681b      	ldr	r3, [r3, #0]
 80a0548:	9301      	str	r3, [sp, #4]
 80a054a:	bd08      	pop	{r3, pc}
 80a054c:	080601d8 	.word	0x080601d8

080a0550 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0550:	b508      	push	{r3, lr}
 80a0552:	4b02      	ldr	r3, [pc, #8]	; (80a055c <HAL_USB_USART_Available_Data+0xc>)
 80a0554:	681b      	ldr	r3, [r3, #0]
 80a0556:	691b      	ldr	r3, [r3, #16]
 80a0558:	9301      	str	r3, [sp, #4]
 80a055a:	bd08      	pop	{r3, pc}
 80a055c:	080601d8 	.word	0x080601d8

080a0560 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0560:	b508      	push	{r3, lr}
 80a0562:	4b02      	ldr	r3, [pc, #8]	; (80a056c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0564:	681b      	ldr	r3, [r3, #0]
 80a0566:	695b      	ldr	r3, [r3, #20]
 80a0568:	9301      	str	r3, [sp, #4]
 80a056a:	bd08      	pop	{r3, pc}
 80a056c:	080601d8 	.word	0x080601d8

080a0570 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0570:	b508      	push	{r3, lr}
 80a0572:	4b02      	ldr	r3, [pc, #8]	; (80a057c <HAL_USB_USART_Receive_Data+0xc>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	699b      	ldr	r3, [r3, #24]
 80a0578:	9301      	str	r3, [sp, #4]
 80a057a:	bd08      	pop	{r3, pc}
 80a057c:	080601d8 	.word	0x080601d8

080a0580 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0580:	b508      	push	{r3, lr}
 80a0582:	4b02      	ldr	r3, [pc, #8]	; (80a058c <HAL_USB_USART_Send_Data+0xc>)
 80a0584:	681b      	ldr	r3, [r3, #0]
 80a0586:	69db      	ldr	r3, [r3, #28]
 80a0588:	9301      	str	r3, [sp, #4]
 80a058a:	bd08      	pop	{r3, pc}
 80a058c:	080601d8 	.word	0x080601d8

080a0590 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_USB_USART_Flush_Data+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	6a1b      	ldr	r3, [r3, #32]
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601d8 	.word	0x080601d8

080a05a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <set_system_mode+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	685b      	ldr	r3, [r3, #4]
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601a4 	.word	0x080601a4

080a05b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b03      	ldr	r3, [pc, #12]	; (80a05c0 <system_ctrl_set_app_request_handler+0x10>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a05ba:	9301      	str	r3, [sp, #4]
 80a05bc:	bd08      	pop	{r3, pc}
 80a05be:	0000      	.short	0x0000
 80a05c0:	080601a4 	.word	0x080601a4

080a05c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b03      	ldr	r3, [pc, #12]	; (80a05d4 <system_ctrl_set_result+0x10>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a05ce:	9301      	str	r3, [sp, #4]
 80a05d0:	bd08      	pop	{r3, pc}
 80a05d2:	0000      	.short	0x0000
 80a05d4:	080601a4 	.word	0x080601a4

080a05d8 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a05d8:	b508      	push	{r3, lr}
 80a05da:	4b02      	ldr	r3, [pc, #8]	; (80a05e4 <spark_function+0xc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	685b      	ldr	r3, [r3, #4]
 80a05e0:	9301      	str	r3, [sp, #4]
 80a05e2:	bd08      	pop	{r3, pc}
 80a05e4:	080601cc 	.word	0x080601cc

080a05e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05e8:	b508      	push	{r3, lr}
 80a05ea:	4b02      	ldr	r3, [pc, #8]	; (80a05f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05ec:	681b      	ldr	r3, [r3, #0]
 80a05ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05f0:	9301      	str	r3, [sp, #4]
 80a05f2:	bd08      	pop	{r3, pc}
 80a05f4:	080601cc 	.word	0x080601cc

080a05f8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05f8:	b508      	push	{r3, lr}
 80a05fa:	4b02      	ldr	r3, [pc, #8]	; (80a0604 <network_ready+0xc>)
 80a05fc:	681b      	ldr	r3, [r3, #0]
 80a05fe:	691b      	ldr	r3, [r3, #16]
 80a0600:	9301      	str	r3, [sp, #4]
 80a0602:	bd08      	pop	{r3, pc}
 80a0604:	080601c8 	.word	0x080601c8

080a0608 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0608:	b508      	push	{r3, lr}
 80a060a:	4b02      	ldr	r3, [pc, #8]	; (80a0614 <malloc+0xc>)
 80a060c:	681b      	ldr	r3, [r3, #0]
 80a060e:	681b      	ldr	r3, [r3, #0]
 80a0610:	9301      	str	r3, [sp, #4]
 80a0612:	bd08      	pop	{r3, pc}
 80a0614:	080601a0 	.word	0x080601a0

080a0618 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0618:	b508      	push	{r3, lr}
 80a061a:	4b02      	ldr	r3, [pc, #8]	; (80a0624 <free+0xc>)
 80a061c:	681b      	ldr	r3, [r3, #0]
 80a061e:	685b      	ldr	r3, [r3, #4]
 80a0620:	9301      	str	r3, [sp, #4]
 80a0622:	bd08      	pop	{r3, pc}
 80a0624:	080601a0 	.word	0x080601a0

080a0628 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <realloc+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	689b      	ldr	r3, [r3, #8]
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601a0 	.word	0x080601a0

080a0638 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0638:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a063a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a063c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a063e:	b113      	cbz	r3, 80a0646 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0640:	2203      	movs	r2, #3
 80a0642:	4601      	mov	r1, r0
 80a0644:	4798      	blx	r3
    }
 80a0646:	4620      	mov	r0, r4
 80a0648:	bd10      	pop	{r4, pc}

080a064a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a064a:	b510      	push	{r4, lr}
 80a064c:	b088      	sub	sp, #32
 80a064e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0650:	4668      	mov	r0, sp
 80a0652:	f000 f97b 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0656:	4669      	mov	r1, sp
 80a0658:	a804      	add	r0, sp, #16
 80a065a:	f000 f999 	bl	80a0990 <_ZN6StringC1ERKS_>
 80a065e:	a804      	add	r0, sp, #16
 80a0660:	47a0      	blx	r4
 80a0662:	4604      	mov	r4, r0
 80a0664:	a804      	add	r0, sp, #16
 80a0666:	f000 f92a 	bl	80a08be <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a066a:	4668      	mov	r0, sp
 80a066c:	f000 f927 	bl	80a08be <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0670:	4620      	mov	r0, r4
 80a0672:	b008      	add	sp, #32
 80a0674:	bd10      	pop	{r4, pc}

080a0676 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0676:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0678:	4607      	mov	r7, r0
 80a067a:	460e      	mov	r6, r1
 80a067c:	4615      	mov	r5, r2
 80a067e:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a0680:	2410      	movs	r4, #16
 80a0682:	4622      	mov	r2, r4
 80a0684:	2100      	movs	r1, #0
 80a0686:	4668      	mov	r0, sp
 80a0688:	f000 fe6d 	bl	80a1366 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a068c:	2200      	movs	r2, #0
 80a068e:	4669      	mov	r1, sp
 80a0690:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a0692:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a0696:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a0698:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a069a:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a069c:	f7ff ff9c 	bl	80a05d8 <spark_function>
}
 80a06a0:	b005      	add	sp, #20
 80a06a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a06a4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a06a4:	4770      	bx	lr

080a06a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a06a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06a8:	4606      	mov	r6, r0
 80a06aa:	4615      	mov	r5, r2
 80a06ac:	460c      	mov	r4, r1
 80a06ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a06b0:	42bc      	cmp	r4, r7
 80a06b2:	d006      	beq.n	80a06c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a06b4:	6833      	ldr	r3, [r6, #0]
 80a06b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a06ba:	689b      	ldr	r3, [r3, #8]
 80a06bc:	4630      	mov	r0, r6
 80a06be:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a06c0:	e7f6      	b.n	80a06b0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a06c2:	4628      	mov	r0, r5
 80a06c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06c6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a06c6:	2200      	movs	r2, #0
 80a06c8:	7c00      	ldrb	r0, [r0, #16]
 80a06ca:	f7ff beaf 	b.w	80a042c <HAL_I2C_Write_Data>

080a06ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a06ce:	2100      	movs	r1, #0
 80a06d0:	7c00      	ldrb	r0, [r0, #16]
 80a06d2:	f7ff beb3 	b.w	80a043c <HAL_I2C_Available_Data>

080a06d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a06d6:	2100      	movs	r1, #0
 80a06d8:	7c00      	ldrb	r0, [r0, #16]
 80a06da:	f7ff beb7 	b.w	80a044c <HAL_I2C_Read_Data>

080a06de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a06de:	2100      	movs	r1, #0
 80a06e0:	7c00      	ldrb	r0, [r0, #16]
 80a06e2:	f7ff bebb 	b.w	80a045c <HAL_I2C_Peek_Data>

080a06e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a06e6:	2100      	movs	r1, #0
 80a06e8:	7c00      	ldrb	r0, [r0, #16]
 80a06ea:	f7ff bebf 	b.w	80a046c <HAL_I2C_Flush_Data>

080a06ee <_ZN7TwoWireD0Ev>:
 80a06ee:	b510      	push	{r4, lr}
 80a06f0:	4604      	mov	r4, r0
 80a06f2:	f7ff fcd2 	bl	80a009a <_ZdlPv>
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd10      	pop	{r4, pc}
	...

080a06fc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a06fc:	b510      	push	{r4, lr}
 80a06fe:	4604      	mov	r4, r0
 80a0700:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0706:	60a3      	str	r3, [r4, #8]
 80a0708:	4b04      	ldr	r3, [pc, #16]	; (80a071c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a070a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a070c:	7420      	strb	r0, [r4, #16]
 80a070e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0710:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0712:	f7ff febb 	bl	80a048c <HAL_I2C_Init>

}
 80a0716:	4620      	mov	r0, r4
 80a0718:	bd10      	pop	{r4, pc}
 80a071a:	bf00      	nop
 80a071c:	080a1594 	.word	0x080a1594

080a0720 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0720:	2100      	movs	r1, #0
 80a0722:	7c00      	ldrb	r0, [r0, #16]
 80a0724:	f7ff beaa 	b.w	80a047c <HAL_I2C_Is_Enabled>

080a0728 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0728:	4770      	bx	lr

080a072a <_ZN9IPAddressD0Ev>:
 80a072a:	b510      	push	{r4, lr}
 80a072c:	4604      	mov	r4, r0
 80a072e:	f7ff fcb4 	bl	80a009a <_ZdlPv>
 80a0732:	4620      	mov	r0, r4
 80a0734:	bd10      	pop	{r4, pc}

080a0736 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0738:	460f      	mov	r7, r1
 80a073a:	f100 0608 	add.w	r6, r0, #8
 80a073e:	1d05      	adds	r5, r0, #4
 80a0740:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0746:	220a      	movs	r2, #10
 80a0748:	4638      	mov	r0, r7
 80a074a:	f000 f882 	bl	80a0852 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a074e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0750:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0752:	d007      	beq.n	80a0764 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0754:	2c00      	cmp	r4, #0
 80a0756:	d0f4      	beq.n	80a0742 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0758:	212e      	movs	r1, #46	; 0x2e
 80a075a:	4638      	mov	r0, r7
 80a075c:	f000 f84c 	bl	80a07f8 <_ZN5Print5printEc>
 80a0760:	4404      	add	r4, r0
 80a0762:	e7ee      	b.n	80a0742 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0764:	4620      	mov	r0, r4
 80a0766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0768 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0768:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a076a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a076e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0772:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0776:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a077a:	2304      	movs	r3, #4
 80a077c:	6041      	str	r1, [r0, #4]
 80a077e:	7503      	strb	r3, [r0, #20]
 80a0780:	bd10      	pop	{r4, pc}
	...

080a0784 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0786:	4d04      	ldr	r5, [pc, #16]	; (80a0798 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0788:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a078a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a078e:	9500      	str	r5, [sp, #0]
 80a0790:	f7ff ffea 	bl	80a0768 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0794:	b003      	add	sp, #12
 80a0796:	bd30      	pop	{r4, r5, pc}
 80a0798:	080a15bc 	.word	0x080a15bc

080a079c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a079c:	4a01      	ldr	r2, [pc, #4]	; (80a07a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a07a0:	601a      	str	r2, [r3, #0]
 80a07a2:	4770      	bx	lr
 80a07a4:	080a1683 	.word	0x080a1683
 80a07a8:	20000370 	.word	0x20000370

080a07ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a07ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a07ae:	4606      	mov	r6, r0
 80a07b0:	460d      	mov	r5, r1
 80a07b2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a07b4:	2400      	movs	r4, #0
  while (size--) {
 80a07b6:	42bd      	cmp	r5, r7
 80a07b8:	d00c      	beq.n	80a07d4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a07ba:	6833      	ldr	r3, [r6, #0]
 80a07bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a07c0:	689b      	ldr	r3, [r3, #8]
 80a07c2:	4630      	mov	r0, r6
 80a07c4:	4798      	blx	r3
     if (chunk>=0)
 80a07c6:	2800      	cmp	r0, #0
 80a07c8:	db01      	blt.n	80a07ce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a07ca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a07cc:	e7f3      	b.n	80a07b6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a07ce:	2c00      	cmp	r4, #0
 80a07d0:	bf08      	it	eq
 80a07d2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07d8:	b570      	push	{r4, r5, r6, lr}
 80a07da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07e0:	b149      	cbz	r1, 80a07f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07e2:	f000 fdfb 	bl	80a13dc <strlen>
 80a07e6:	682b      	ldr	r3, [r5, #0]
 80a07e8:	4602      	mov	r2, r0
 80a07ea:	4621      	mov	r1, r4
 80a07ec:	4628      	mov	r0, r5
    }
 80a07ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07f2:	68db      	ldr	r3, [r3, #12]
 80a07f4:	4718      	bx	r3
    }
 80a07f6:	bd70      	pop	{r4, r5, r6, pc}

080a07f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07f8:	6803      	ldr	r3, [r0, #0]
 80a07fa:	689b      	ldr	r3, [r3, #8]
 80a07fc:	4718      	bx	r3

080a07fe <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07fe:	2a01      	cmp	r2, #1
 80a0800:	bf98      	it	ls
 80a0802:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0804:	b530      	push	{r4, r5, lr}
 80a0806:	460b      	mov	r3, r1
 80a0808:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a080a:	2100      	movs	r1, #0
 80a080c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0810:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0814:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0818:	fb05 3312 	mls	r3, r5, r2, r3
 80a081c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a081e:	2b09      	cmp	r3, #9
 80a0820:	bf94      	ite	ls
 80a0822:	3330      	addls	r3, #48	; 0x30
 80a0824:	3337      	addhi	r3, #55	; 0x37
 80a0826:	b2db      	uxtb	r3, r3
 80a0828:	4621      	mov	r1, r4
 80a082a:	f804 3901 	strb.w	r3, [r4], #-1
 80a082e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0830:	2d00      	cmp	r5, #0
 80a0832:	d1ef      	bne.n	80a0814 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0834:	f7ff ffd0 	bl	80a07d8 <_ZN5Print5writeEPKc>
}
 80a0838:	b00b      	add	sp, #44	; 0x2c
 80a083a:	bd30      	pop	{r4, r5, pc}

080a083c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a083c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a083e:	b922      	cbnz	r2, 80a084a <_ZN5Print5printEmi+0xe>
 80a0840:	6803      	ldr	r3, [r0, #0]
 80a0842:	b2c9      	uxtb	r1, r1
 80a0844:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0846:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0848:	4718      	bx	r3
  else return printNumber(n, base);
 80a084a:	b2d2      	uxtb	r2, r2
}
 80a084c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a084e:	f7ff bfd6 	b.w	80a07fe <_ZN5Print11printNumberEmh>

080a0852 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0852:	f7ff bff3 	b.w	80a083c <_ZN5Print5printEmi>

080a0856 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0856:	b510      	push	{r4, lr}
 80a0858:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a085a:	f7ff feed 	bl	80a0638 <_ZNSt14_Function_baseD1Ev>
 80a085e:	4620      	mov	r0, r4
 80a0860:	bd10      	pop	{r4, pc}
	...

080a0864 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0864:	4803      	ldr	r0, [pc, #12]	; (80a0874 <_GLOBAL__sub_I_RGB+0x10>)
 80a0866:	2300      	movs	r3, #0
 80a0868:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a086a:	4a03      	ldr	r2, [pc, #12]	; (80a0878 <_GLOBAL__sub_I_RGB+0x14>)
 80a086c:	4903      	ldr	r1, [pc, #12]	; (80a087c <_GLOBAL__sub_I_RGB+0x18>)
 80a086e:	f000 bc0f 	b.w	80a1090 <__aeabi_atexit>
 80a0872:	bf00      	nop
 80a0874:	20000374 	.word	0x20000374
 80a0878:	2000036c 	.word	0x2000036c
 80a087c:	080a0857 	.word	0x080a0857

080a0880 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0880:	4770      	bx	lr

080a0882 <_ZN8SPIClassD0Ev>:
 80a0882:	b510      	push	{r4, lr}
 80a0884:	4604      	mov	r4, r0
 80a0886:	f7ff fc08 	bl	80a009a <_ZdlPv>
 80a088a:	4620      	mov	r0, r4
 80a088c:	bd10      	pop	{r4, pc}
	...

080a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0890:	b570      	push	{r4, r5, r6, lr}
 80a0892:	4604      	mov	r4, r0
 80a0894:	460e      	mov	r6, r1
 80a0896:	4b07      	ldr	r3, [pc, #28]	; (80a08b4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0898:	2500      	movs	r5, #0
 80a089a:	6003      	str	r3, [r0, #0]
 80a089c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a08a0:	f7ff fd5c 	bl	80a035c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a08a4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a08a6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a08a8:	f7ff fdfa 	bl	80a04a0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a08ac:	60a5      	str	r5, [r4, #8]
}
 80a08ae:	4620      	mov	r0, r4
 80a08b0:	bd70      	pop	{r4, r5, r6, pc}
 80a08b2:	bf00      	nop
 80a08b4:	080a16b4 	.word	0x080a16b4

080a08b8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a08b8:	7900      	ldrb	r0, [r0, #4]
 80a08ba:	f7ff bdf9 	b.w	80a04b0 <HAL_SPI_Is_Enabled>

080a08be <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a08be:	b510      	push	{r4, lr}
 80a08c0:	4604      	mov	r4, r0
{
	free(buffer);
 80a08c2:	6800      	ldr	r0, [r0, #0]
 80a08c4:	f7ff fea8 	bl	80a0618 <free>
}
 80a08c8:	4620      	mov	r0, r4
 80a08ca:	bd10      	pop	{r4, pc}

080a08cc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a08cc:	b510      	push	{r4, lr}
 80a08ce:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a08d0:	6800      	ldr	r0, [r0, #0]
 80a08d2:	b108      	cbz	r0, 80a08d8 <_ZN6String10invalidateEv+0xc>
 80a08d4:	f7ff fea0 	bl	80a0618 <free>
	buffer = NULL;
 80a08d8:	2300      	movs	r3, #0
 80a08da:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a08dc:	60a3      	str	r3, [r4, #8]
 80a08de:	6063      	str	r3, [r4, #4]
 80a08e0:	bd10      	pop	{r4, pc}

080a08e2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a08e2:	b538      	push	{r3, r4, r5, lr}
 80a08e4:	4604      	mov	r4, r0
 80a08e6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a08e8:	6800      	ldr	r0, [r0, #0]
 80a08ea:	3101      	adds	r1, #1
 80a08ec:	f7ff fe9c 	bl	80a0628 <realloc>
	if (newbuffer) {
 80a08f0:	b110      	cbz	r0, 80a08f8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a08f2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a08f6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a08f8:	bd38      	pop	{r3, r4, r5, pc}

080a08fa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a08fa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a08fc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a08fe:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0900:	b113      	cbz	r3, 80a0908 <_ZN6String7reserveEj+0xe>
 80a0902:	6843      	ldr	r3, [r0, #4]
 80a0904:	428b      	cmp	r3, r1
 80a0906:	d207      	bcs.n	80a0918 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0908:	4620      	mov	r0, r4
 80a090a:	f7ff ffea 	bl	80a08e2 <_ZN6String12changeBufferEj>
 80a090e:	b120      	cbz	r0, 80a091a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0910:	68a3      	ldr	r3, [r4, #8]
 80a0912:	b90b      	cbnz	r3, 80a0918 <_ZN6String7reserveEj+0x1e>
 80a0914:	6822      	ldr	r2, [r4, #0]
 80a0916:	7013      	strb	r3, [r2, #0]
 80a0918:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a091a:	bd10      	pop	{r4, pc}

080a091c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a091c:	b570      	push	{r4, r5, r6, lr}
 80a091e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0920:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0922:	4604      	mov	r4, r0
 80a0924:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0926:	f7ff ffe8 	bl	80a08fa <_ZN6String7reserveEj>
 80a092a:	b918      	cbnz	r0, 80a0934 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a092c:	4620      	mov	r0, r4
 80a092e:	f7ff ffcd 	bl	80a08cc <_ZN6String10invalidateEv>
		return *this;
 80a0932:	e009      	b.n	80a0948 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0934:	462a      	mov	r2, r5
 80a0936:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0938:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a093a:	6820      	ldr	r0, [r4, #0]
 80a093c:	f000 fd08 	bl	80a1350 <memcpy>
	buffer[len] = 0;
 80a0940:	6822      	ldr	r2, [r4, #0]
 80a0942:	68a3      	ldr	r3, [r4, #8]
 80a0944:	2100      	movs	r1, #0
 80a0946:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0948:	4620      	mov	r0, r4
 80a094a:	bd70      	pop	{r4, r5, r6, pc}

080a094c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a094c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a094e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0950:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0952:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0954:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0956:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0958:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a095a:	460d      	mov	r5, r1
 80a095c:	b139      	cbz	r1, 80a096e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a095e:	4608      	mov	r0, r1
 80a0960:	f000 fd3c 	bl	80a13dc <strlen>
 80a0964:	4629      	mov	r1, r5
 80a0966:	4602      	mov	r2, r0
 80a0968:	4620      	mov	r0, r4
 80a096a:	f7ff ffd7 	bl	80a091c <_ZN6String4copyEPKcj>
}
 80a096e:	4620      	mov	r0, r4
 80a0970:	bd38      	pop	{r3, r4, r5, pc}

080a0972 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0972:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0974:	b510      	push	{r4, lr}
 80a0976:	460b      	mov	r3, r1
 80a0978:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a097a:	d007      	beq.n	80a098c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a097c:	6809      	ldr	r1, [r1, #0]
 80a097e:	b119      	cbz	r1, 80a0988 <_ZN6StringaSERKS_+0x16>
 80a0980:	689a      	ldr	r2, [r3, #8]
 80a0982:	f7ff ffcb 	bl	80a091c <_ZN6String4copyEPKcj>
 80a0986:	e001      	b.n	80a098c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0988:	f7ff ffa0 	bl	80a08cc <_ZN6String10invalidateEv>

	return *this;
}
 80a098c:	4620      	mov	r0, r4
 80a098e:	bd10      	pop	{r4, pc}

080a0990 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0990:	b510      	push	{r4, lr}
 80a0992:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0994:	2300      	movs	r3, #0
 80a0996:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0998:	6043      	str	r3, [r0, #4]
	len = 0;
 80a099a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a099c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a099e:	f7ff ffe8 	bl	80a0972 <_ZN6StringaSERKS_>
}
 80a09a2:	4620      	mov	r0, r4
 80a09a4:	bd10      	pop	{r4, pc}

080a09a6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a09a6:	b538      	push	{r3, r4, r5, lr}
 80a09a8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a09aa:	460c      	mov	r4, r1
 80a09ac:	b141      	cbz	r1, 80a09c0 <_ZN6StringaSEPKc+0x1a>
 80a09ae:	4608      	mov	r0, r1
 80a09b0:	f000 fd14 	bl	80a13dc <strlen>
 80a09b4:	4621      	mov	r1, r4
 80a09b6:	4602      	mov	r2, r0
 80a09b8:	4628      	mov	r0, r5
 80a09ba:	f7ff ffaf 	bl	80a091c <_ZN6String4copyEPKcj>
 80a09be:	e001      	b.n	80a09c4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a09c0:	f7ff ff84 	bl	80a08cc <_ZN6String10invalidateEv>

	return *this;
}
 80a09c4:	4628      	mov	r0, r5
 80a09c6:	bd38      	pop	{r3, r4, r5, pc}

080a09c8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a09c8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a09ca:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a09cc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a09ce:	b912      	cbnz	r2, 80a09d6 <_ZNK6String6equalsEPKc+0xe>
 80a09d0:	b919      	cbnz	r1, 80a09da <_ZNK6String6equalsEPKc+0x12>
 80a09d2:	2001      	movs	r0, #1
 80a09d4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a09d6:	b911      	cbnz	r1, 80a09de <_ZNK6String6equalsEPKc+0x16>
 80a09d8:	6803      	ldr	r3, [r0, #0]
 80a09da:	7818      	ldrb	r0, [r3, #0]
 80a09dc:	e002      	b.n	80a09e4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a09de:	6800      	ldr	r0, [r0, #0]
 80a09e0:	f000 fcf2 	bl	80a13c8 <strcmp>
 80a09e4:	fab0 f080 	clz	r0, r0
 80a09e8:	0940      	lsrs	r0, r0, #5
}
 80a09ea:	bd08      	pop	{r3, pc}

080a09ec <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a09ec:	b510      	push	{r4, lr}
 80a09ee:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a09f0:	6883      	ldr	r3, [r0, #8]
 80a09f2:	688a      	ldr	r2, [r1, #8]
 80a09f4:	1a9b      	subs	r3, r3, r2
 80a09f6:	42a3      	cmp	r3, r4
 80a09f8:	d30a      	bcc.n	80a0a10 <_ZNK6String10startsWithERKS_j+0x24>
 80a09fa:	6800      	ldr	r0, [r0, #0]
 80a09fc:	b158      	cbz	r0, 80a0a16 <_ZNK6String10startsWithERKS_j+0x2a>
 80a09fe:	6809      	ldr	r1, [r1, #0]
 80a0a00:	b141      	cbz	r1, 80a0a14 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a0a02:	4420      	add	r0, r4
 80a0a04:	f000 fcf2 	bl	80a13ec <strncmp>
 80a0a08:	fab0 f080 	clz	r0, r0
 80a0a0c:	0940      	lsrs	r0, r0, #5
 80a0a0e:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a0a10:	2000      	movs	r0, #0
 80a0a12:	bd10      	pop	{r4, pc}
 80a0a14:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 80a0a16:	bd10      	pop	{r4, pc}

080a0a18 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 80a0a18:	6882      	ldr	r2, [r0, #8]
 80a0a1a:	688b      	ldr	r3, [r1, #8]
 80a0a1c:	429a      	cmp	r2, r3
 80a0a1e:	d302      	bcc.n	80a0a26 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a0a20:	2200      	movs	r2, #0
 80a0a22:	f7ff bfe3 	b.w	80a09ec <_ZNK6String10startsWithERKS_j>
}
 80a0a26:	2000      	movs	r0, #0
 80a0a28:	4770      	bx	lr

080a0a2a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a0a2a:	6883      	ldr	r3, [r0, #8]
 80a0a2c:	428b      	cmp	r3, r1
 80a0a2e:	d903      	bls.n	80a0a38 <_ZNK6StringixEj+0xe>
 80a0a30:	6800      	ldr	r0, [r0, #0]
 80a0a32:	b110      	cbz	r0, 80a0a3a <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a0a34:	5c40      	ldrb	r0, [r0, r1]
 80a0a36:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a0a38:	2000      	movs	r0, #0
	return buffer[index];
}
 80a0a3a:	4770      	bx	lr

080a0a3c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 80a0a3c:	f7ff bff5 	b.w	80a0a2a <_ZNK6StringixEj>

080a0a40 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0a44:	461c      	mov	r4, r3
	if (left > right) {
 80a0a46:	429a      	cmp	r2, r3
 80a0a48:	bf88      	it	hi
 80a0a4a:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0a4c:	460e      	mov	r6, r1
 80a0a4e:	4615      	mov	r5, r2
	if (left > right) {
 80a0a50:	bf88      	it	hi
 80a0a52:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0a54:	490d      	ldr	r1, [pc, #52]	; (80a0a8c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a0a56:	bf88      	it	hi
 80a0a58:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a0a5a:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a0a5c:	f7ff ff76 	bl	80a094c <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a0a60:	68b1      	ldr	r1, [r6, #8]
 80a0a62:	428d      	cmp	r5, r1
 80a0a64:	d80f      	bhi.n	80a0a86 <_ZNK6String9substringEjj+0x46>
 80a0a66:	428c      	cmp	r4, r1
 80a0a68:	bf28      	it	cs
 80a0a6a:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a0a6c:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a0a6e:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a0a70:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a0a74:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a0a76:	6831      	ldr	r1, [r6, #0]
 80a0a78:	4638      	mov	r0, r7
 80a0a7a:	4429      	add	r1, r5
 80a0a7c:	f7ff ff93 	bl	80a09a6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a0a80:	6833      	ldr	r3, [r6, #0]
 80a0a82:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a0a86:	4638      	mov	r0, r7
 80a0a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a8c:	080a15de 	.word	0x080a15de

080a0a90 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a0a90:	b510      	push	{r4, lr}
 80a0a92:	4604      	mov	r4, r0
	return substring(left, len);
 80a0a94:	688b      	ldr	r3, [r1, #8]
 80a0a96:	f7ff ffd3 	bl	80a0a40 <_ZNK6String9substringEjj>
}
 80a0a9a:	4620      	mov	r0, r4
 80a0a9c:	bd10      	pop	{r4, pc}

080a0a9e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0a9e:	6800      	ldr	r0, [r0, #0]
 80a0aa0:	b108      	cbz	r0, 80a0aa6 <_ZNK6String5toIntEv+0x8>
 80a0aa2:	f000 bc43 	b.w	80a132c <atol>
	return 0;
}
 80a0aa6:	4770      	bx	lr

080a0aa8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0aa8:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0aae:	4c0d      	ldr	r4, [pc, #52]	; (80a0ae4 <_GLOBAL__sub_I_System+0x3c>)
 80a0ab0:	2500      	movs	r5, #0
 80a0ab2:	8063      	strh	r3, [r4, #2]
 80a0ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0ab8:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0aba:	80a3      	strh	r3, [r4, #4]
 80a0abc:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0abe:	f7ff fd6f 	bl	80a05a0 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0ac2:	a802      	add	r0, sp, #8
 80a0ac4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0ac8:	462a      	mov	r2, r5
 80a0aca:	4629      	mov	r1, r5
 80a0acc:	f7ff fc4e 	bl	80a036c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0ad0:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0ad2:	2b1e      	cmp	r3, #30
 80a0ad4:	d104      	bne.n	80a0ae0 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0ad6:	2303      	movs	r3, #3
 80a0ad8:	7023      	strb	r3, [r4, #0]
 80a0ada:	2311      	movs	r3, #17
 80a0adc:	8065      	strh	r5, [r4, #2]
 80a0ade:	80a3      	strh	r3, [r4, #4]
 80a0ae0:	b003      	add	sp, #12
 80a0ae2:	bd30      	pop	{r4, r5, pc}
 80a0ae4:	20000384 	.word	0x20000384

080a0ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0ae8:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0aea:	681a      	ldr	r2, [r3, #0]
 80a0aec:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0aee:	601a      	str	r2, [r3, #0]
 80a0af0:	4770      	bx	lr
 80a0af2:	bf00      	nop
 80a0af4:	20000300 	.word	0x20000300
 80a0af8:	2000038c 	.word	0x2000038c

080a0afc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0afc:	4770      	bx	lr

080a0afe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0afe:	7441      	strb	r1, [r0, #17]
 80a0b00:	4770      	bx	lr

080a0b02 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a0b02:	7c00      	ldrb	r0, [r0, #16]
 80a0b04:	f7ff bd14 	b.w	80a0530 <HAL_USART_Available_Data_For_Write>

080a0b08 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0b08:	7c00      	ldrb	r0, [r0, #16]
 80a0b0a:	f7ff bce9 	b.w	80a04e0 <HAL_USART_Available_Data>

080a0b0e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0b0e:	7c00      	ldrb	r0, [r0, #16]
 80a0b10:	f7ff bcf6 	b.w	80a0500 <HAL_USART_Peek_Data>

080a0b14 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0b14:	7c00      	ldrb	r0, [r0, #16]
 80a0b16:	f7ff bceb 	b.w	80a04f0 <HAL_USART_Read_Data>

080a0b1a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0b1a:	7c00      	ldrb	r0, [r0, #16]
 80a0b1c:	f7ff bcf8 	b.w	80a0510 <HAL_USART_Flush_Data>

080a0b20 <_ZN11USARTSerialD0Ev>:
 80a0b20:	b510      	push	{r4, lr}
 80a0b22:	4604      	mov	r4, r0
 80a0b24:	f7ff fab9 	bl	80a009a <_ZdlPv>
 80a0b28:	4620      	mov	r0, r4
 80a0b2a:	bd10      	pop	{r4, pc}

080a0b2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b2c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b2e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b30:	4604      	mov	r4, r0
 80a0b32:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b34:	b925      	cbnz	r5, 80a0b40 <_ZN11USARTSerial5writeEh+0x14>
 80a0b36:	7c00      	ldrb	r0, [r0, #16]
 80a0b38:	f7ff fcfa 	bl	80a0530 <HAL_USART_Available_Data_For_Write>
 80a0b3c:	2800      	cmp	r0, #0
 80a0b3e:	dd05      	ble.n	80a0b4c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b40:	4631      	mov	r1, r6
 80a0b42:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b48:	f7ff bcc2 	b.w	80a04d0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0b4c:	4628      	mov	r0, r5
 80a0b4e:	bd70      	pop	{r4, r5, r6, pc}

080a0b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b50:	b510      	push	{r4, lr}
 80a0b52:	4604      	mov	r4, r0
 80a0b54:	4608      	mov	r0, r1
 80a0b56:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0b58:	2200      	movs	r2, #0
 80a0b5a:	6062      	str	r2, [r4, #4]
 80a0b5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b60:	60a2      	str	r2, [r4, #8]
 80a0b62:	4a05      	ldr	r2, [pc, #20]	; (80a0b78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0b64:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b66:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0b68:	2201      	movs	r2, #1
 80a0b6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0b6c:	461a      	mov	r2, r3
 80a0b6e:	f7ff fca7 	bl	80a04c0 <HAL_USART_Init>
}
 80a0b72:	4620      	mov	r0, r4
 80a0b74:	bd10      	pop	{r4, pc}
 80a0b76:	bf00      	nop
 80a0b78:	080a16f0 	.word	0x080a16f0

080a0b7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0b7c:	7c00      	ldrb	r0, [r0, #16]
 80a0b7e:	f7ff bccf 	b.w	80a0520 <HAL_USART_Is_Enabled>
	...

080a0b84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0b84:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b86:	4d0c      	ldr	r5, [pc, #48]	; (80a0bb8 <_Z22__fetch_global_Serial1v+0x34>)
 80a0b88:	6829      	ldr	r1, [r5, #0]
 80a0b8a:	f011 0401 	ands.w	r4, r1, #1
 80a0b8e:	d111      	bne.n	80a0bb4 <_Z22__fetch_global_Serial1v+0x30>
 80a0b90:	4628      	mov	r0, r5
 80a0b92:	f7ff fa84 	bl	80a009e <__cxa_guard_acquire>
 80a0b96:	b168      	cbz	r0, 80a0bb4 <_Z22__fetch_global_Serial1v+0x30>
 80a0b98:	4a08      	ldr	r2, [pc, #32]	; (80a0bbc <_Z22__fetch_global_Serial1v+0x38>)
 80a0b9a:	4621      	mov	r1, r4
 80a0b9c:	4b08      	ldr	r3, [pc, #32]	; (80a0bc0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b9e:	4809      	ldr	r0, [pc, #36]	; (80a0bc4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0ba0:	f7ff ffd6 	bl	80a0b50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0ba4:	4628      	mov	r0, r5
 80a0ba6:	f7ff fa7f 	bl	80a00a8 <__cxa_guard_release>
 80a0baa:	4a07      	ldr	r2, [pc, #28]	; (80a0bc8 <_Z22__fetch_global_Serial1v+0x44>)
 80a0bac:	4907      	ldr	r1, [pc, #28]	; (80a0bcc <_Z22__fetch_global_Serial1v+0x48>)
 80a0bae:	4805      	ldr	r0, [pc, #20]	; (80a0bc4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0bb0:	f000 fa6e 	bl	80a1090 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0bb4:	4803      	ldr	r0, [pc, #12]	; (80a0bc4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0bb6:	bd38      	pop	{r3, r4, r5, pc}
 80a0bb8:	20000428 	.word	0x20000428
 80a0bbc:	2000042c 	.word	0x2000042c
 80a0bc0:	200003a4 	.word	0x200003a4
 80a0bc4:	20000390 	.word	0x20000390
 80a0bc8:	2000036c 	.word	0x2000036c
 80a0bcc:	080a0afd 	.word	0x080a0afd

080a0bd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0bd0:	7441      	strb	r1, [r0, #17]
 80a0bd2:	4770      	bx	lr

080a0bd4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a0bd4:	4770      	bx	lr

080a0bd6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	7c00      	ldrb	r0, [r0, #16]
 80a0bda:	f7ff bcc9 	b.w	80a0570 <HAL_USB_USART_Receive_Data>

080a0bde <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0bde:	2101      	movs	r1, #1
 80a0be0:	7c00      	ldrb	r0, [r0, #16]
 80a0be2:	f7ff bcc5 	b.w	80a0570 <HAL_USB_USART_Receive_Data>

080a0be6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0be6:	7c00      	ldrb	r0, [r0, #16]
 80a0be8:	f7ff bcba 	b.w	80a0560 <HAL_USB_USART_Available_Data_For_Write>

080a0bec <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0bec:	7c00      	ldrb	r0, [r0, #16]
 80a0bee:	f7ff bcaf 	b.w	80a0550 <HAL_USB_USART_Available_Data>

080a0bf2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0bf2:	b538      	push	{r3, r4, r5, lr}
 80a0bf4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bf6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0bf8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0bfa:	f7ff fcb1 	bl	80a0560 <HAL_USB_USART_Available_Data_For_Write>
 80a0bfe:	2800      	cmp	r0, #0
 80a0c00:	dc01      	bgt.n	80a0c06 <_ZN9USBSerial5writeEh+0x14>
 80a0c02:	7c60      	ldrb	r0, [r4, #17]
 80a0c04:	b120      	cbz	r0, 80a0c10 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a0c06:	4629      	mov	r1, r5
 80a0c08:	7c20      	ldrb	r0, [r4, #16]
 80a0c0a:	f7ff fcb9 	bl	80a0580 <HAL_USB_USART_Send_Data>
    return 1;
 80a0c0e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0c10:	bd38      	pop	{r3, r4, r5, pc}

080a0c12 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0c12:	7c00      	ldrb	r0, [r0, #16]
 80a0c14:	f7ff bcbc 	b.w	80a0590 <HAL_USB_USART_Flush_Data>

080a0c18 <_ZN9USBSerialD0Ev>:
 80a0c18:	b510      	push	{r4, lr}
 80a0c1a:	4604      	mov	r4, r0
 80a0c1c:	f7ff fa3d 	bl	80a009a <_ZdlPv>
 80a0c20:	4620      	mov	r0, r4
 80a0c22:	bd10      	pop	{r4, pc}

080a0c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0c24:	b510      	push	{r4, lr}
 80a0c26:	4604      	mov	r4, r0
 80a0c28:	2300      	movs	r3, #0
 80a0c2a:	6063      	str	r3, [r4, #4]
 80a0c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c30:	60a3      	str	r3, [r4, #8]
 80a0c32:	4b05      	ldr	r3, [pc, #20]	; (80a0c48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0c34:	4608      	mov	r0, r1
 80a0c36:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0c38:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0c3a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0c3c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0c3e:	4611      	mov	r1, r2
 80a0c40:	f7ff fc7e 	bl	80a0540 <HAL_USB_USART_Init>
}
 80a0c44:	4620      	mov	r0, r4
 80a0c46:	bd10      	pop	{r4, pc}
 80a0c48:	080a1720 	.word	0x080a1720

080a0c4c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0c4c:	b510      	push	{r4, lr}
 80a0c4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0c50:	2214      	movs	r2, #20
 80a0c52:	2100      	movs	r1, #0
 80a0c54:	f000 fb87 	bl	80a1366 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c58:	4b05      	ldr	r3, [pc, #20]	; (80a0c70 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0c5a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0c5c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0c5e:	4b05      	ldr	r3, [pc, #20]	; (80a0c74 <_Z19acquireSerialBufferv+0x28>)
 80a0c60:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0c62:	f240 1301 	movw	r3, #257	; 0x101
 80a0c66:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0c68:	2381      	movs	r3, #129	; 0x81
 80a0c6a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0c6c:	bd10      	pop	{r4, pc}
 80a0c6e:	bf00      	nop
 80a0c70:	20000535 	.word	0x20000535
 80a0c74:	200004b4 	.word	0x200004b4

080a0c78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0c78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c7a:	4d0e      	ldr	r5, [pc, #56]	; (80a0cb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0c7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0c7e:	a801      	add	r0, sp, #4
 80a0c80:	f7ff ffe4 	bl	80a0c4c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0c84:	6829      	ldr	r1, [r5, #0]
 80a0c86:	f011 0401 	ands.w	r4, r1, #1
 80a0c8a:	d110      	bne.n	80a0cae <_Z16_fetch_usbserialv+0x36>
 80a0c8c:	4628      	mov	r0, r5
 80a0c8e:	f7ff fa06 	bl	80a009e <__cxa_guard_acquire>
 80a0c92:	b160      	cbz	r0, 80a0cae <_Z16_fetch_usbserialv+0x36>
 80a0c94:	aa01      	add	r2, sp, #4
 80a0c96:	4621      	mov	r1, r4
 80a0c98:	4807      	ldr	r0, [pc, #28]	; (80a0cb8 <_Z16_fetch_usbserialv+0x40>)
 80a0c9a:	f7ff ffc3 	bl	80a0c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0c9e:	4628      	mov	r0, r5
 80a0ca0:	f7ff fa02 	bl	80a00a8 <__cxa_guard_release>
 80a0ca4:	4a05      	ldr	r2, [pc, #20]	; (80a0cbc <_Z16_fetch_usbserialv+0x44>)
 80a0ca6:	4906      	ldr	r1, [pc, #24]	; (80a0cc0 <_Z16_fetch_usbserialv+0x48>)
 80a0ca8:	4803      	ldr	r0, [pc, #12]	; (80a0cb8 <_Z16_fetch_usbserialv+0x40>)
 80a0caa:	f000 f9f1 	bl	80a1090 <__aeabi_atexit>
	return _usbserial;
}
 80a0cae:	4802      	ldr	r0, [pc, #8]	; (80a0cb8 <_Z16_fetch_usbserialv+0x40>)
 80a0cb0:	b007      	add	sp, #28
 80a0cb2:	bd30      	pop	{r4, r5, pc}
 80a0cb4:	200004b0 	.word	0x200004b0
 80a0cb8:	20000638 	.word	0x20000638
 80a0cbc:	2000036c 	.word	0x2000036c
 80a0cc0:	080a0bd5 	.word	0x080a0bd5

080a0cc4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0cc4:	b510      	push	{r4, lr}
 80a0cc6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0cc8:	2214      	movs	r2, #20
 80a0cca:	2100      	movs	r1, #0
 80a0ccc:	f000 fb4b 	bl	80a1366 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cd0:	4b05      	ldr	r3, [pc, #20]	; (80a0ce8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0cd2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0cd4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0cd6:	4b05      	ldr	r3, [pc, #20]	; (80a0cec <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0cd8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0cda:	f240 1301 	movw	r3, #257	; 0x101
 80a0cde:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ce0:	2381      	movs	r3, #129	; 0x81
 80a0ce2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ce4:	bd10      	pop	{r4, pc}
 80a0ce6:	bf00      	nop
 80a0ce8:	200006e8 	.word	0x200006e8
 80a0cec:	20000650 	.word	0x20000650

080a0cf0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0cf0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cf2:	4c0e      	ldr	r4, [pc, #56]	; (80a0d2c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0cf4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0cf6:	a801      	add	r0, sp, #4
 80a0cf8:	f7ff ffe4 	bl	80a0cc4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0cfc:	6823      	ldr	r3, [r4, #0]
 80a0cfe:	07db      	lsls	r3, r3, #31
 80a0d00:	d410      	bmi.n	80a0d24 <_Z17_fetch_usbserial1v+0x34>
 80a0d02:	4620      	mov	r0, r4
 80a0d04:	f7ff f9cb 	bl	80a009e <__cxa_guard_acquire>
 80a0d08:	b160      	cbz	r0, 80a0d24 <_Z17_fetch_usbserial1v+0x34>
 80a0d0a:	aa01      	add	r2, sp, #4
 80a0d0c:	2101      	movs	r1, #1
 80a0d0e:	4808      	ldr	r0, [pc, #32]	; (80a0d30 <_Z17_fetch_usbserial1v+0x40>)
 80a0d10:	f7ff ff88 	bl	80a0c24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	f7ff f9c7 	bl	80a00a8 <__cxa_guard_release>
 80a0d1a:	4a06      	ldr	r2, [pc, #24]	; (80a0d34 <_Z17_fetch_usbserial1v+0x44>)
 80a0d1c:	4906      	ldr	r1, [pc, #24]	; (80a0d38 <_Z17_fetch_usbserial1v+0x48>)
 80a0d1e:	4804      	ldr	r0, [pc, #16]	; (80a0d30 <_Z17_fetch_usbserial1v+0x40>)
 80a0d20:	f000 f9b6 	bl	80a1090 <__aeabi_atexit>
  return _usbserial1;
}
 80a0d24:	4802      	ldr	r0, [pc, #8]	; (80a0d30 <_Z17_fetch_usbserial1v+0x40>)
 80a0d26:	b006      	add	sp, #24
 80a0d28:	bd10      	pop	{r4, pc}
 80a0d2a:	bf00      	nop
 80a0d2c:	2000064c 	.word	0x2000064c
 80a0d30:	200006d4 	.word	0x200006d4
 80a0d34:	2000036c 	.word	0x2000036c
 80a0d38:	080a0bd5 	.word	0x080a0bd5

080a0d3c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0d3c:	4770      	bx	lr

080a0d3e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0d3e:	2200      	movs	r2, #0
 80a0d40:	4611      	mov	r1, r2
 80a0d42:	4610      	mov	r0, r2
 80a0d44:	f7ff bc58 	b.w	80a05f8 <network_ready>

080a0d48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0d48:	4803      	ldr	r0, [pc, #12]	; (80a0d58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d4a:	4b04      	ldr	r3, [pc, #16]	; (80a0d5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0d4c:	4a04      	ldr	r2, [pc, #16]	; (80a0d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a0d4e:	4905      	ldr	r1, [pc, #20]	; (80a0d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a0d50:	6003      	str	r3, [r0, #0]
 80a0d52:	f000 b99d 	b.w	80a1090 <__aeabi_atexit>
 80a0d56:	bf00      	nop
 80a0d58:	200007ec 	.word	0x200007ec
 80a0d5c:	080a1750 	.word	0x080a1750
 80a0d60:	2000036c 	.word	0x2000036c
 80a0d64:	080a0d3d 	.word	0x080a0d3d

080a0d68 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0d68:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0d6a:	4b14      	ldr	r3, [pc, #80]	; (80a0dbc <serialEventRun+0x54>)
 80a0d6c:	b133      	cbz	r3, 80a0d7c <serialEventRun+0x14>
 80a0d6e:	f7ff ff83 	bl	80a0c78 <_Z16_fetch_usbserialv>
 80a0d72:	6803      	ldr	r3, [r0, #0]
 80a0d74:	691b      	ldr	r3, [r3, #16]
 80a0d76:	4798      	blx	r3
 80a0d78:	2800      	cmp	r0, #0
 80a0d7a:	dc16      	bgt.n	80a0daa <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0d7c:	4b10      	ldr	r3, [pc, #64]	; (80a0dc0 <serialEventRun+0x58>)
 80a0d7e:	b133      	cbz	r3, 80a0d8e <serialEventRun+0x26>
 80a0d80:	f7ff ff00 	bl	80a0b84 <_Z22__fetch_global_Serial1v>
 80a0d84:	6803      	ldr	r3, [r0, #0]
 80a0d86:	691b      	ldr	r3, [r3, #16]
 80a0d88:	4798      	blx	r3
 80a0d8a:	2800      	cmp	r0, #0
 80a0d8c:	dc10      	bgt.n	80a0db0 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0d8e:	4b0d      	ldr	r3, [pc, #52]	; (80a0dc4 <serialEventRun+0x5c>)
 80a0d90:	b10b      	cbz	r3, 80a0d96 <serialEventRun+0x2e>
 80a0d92:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0d96:	4b0c      	ldr	r3, [pc, #48]	; (80a0dc8 <serialEventRun+0x60>)
 80a0d98:	b17b      	cbz	r3, 80a0dba <serialEventRun+0x52>
 80a0d9a:	f7ff ffa9 	bl	80a0cf0 <_Z17_fetch_usbserial1v>
 80a0d9e:	6803      	ldr	r3, [r0, #0]
 80a0da0:	691b      	ldr	r3, [r3, #16]
 80a0da2:	4798      	blx	r3
 80a0da4:	2800      	cmp	r0, #0
 80a0da6:	dc06      	bgt.n	80a0db6 <serialEventRun+0x4e>
 80a0da8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0daa:	f3af 8000 	nop.w
 80a0dae:	e7e5      	b.n	80a0d7c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0db0:	f3af 8000 	nop.w
 80a0db4:	e7eb      	b.n	80a0d8e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0db6:	f3af 8000 	nop.w
 80a0dba:	bd08      	pop	{r3, pc}
	...

080a0dcc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0dcc:	b508      	push	{r3, lr}
	serialEventRun();
 80a0dce:	f7ff ffcb 	bl	80a0d68 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0dd2:	f7ff fadb 	bl	80a038c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0dd6:	4b01      	ldr	r3, [pc, #4]	; (80a0ddc <_post_loop+0x10>)
 80a0dd8:	6018      	str	r0, [r3, #0]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	200007f8 	.word	0x200007f8

080a0de0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0de0:	4802      	ldr	r0, [pc, #8]	; (80a0dec <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0de2:	4a03      	ldr	r2, [pc, #12]	; (80a0df0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0de4:	4903      	ldr	r1, [pc, #12]	; (80a0df4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0de6:	1a12      	subs	r2, r2, r0
 80a0de8:	f000 bab2 	b.w	80a1350 <memcpy>
 80a0dec:	40024000 	.word	0x40024000
 80a0df0:	40024004 	.word	0x40024004
 80a0df4:	080a18f0 	.word	0x080a18f0

080a0df8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0df8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0dfa:	2300      	movs	r3, #0
 80a0dfc:	9300      	str	r3, [sp, #0]
 80a0dfe:	461a      	mov	r2, r3
 80a0e00:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e04:	f7ff fbde 	bl	80a05c4 <system_ctrl_set_result>
}
 80a0e08:	b003      	add	sp, #12
 80a0e0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0e10 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0e10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0e12:	8843      	ldrh	r3, [r0, #2]
 80a0e14:	2b0a      	cmp	r3, #10
 80a0e16:	d008      	beq.n	80a0e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0e18:	2b50      	cmp	r3, #80	; 0x50
 80a0e1a:	d109      	bne.n	80a0e30 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0e1c:	4b09      	ldr	r3, [pc, #36]	; (80a0e44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0e1e:	681b      	ldr	r3, [r3, #0]
 80a0e20:	b13b      	cbz	r3, 80a0e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0e22:	b003      	add	sp, #12
 80a0e24:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0e28:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0e2a:	f7ff ffe5 	bl	80a0df8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0e2e:	e006      	b.n	80a0e3e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0e30:	2300      	movs	r3, #0
 80a0e32:	9300      	str	r3, [sp, #0]
 80a0e34:	461a      	mov	r2, r3
 80a0e36:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0e3a:	f7ff fbc3 	bl	80a05c4 <system_ctrl_set_result>
        break;
    }
}
 80a0e3e:	b003      	add	sp, #12
 80a0e40:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0e44:	200007f0 	.word	0x200007f0

080a0e48 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0e48:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0e4a:	4c10      	ldr	r4, [pc, #64]	; (80a0e8c <module_user_init_hook+0x44>)
 80a0e4c:	4d10      	ldr	r5, [pc, #64]	; (80a0e90 <module_user_init_hook+0x48>)
 80a0e4e:	6823      	ldr	r3, [r4, #0]
 80a0e50:	42ab      	cmp	r3, r5
 80a0e52:	4b10      	ldr	r3, [pc, #64]	; (80a0e94 <module_user_init_hook+0x4c>)
 80a0e54:	bf0c      	ite	eq
 80a0e56:	2201      	moveq	r2, #1
 80a0e58:	2200      	movne	r2, #0
 80a0e5a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0e5c:	d002      	beq.n	80a0e64 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0e5e:	f7ff ffbf 	bl	80a0de0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0e62:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a0e64:	f7ff fa8a 	bl	80a037c <HAL_RNG_GetRandomNumber>
 80a0e68:	f000 fa86 	bl	80a1378 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0e6c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e98 <module_user_init_hook+0x50>)
 80a0e6e:	b11b      	cbz	r3, 80a0e78 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0e70:	f7ff fa84 	bl	80a037c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a0e74:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0e78:	2100      	movs	r1, #0
 80a0e7a:	4807      	ldr	r0, [pc, #28]	; (80a0e98 <module_user_init_hook+0x50>)
 80a0e7c:	f7ff fbb4 	bl	80a05e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0e84:	2100      	movs	r1, #0
 80a0e86:	4805      	ldr	r0, [pc, #20]	; (80a0e9c <module_user_init_hook+0x54>)
 80a0e88:	f7ff bb92 	b.w	80a05b0 <system_ctrl_set_app_request_handler>
 80a0e8c:	40024000 	.word	0x40024000
 80a0e90:	9a271c1e 	.word	0x9a271c1e
 80a0e94:	200007f4 	.word	0x200007f4
 80a0e98:	00000000 	.word	0x00000000
 80a0e9c:	080a0e11 	.word	0x080a0e11

080a0ea0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0ea0:	b510      	push	{r4, lr}
 80a0ea2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0ea4:	480f      	ldr	r0, [pc, #60]	; (80a0ee4 <pinAvailable+0x44>)
 80a0ea6:	f7ff fd07 	bl	80a08b8 <_ZN8SPIClass9isEnabledEv>
 80a0eaa:	b128      	cbz	r0, 80a0eb8 <pinAvailable+0x18>
 80a0eac:	f1a4 030d 	sub.w	r3, r4, #13
 80a0eb0:	2b02      	cmp	r3, #2
 80a0eb2:	d801      	bhi.n	80a0eb8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0eb4:	2000      	movs	r0, #0
 80a0eb6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0eb8:	f000 f890 	bl	80a0fdc <_Z19__fetch_global_Wirev>
 80a0ebc:	f7ff fc30 	bl	80a0720 <_ZN7TwoWire9isEnabledEv>
 80a0ec0:	b108      	cbz	r0, 80a0ec6 <pinAvailable+0x26>
 80a0ec2:	2c01      	cmp	r4, #1
 80a0ec4:	d9f6      	bls.n	80a0eb4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0ec6:	f7ff fe5d 	bl	80a0b84 <_Z22__fetch_global_Serial1v>
 80a0eca:	f7ff fe57 	bl	80a0b7c <_ZN11USARTSerial9isEnabledEv>
 80a0ece:	b118      	cbz	r0, 80a0ed8 <pinAvailable+0x38>
 80a0ed0:	f1a4 0312 	sub.w	r3, r4, #18
 80a0ed4:	2b01      	cmp	r3, #1
 80a0ed6:	d9ed      	bls.n	80a0eb4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0ed8:	2c17      	cmp	r4, #23
 80a0eda:	bf8c      	ite	hi
 80a0edc:	2000      	movhi	r0, #0
 80a0ede:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0ee0:	bd10      	pop	{r4, pc}
 80a0ee2:	bf00      	nop
 80a0ee4:	2000082c 	.word	0x2000082c

080a0ee8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ee8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0eea:	b538      	push	{r3, r4, r5, lr}
 80a0eec:	4604      	mov	r4, r0
 80a0eee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0ef0:	d80a      	bhi.n	80a0f08 <pinMode+0x20>
 80a0ef2:	29ff      	cmp	r1, #255	; 0xff
 80a0ef4:	d008      	beq.n	80a0f08 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0ef6:	f7ff ffd3 	bl	80a0ea0 <pinAvailable>
 80a0efa:	b128      	cbz	r0, 80a0f08 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0efc:	4629      	mov	r1, r5
 80a0efe:	4620      	mov	r0, r4
}
 80a0f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0f04:	f7ff ba5a 	b.w	80a03bc <HAL_Pin_Mode>
 80a0f08:	bd38      	pop	{r3, r4, r5, pc}

080a0f0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0f0a:	b538      	push	{r3, r4, r5, lr}
 80a0f0c:	4604      	mov	r4, r0
 80a0f0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f10:	f7ff fa5c 	bl	80a03cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0f14:	28ff      	cmp	r0, #255	; 0xff
 80a0f16:	d010      	beq.n	80a0f3a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0f18:	2806      	cmp	r0, #6
 80a0f1a:	d804      	bhi.n	80a0f26 <digitalWrite+0x1c>
 80a0f1c:	234d      	movs	r3, #77	; 0x4d
 80a0f1e:	fa23 f000 	lsr.w	r0, r3, r0
 80a0f22:	07c3      	lsls	r3, r0, #31
 80a0f24:	d409      	bmi.n	80a0f3a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f26:	4620      	mov	r0, r4
 80a0f28:	f7ff ffba 	bl	80a0ea0 <pinAvailable>
 80a0f2c:	b128      	cbz	r0, 80a0f3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f2e:	4629      	mov	r1, r5
 80a0f30:	4620      	mov	r0, r4
}
 80a0f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f36:	f7ff ba51 	b.w	80a03dc <HAL_GPIO_Write>
 80a0f3a:	bd38      	pop	{r3, r4, r5, pc}

080a0f3c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0f3c:	b510      	push	{r4, lr}
 80a0f3e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f40:	f7ff fa44 	bl	80a03cc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0f44:	3804      	subs	r0, #4
 80a0f46:	b2c0      	uxtb	r0, r0
 80a0f48:	2801      	cmp	r0, #1
 80a0f4a:	d908      	bls.n	80a0f5e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f7ff ffa7 	bl	80a0ea0 <pinAvailable>
 80a0f52:	b120      	cbz	r0, 80a0f5e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f54:	4620      	mov	r0, r4
}
 80a0f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f5a:	f7ff ba47 	b.w	80a03ec <HAL_GPIO_Read>
}
 80a0f5e:	2000      	movs	r0, #0
 80a0f60:	bd10      	pop	{r4, pc}

080a0f62 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a0f62:	b510      	push	{r4, lr}
 80a0f64:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a0f66:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a0f68:	bf9c      	itt	ls
 80a0f6a:	340a      	addls	r4, #10
 80a0f6c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f6e:	4620      	mov	r0, r4
 80a0f70:	f7ff ff96 	bl	80a0ea0 <pinAvailable>
 80a0f74:	b150      	cbz	r0, 80a0f8c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a0f76:	2103      	movs	r1, #3
 80a0f78:	4620      	mov	r0, r4
 80a0f7a:	f7ff fa17 	bl	80a03ac <HAL_Validate_Pin_Function>
 80a0f7e:	2803      	cmp	r0, #3
 80a0f80:	d104      	bne.n	80a0f8c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0f82:	4620      	mov	r0, r4
}
 80a0f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a0f88:	f7ff ba40 	b.w	80a040c <HAL_ADC_Read>
}
 80a0f8c:	2000      	movs	r0, #0
 80a0f8e:	bd10      	pop	{r4, pc}

080a0f90 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a0f90:	b538      	push	{r3, r4, r5, lr}
 80a0f92:	4604      	mov	r4, r0
 80a0f94:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a0f96:	f7ff ff83 	bl	80a0ea0 <pinAvailable>
 80a0f9a:	b1f0      	cbz	r0, 80a0fda <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a0f9c:	2104      	movs	r1, #4
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	f7ff fa04 	bl	80a03ac <HAL_Validate_Pin_Function>
 80a0fa4:	2804      	cmp	r0, #4
 80a0fa6:	d105      	bne.n	80a0fb4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a0fa8:	b2a9      	uxth	r1, r5
 80a0faa:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a0fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a0fb0:	f7ff ba24 	b.w	80a03fc <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a0fb4:	2102      	movs	r1, #2
 80a0fb6:	4620      	mov	r0, r4
 80a0fb8:	f7ff f9f8 	bl	80a03ac <HAL_Validate_Pin_Function>
 80a0fbc:	2802      	cmp	r0, #2
 80a0fbe:	d10c      	bne.n	80a0fda <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0fc0:	4620      	mov	r0, r4
 80a0fc2:	f7ff fa03 	bl	80a03cc <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a0fc6:	2801      	cmp	r0, #1
 80a0fc8:	d001      	beq.n	80a0fce <_Z11analogWritetm+0x3e>
 80a0fca:	2804      	cmp	r0, #4
 80a0fcc:	d105      	bne.n	80a0fda <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a0fce:	4629      	mov	r1, r5
 80a0fd0:	4620      	mov	r0, r4
    }
}
 80a0fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a0fd6:	f7ff ba21 	b.w	80a041c <HAL_PWM_Write_Ext>
 80a0fda:	bd38      	pop	{r3, r4, r5, pc}

080a0fdc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0fdc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0fde:	4d0b      	ldr	r5, [pc, #44]	; (80a100c <_Z19__fetch_global_Wirev+0x30>)
 80a0fe0:	6829      	ldr	r1, [r5, #0]
 80a0fe2:	f011 0401 	ands.w	r4, r1, #1
 80a0fe6:	d10f      	bne.n	80a1008 <_Z19__fetch_global_Wirev+0x2c>
 80a0fe8:	4628      	mov	r0, r5
 80a0fea:	f7ff f858 	bl	80a009e <__cxa_guard_acquire>
 80a0fee:	b158      	cbz	r0, 80a1008 <_Z19__fetch_global_Wirev+0x2c>
 80a0ff0:	4621      	mov	r1, r4
 80a0ff2:	4807      	ldr	r0, [pc, #28]	; (80a1010 <_Z19__fetch_global_Wirev+0x34>)
 80a0ff4:	f7ff fb82 	bl	80a06fc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0ff8:	4628      	mov	r0, r5
 80a0ffa:	f7ff f855 	bl	80a00a8 <__cxa_guard_release>
 80a0ffe:	4a05      	ldr	r2, [pc, #20]	; (80a1014 <_Z19__fetch_global_Wirev+0x38>)
 80a1000:	4905      	ldr	r1, [pc, #20]	; (80a1018 <_Z19__fetch_global_Wirev+0x3c>)
 80a1002:	4803      	ldr	r0, [pc, #12]	; (80a1010 <_Z19__fetch_global_Wirev+0x34>)
 80a1004:	f000 f844 	bl	80a1090 <__aeabi_atexit>
	return wire;
}
 80a1008:	4801      	ldr	r0, [pc, #4]	; (80a1010 <_Z19__fetch_global_Wirev+0x34>)
 80a100a:	bd38      	pop	{r3, r4, r5, pc}
 80a100c:	200007fc 	.word	0x200007fc
 80a1010:	20000800 	.word	0x20000800
 80a1014:	2000036c 	.word	0x2000036c
 80a1018:	080a06a5 	.word	0x080a06a5

080a101c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a101c:	b513      	push	{r0, r1, r4, lr}
 80a101e:	4c08      	ldr	r4, [pc, #32]	; (80a1040 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1020:	2300      	movs	r3, #0
 80a1022:	461a      	mov	r2, r3
 80a1024:	4619      	mov	r1, r3
 80a1026:	9300      	str	r3, [sp, #0]
 80a1028:	4620      	mov	r0, r4
 80a102a:	f7ff fbab 	bl	80a0784 <_ZN9IPAddressC1Ehhhh>
 80a102e:	4620      	mov	r0, r4
 80a1030:	4a04      	ldr	r2, [pc, #16]	; (80a1044 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1032:	4905      	ldr	r1, [pc, #20]	; (80a1048 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1034:	b002      	add	sp, #8
 80a1036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a103a:	f000 b829 	b.w	80a1090 <__aeabi_atexit>
 80a103e:	bf00      	nop
 80a1040:	20000814 	.word	0x20000814
 80a1044:	2000036c 	.word	0x2000036c
 80a1048:	080a0729 	.word	0x080a0729

080a104c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a104c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a104e:	4c0c      	ldr	r4, [pc, #48]	; (80a1080 <_GLOBAL__sub_I_SPI+0x34>)
 80a1050:	4e0c      	ldr	r6, [pc, #48]	; (80a1084 <_GLOBAL__sub_I_SPI+0x38>)
 80a1052:	4d0d      	ldr	r5, [pc, #52]	; (80a1088 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1054:	2100      	movs	r1, #0
 80a1056:	4620      	mov	r0, r4
 80a1058:	f7ff fc1a 	bl	80a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a105c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a105e:	4c0b      	ldr	r4, [pc, #44]	; (80a108c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1060:	4632      	mov	r2, r6
 80a1062:	4629      	mov	r1, r5
 80a1064:	f000 f814 	bl	80a1090 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1068:	2101      	movs	r1, #1
 80a106a:	4620      	mov	r0, r4
 80a106c:	f7ff fc10 	bl	80a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1070:	4632      	mov	r2, r6
 80a1072:	4629      	mov	r1, r5
 80a1074:	4620      	mov	r0, r4
 80a1076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a107a:	f000 b809 	b.w	80a1090 <__aeabi_atexit>
 80a107e:	bf00      	nop
 80a1080:	2000082c 	.word	0x2000082c
 80a1084:	2000036c 	.word	0x2000036c
 80a1088:	080a0881 	.word	0x080a0881
 80a108c:	2000083c 	.word	0x2000083c

080a1090 <__aeabi_atexit>:
 80a1090:	460b      	mov	r3, r1
 80a1092:	4601      	mov	r1, r0
 80a1094:	4618      	mov	r0, r3
 80a1096:	f000 b94d 	b.w	80a1334 <__cxa_atexit>
	...

080a109c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a109c:	4b24      	ldr	r3, [pc, #144]	; (80a1130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a109e:	681a      	ldr	r2, [r3, #0]
 80a10a0:	07d0      	lsls	r0, r2, #31
 80a10a2:	bf5c      	itt	pl
 80a10a4:	2201      	movpl	r2, #1
 80a10a6:	601a      	strpl	r2, [r3, #0]
 80a10a8:	4b22      	ldr	r3, [pc, #136]	; (80a1134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a10aa:	681a      	ldr	r2, [r3, #0]
 80a10ac:	07d1      	lsls	r1, r2, #31
 80a10ae:	bf5c      	itt	pl
 80a10b0:	2201      	movpl	r2, #1
 80a10b2:	601a      	strpl	r2, [r3, #0]
 80a10b4:	4b20      	ldr	r3, [pc, #128]	; (80a1138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a10b6:	681a      	ldr	r2, [r3, #0]
 80a10b8:	07d2      	lsls	r2, r2, #31
 80a10ba:	bf5c      	itt	pl
 80a10bc:	2201      	movpl	r2, #1
 80a10be:	601a      	strpl	r2, [r3, #0]
 80a10c0:	4b1e      	ldr	r3, [pc, #120]	; (80a113c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a10c2:	681a      	ldr	r2, [r3, #0]
 80a10c4:	07d0      	lsls	r0, r2, #31
 80a10c6:	bf5c      	itt	pl
 80a10c8:	2201      	movpl	r2, #1
 80a10ca:	601a      	strpl	r2, [r3, #0]
 80a10cc:	4b1c      	ldr	r3, [pc, #112]	; (80a1140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a10ce:	681a      	ldr	r2, [r3, #0]
 80a10d0:	07d1      	lsls	r1, r2, #31
 80a10d2:	bf5c      	itt	pl
 80a10d4:	2201      	movpl	r2, #1
 80a10d6:	601a      	strpl	r2, [r3, #0]
 80a10d8:	4b1a      	ldr	r3, [pc, #104]	; (80a1144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a10da:	681a      	ldr	r2, [r3, #0]
 80a10dc:	07d2      	lsls	r2, r2, #31
 80a10de:	bf5c      	itt	pl
 80a10e0:	2201      	movpl	r2, #1
 80a10e2:	601a      	strpl	r2, [r3, #0]
 80a10e4:	4b18      	ldr	r3, [pc, #96]	; (80a1148 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a10e6:	681a      	ldr	r2, [r3, #0]
 80a10e8:	07d0      	lsls	r0, r2, #31
 80a10ea:	bf5c      	itt	pl
 80a10ec:	2201      	movpl	r2, #1
 80a10ee:	601a      	strpl	r2, [r3, #0]
 80a10f0:	4b16      	ldr	r3, [pc, #88]	; (80a114c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a10f2:	681a      	ldr	r2, [r3, #0]
 80a10f4:	07d1      	lsls	r1, r2, #31
 80a10f6:	bf5c      	itt	pl
 80a10f8:	2201      	movpl	r2, #1
 80a10fa:	601a      	strpl	r2, [r3, #0]
 80a10fc:	4b14      	ldr	r3, [pc, #80]	; (80a1150 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a10fe:	681a      	ldr	r2, [r3, #0]
 80a1100:	07d2      	lsls	r2, r2, #31
 80a1102:	bf5c      	itt	pl
 80a1104:	2201      	movpl	r2, #1
 80a1106:	601a      	strpl	r2, [r3, #0]
 80a1108:	4b12      	ldr	r3, [pc, #72]	; (80a1154 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a110a:	681a      	ldr	r2, [r3, #0]
 80a110c:	07d0      	lsls	r0, r2, #31
 80a110e:	bf5c      	itt	pl
 80a1110:	2201      	movpl	r2, #1
 80a1112:	601a      	strpl	r2, [r3, #0]
 80a1114:	4b10      	ldr	r3, [pc, #64]	; (80a1158 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1116:	681a      	ldr	r2, [r3, #0]
 80a1118:	07d1      	lsls	r1, r2, #31
 80a111a:	bf5c      	itt	pl
 80a111c:	2201      	movpl	r2, #1
 80a111e:	601a      	strpl	r2, [r3, #0]
 80a1120:	4b0e      	ldr	r3, [pc, #56]	; (80a115c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1122:	681a      	ldr	r2, [r3, #0]
 80a1124:	07d2      	lsls	r2, r2, #31
 80a1126:	bf5c      	itt	pl
 80a1128:	2201      	movpl	r2, #1
 80a112a:	601a      	strpl	r2, [r3, #0]
 80a112c:	4770      	bx	lr
 80a112e:	bf00      	nop
 80a1130:	20000878 	.word	0x20000878
 80a1134:	20000874 	.word	0x20000874
 80a1138:	20000870 	.word	0x20000870
 80a113c:	2000086c 	.word	0x2000086c
 80a1140:	20000868 	.word	0x20000868
 80a1144:	20000864 	.word	0x20000864
 80a1148:	20000860 	.word	0x20000860
 80a114c:	2000085c 	.word	0x2000085c
 80a1150:	20000858 	.word	0x20000858
 80a1154:	20000854 	.word	0x20000854
 80a1158:	20000850 	.word	0x20000850
 80a115c:	2000084c 	.word	0x2000084c

080a1160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1160:	4b18      	ldr	r3, [pc, #96]	; (80a11c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1162:	681a      	ldr	r2, [r3, #0]
 80a1164:	07d1      	lsls	r1, r2, #31
 80a1166:	bf5c      	itt	pl
 80a1168:	2201      	movpl	r2, #1
 80a116a:	601a      	strpl	r2, [r3, #0]
 80a116c:	4b16      	ldr	r3, [pc, #88]	; (80a11c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a116e:	681a      	ldr	r2, [r3, #0]
 80a1170:	07d2      	lsls	r2, r2, #31
 80a1172:	bf5c      	itt	pl
 80a1174:	2201      	movpl	r2, #1
 80a1176:	601a      	strpl	r2, [r3, #0]
 80a1178:	4b14      	ldr	r3, [pc, #80]	; (80a11cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a117a:	681a      	ldr	r2, [r3, #0]
 80a117c:	07d0      	lsls	r0, r2, #31
 80a117e:	bf5c      	itt	pl
 80a1180:	2201      	movpl	r2, #1
 80a1182:	601a      	strpl	r2, [r3, #0]
 80a1184:	4b12      	ldr	r3, [pc, #72]	; (80a11d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1186:	681a      	ldr	r2, [r3, #0]
 80a1188:	07d1      	lsls	r1, r2, #31
 80a118a:	bf5c      	itt	pl
 80a118c:	2201      	movpl	r2, #1
 80a118e:	601a      	strpl	r2, [r3, #0]
 80a1190:	4b10      	ldr	r3, [pc, #64]	; (80a11d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1192:	681a      	ldr	r2, [r3, #0]
 80a1194:	07d2      	lsls	r2, r2, #31
 80a1196:	bf5c      	itt	pl
 80a1198:	2201      	movpl	r2, #1
 80a119a:	601a      	strpl	r2, [r3, #0]
 80a119c:	4b0e      	ldr	r3, [pc, #56]	; (80a11d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	07d0      	lsls	r0, r2, #31
 80a11a2:	bf5c      	itt	pl
 80a11a4:	2201      	movpl	r2, #1
 80a11a6:	601a      	strpl	r2, [r3, #0]
 80a11a8:	4b0c      	ldr	r3, [pc, #48]	; (80a11dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	07d1      	lsls	r1, r2, #31
 80a11ae:	bf5c      	itt	pl
 80a11b0:	2201      	movpl	r2, #1
 80a11b2:	601a      	strpl	r2, [r3, #0]
 80a11b4:	4b0a      	ldr	r3, [pc, #40]	; (80a11e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a11b6:	681a      	ldr	r2, [r3, #0]
 80a11b8:	07d2      	lsls	r2, r2, #31
 80a11ba:	bf5c      	itt	pl
 80a11bc:	2201      	movpl	r2, #1
 80a11be:	601a      	strpl	r2, [r3, #0]
 80a11c0:	4770      	bx	lr
 80a11c2:	bf00      	nop
 80a11c4:	20000898 	.word	0x20000898
 80a11c8:	20000894 	.word	0x20000894
 80a11cc:	20000890 	.word	0x20000890
 80a11d0:	2000088c 	.word	0x2000088c
 80a11d4:	20000888 	.word	0x20000888
 80a11d8:	20000884 	.word	0x20000884
 80a11dc:	20000880 	.word	0x20000880
 80a11e0:	2000087c 	.word	0x2000087c

080a11e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a11e4:	4b18      	ldr	r3, [pc, #96]	; (80a1248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a11e6:	681a      	ldr	r2, [r3, #0]
 80a11e8:	07d1      	lsls	r1, r2, #31
 80a11ea:	bf5c      	itt	pl
 80a11ec:	2201      	movpl	r2, #1
 80a11ee:	601a      	strpl	r2, [r3, #0]
 80a11f0:	4b16      	ldr	r3, [pc, #88]	; (80a124c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a11f2:	681a      	ldr	r2, [r3, #0]
 80a11f4:	07d2      	lsls	r2, r2, #31
 80a11f6:	bf5c      	itt	pl
 80a11f8:	2201      	movpl	r2, #1
 80a11fa:	601a      	strpl	r2, [r3, #0]
 80a11fc:	4b14      	ldr	r3, [pc, #80]	; (80a1250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a11fe:	681a      	ldr	r2, [r3, #0]
 80a1200:	07d0      	lsls	r0, r2, #31
 80a1202:	bf5c      	itt	pl
 80a1204:	2201      	movpl	r2, #1
 80a1206:	601a      	strpl	r2, [r3, #0]
 80a1208:	4b12      	ldr	r3, [pc, #72]	; (80a1254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a120a:	681a      	ldr	r2, [r3, #0]
 80a120c:	07d1      	lsls	r1, r2, #31
 80a120e:	bf5c      	itt	pl
 80a1210:	2201      	movpl	r2, #1
 80a1212:	601a      	strpl	r2, [r3, #0]
 80a1214:	4b10      	ldr	r3, [pc, #64]	; (80a1258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1216:	681a      	ldr	r2, [r3, #0]
 80a1218:	07d2      	lsls	r2, r2, #31
 80a121a:	bf5c      	itt	pl
 80a121c:	2201      	movpl	r2, #1
 80a121e:	601a      	strpl	r2, [r3, #0]
 80a1220:	4b0e      	ldr	r3, [pc, #56]	; (80a125c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1222:	681a      	ldr	r2, [r3, #0]
 80a1224:	07d0      	lsls	r0, r2, #31
 80a1226:	bf5c      	itt	pl
 80a1228:	2201      	movpl	r2, #1
 80a122a:	601a      	strpl	r2, [r3, #0]
 80a122c:	4b0c      	ldr	r3, [pc, #48]	; (80a1260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a122e:	681a      	ldr	r2, [r3, #0]
 80a1230:	07d1      	lsls	r1, r2, #31
 80a1232:	bf5c      	itt	pl
 80a1234:	2201      	movpl	r2, #1
 80a1236:	601a      	strpl	r2, [r3, #0]
 80a1238:	4b0a      	ldr	r3, [pc, #40]	; (80a1264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a123a:	681a      	ldr	r2, [r3, #0]
 80a123c:	07d2      	lsls	r2, r2, #31
 80a123e:	bf5c      	itt	pl
 80a1240:	2201      	movpl	r2, #1
 80a1242:	601a      	strpl	r2, [r3, #0]
 80a1244:	4770      	bx	lr
 80a1246:	bf00      	nop
 80a1248:	200008b8 	.word	0x200008b8
 80a124c:	200008b4 	.word	0x200008b4
 80a1250:	200008b0 	.word	0x200008b0
 80a1254:	200008ac 	.word	0x200008ac
 80a1258:	200008a8 	.word	0x200008a8
 80a125c:	200008a4 	.word	0x200008a4
 80a1260:	200008a0 	.word	0x200008a0
 80a1264:	2000089c 	.word	0x2000089c

080a1268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1268:	4b24      	ldr	r3, [pc, #144]	; (80a12fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a126a:	681a      	ldr	r2, [r3, #0]
 80a126c:	07d0      	lsls	r0, r2, #31
 80a126e:	bf5c      	itt	pl
 80a1270:	2201      	movpl	r2, #1
 80a1272:	601a      	strpl	r2, [r3, #0]
 80a1274:	4b22      	ldr	r3, [pc, #136]	; (80a1300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1276:	681a      	ldr	r2, [r3, #0]
 80a1278:	07d1      	lsls	r1, r2, #31
 80a127a:	bf5c      	itt	pl
 80a127c:	2201      	movpl	r2, #1
 80a127e:	601a      	strpl	r2, [r3, #0]
 80a1280:	4b20      	ldr	r3, [pc, #128]	; (80a1304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d2      	lsls	r2, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4b1e      	ldr	r3, [pc, #120]	; (80a1308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a128e:	681a      	ldr	r2, [r3, #0]
 80a1290:	07d0      	lsls	r0, r2, #31
 80a1292:	bf5c      	itt	pl
 80a1294:	2201      	movpl	r2, #1
 80a1296:	601a      	strpl	r2, [r3, #0]
 80a1298:	4b1c      	ldr	r3, [pc, #112]	; (80a130c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a129a:	681a      	ldr	r2, [r3, #0]
 80a129c:	07d1      	lsls	r1, r2, #31
 80a129e:	bf5c      	itt	pl
 80a12a0:	2201      	movpl	r2, #1
 80a12a2:	601a      	strpl	r2, [r3, #0]
 80a12a4:	4b1a      	ldr	r3, [pc, #104]	; (80a1310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a12a6:	681a      	ldr	r2, [r3, #0]
 80a12a8:	07d2      	lsls	r2, r2, #31
 80a12aa:	bf5c      	itt	pl
 80a12ac:	2201      	movpl	r2, #1
 80a12ae:	601a      	strpl	r2, [r3, #0]
 80a12b0:	4b18      	ldr	r3, [pc, #96]	; (80a1314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a12b2:	681a      	ldr	r2, [r3, #0]
 80a12b4:	07d0      	lsls	r0, r2, #31
 80a12b6:	bf5c      	itt	pl
 80a12b8:	2201      	movpl	r2, #1
 80a12ba:	601a      	strpl	r2, [r3, #0]
 80a12bc:	4b16      	ldr	r3, [pc, #88]	; (80a1318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	07d1      	lsls	r1, r2, #31
 80a12c2:	bf5c      	itt	pl
 80a12c4:	2201      	movpl	r2, #1
 80a12c6:	601a      	strpl	r2, [r3, #0]
 80a12c8:	4b14      	ldr	r3, [pc, #80]	; (80a131c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a12ca:	681a      	ldr	r2, [r3, #0]
 80a12cc:	07d2      	lsls	r2, r2, #31
 80a12ce:	bf5c      	itt	pl
 80a12d0:	2201      	movpl	r2, #1
 80a12d2:	601a      	strpl	r2, [r3, #0]
 80a12d4:	4b12      	ldr	r3, [pc, #72]	; (80a1320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a12d6:	681a      	ldr	r2, [r3, #0]
 80a12d8:	07d0      	lsls	r0, r2, #31
 80a12da:	bf5c      	itt	pl
 80a12dc:	2201      	movpl	r2, #1
 80a12de:	601a      	strpl	r2, [r3, #0]
 80a12e0:	4b10      	ldr	r3, [pc, #64]	; (80a1324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a12e2:	681a      	ldr	r2, [r3, #0]
 80a12e4:	07d1      	lsls	r1, r2, #31
 80a12e6:	bf5c      	itt	pl
 80a12e8:	2201      	movpl	r2, #1
 80a12ea:	601a      	strpl	r2, [r3, #0]
 80a12ec:	4b0e      	ldr	r3, [pc, #56]	; (80a1328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a12ee:	681a      	ldr	r2, [r3, #0]
 80a12f0:	07d2      	lsls	r2, r2, #31
 80a12f2:	bf5c      	itt	pl
 80a12f4:	2201      	movpl	r2, #1
 80a12f6:	601a      	strpl	r2, [r3, #0]
 80a12f8:	4770      	bx	lr
 80a12fa:	bf00      	nop
 80a12fc:	200008e8 	.word	0x200008e8
 80a1300:	200008e4 	.word	0x200008e4
 80a1304:	200008e0 	.word	0x200008e0
 80a1308:	200008dc 	.word	0x200008dc
 80a130c:	200008d8 	.word	0x200008d8
 80a1310:	200008d4 	.word	0x200008d4
 80a1314:	200008d0 	.word	0x200008d0
 80a1318:	200008cc 	.word	0x200008cc
 80a131c:	200008c8 	.word	0x200008c8
 80a1320:	200008c4 	.word	0x200008c4
 80a1324:	200008c0 	.word	0x200008c0
 80a1328:	200008bc 	.word	0x200008bc

080a132c <atol>:
 80a132c:	220a      	movs	r2, #10
 80a132e:	2100      	movs	r1, #0
 80a1330:	f000 b8f8 	b.w	80a1524 <strtol>

080a1334 <__cxa_atexit>:
 80a1334:	b510      	push	{r4, lr}
 80a1336:	4c05      	ldr	r4, [pc, #20]	; (80a134c <__cxa_atexit+0x18>)
 80a1338:	4613      	mov	r3, r2
 80a133a:	b12c      	cbz	r4, 80a1348 <__cxa_atexit+0x14>
 80a133c:	460a      	mov	r2, r1
 80a133e:	4601      	mov	r1, r0
 80a1340:	2002      	movs	r0, #2
 80a1342:	f3af 8000 	nop.w
 80a1346:	bd10      	pop	{r4, pc}
 80a1348:	4620      	mov	r0, r4
 80a134a:	bd10      	pop	{r4, pc}
 80a134c:	00000000 	.word	0x00000000

080a1350 <memcpy>:
 80a1350:	b510      	push	{r4, lr}
 80a1352:	1e43      	subs	r3, r0, #1
 80a1354:	440a      	add	r2, r1
 80a1356:	4291      	cmp	r1, r2
 80a1358:	d004      	beq.n	80a1364 <memcpy+0x14>
 80a135a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a135e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1362:	e7f8      	b.n	80a1356 <memcpy+0x6>
 80a1364:	bd10      	pop	{r4, pc}

080a1366 <memset>:
 80a1366:	4603      	mov	r3, r0
 80a1368:	4402      	add	r2, r0
 80a136a:	4293      	cmp	r3, r2
 80a136c:	d002      	beq.n	80a1374 <memset+0xe>
 80a136e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1372:	e7fa      	b.n	80a136a <memset+0x4>
 80a1374:	4770      	bx	lr
	...

080a1378 <srand>:
 80a1378:	b538      	push	{r3, r4, r5, lr}
 80a137a:	4b12      	ldr	r3, [pc, #72]	; (80a13c4 <srand+0x4c>)
 80a137c:	4605      	mov	r5, r0
 80a137e:	681c      	ldr	r4, [r3, #0]
 80a1380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1382:	b9d3      	cbnz	r3, 80a13ba <srand+0x42>
 80a1384:	2018      	movs	r0, #24
 80a1386:	f7ff f93f 	bl	80a0608 <malloc>
 80a138a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a138e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1390:	8003      	strh	r3, [r0, #0]
 80a1392:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1396:	8043      	strh	r3, [r0, #2]
 80a1398:	f241 2334 	movw	r3, #4660	; 0x1234
 80a139c:	8083      	strh	r3, [r0, #4]
 80a139e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a13a2:	80c3      	strh	r3, [r0, #6]
 80a13a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a13a8:	8103      	strh	r3, [r0, #8]
 80a13aa:	2305      	movs	r3, #5
 80a13ac:	8143      	strh	r3, [r0, #10]
 80a13ae:	230b      	movs	r3, #11
 80a13b0:	8183      	strh	r3, [r0, #12]
 80a13b2:	2201      	movs	r2, #1
 80a13b4:	2300      	movs	r3, #0
 80a13b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a13ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a13bc:	2200      	movs	r2, #0
 80a13be:	611d      	str	r5, [r3, #16]
 80a13c0:	615a      	str	r2, [r3, #20]
 80a13c2:	bd38      	pop	{r3, r4, r5, pc}
 80a13c4:	20000368 	.word	0x20000368

080a13c8 <strcmp>:
 80a13c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a13cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a13d0:	2a01      	cmp	r2, #1
 80a13d2:	bf28      	it	cs
 80a13d4:	429a      	cmpcs	r2, r3
 80a13d6:	d0f7      	beq.n	80a13c8 <strcmp>
 80a13d8:	1ad0      	subs	r0, r2, r3
 80a13da:	4770      	bx	lr

080a13dc <strlen>:
 80a13dc:	4603      	mov	r3, r0
 80a13de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a13e2:	2a00      	cmp	r2, #0
 80a13e4:	d1fb      	bne.n	80a13de <strlen+0x2>
 80a13e6:	1a18      	subs	r0, r3, r0
 80a13e8:	3801      	subs	r0, #1
 80a13ea:	4770      	bx	lr

080a13ec <strncmp>:
 80a13ec:	b530      	push	{r4, r5, lr}
 80a13ee:	b182      	cbz	r2, 80a1412 <strncmp+0x26>
 80a13f0:	1e45      	subs	r5, r0, #1
 80a13f2:	3901      	subs	r1, #1
 80a13f4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a13f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a13fc:	42a3      	cmp	r3, r4
 80a13fe:	d106      	bne.n	80a140e <strncmp+0x22>
 80a1400:	43ec      	mvns	r4, r5
 80a1402:	4414      	add	r4, r2
 80a1404:	42e0      	cmn	r0, r4
 80a1406:	d001      	beq.n	80a140c <strncmp+0x20>
 80a1408:	2b00      	cmp	r3, #0
 80a140a:	d1f3      	bne.n	80a13f4 <strncmp+0x8>
 80a140c:	461c      	mov	r4, r3
 80a140e:	1b18      	subs	r0, r3, r4
 80a1410:	bd30      	pop	{r4, r5, pc}
 80a1412:	4610      	mov	r0, r2
 80a1414:	bd30      	pop	{r4, r5, pc}
	...

080a1418 <_strtol_r>:
 80a1418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a141c:	460f      	mov	r7, r1
 80a141e:	4680      	mov	r8, r0
 80a1420:	483f      	ldr	r0, [pc, #252]	; (80a1520 <_strtol_r+0x108>)
 80a1422:	f8d0 9000 	ldr.w	r9, [r0]
 80a1426:	463d      	mov	r5, r7
 80a1428:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a142c:	eb09 0004 	add.w	r0, r9, r4
 80a1430:	7840      	ldrb	r0, [r0, #1]
 80a1432:	f000 0008 	and.w	r0, r0, #8
 80a1436:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a143a:	b108      	cbz	r0, 80a1440 <_strtol_r+0x28>
 80a143c:	462f      	mov	r7, r5
 80a143e:	e7f2      	b.n	80a1426 <_strtol_r+0xe>
 80a1440:	2c2d      	cmp	r4, #45	; 0x2d
 80a1442:	d103      	bne.n	80a144c <_strtol_r+0x34>
 80a1444:	1cbd      	adds	r5, r7, #2
 80a1446:	787c      	ldrb	r4, [r7, #1]
 80a1448:	2601      	movs	r6, #1
 80a144a:	e003      	b.n	80a1454 <_strtol_r+0x3c>
 80a144c:	2c2b      	cmp	r4, #43	; 0x2b
 80a144e:	bf04      	itt	eq
 80a1450:	787c      	ldrbeq	r4, [r7, #1]
 80a1452:	1cbd      	addeq	r5, r7, #2
 80a1454:	b113      	cbz	r3, 80a145c <_strtol_r+0x44>
 80a1456:	2b10      	cmp	r3, #16
 80a1458:	d10a      	bne.n	80a1470 <_strtol_r+0x58>
 80a145a:	e05b      	b.n	80a1514 <_strtol_r+0xfc>
 80a145c:	2c30      	cmp	r4, #48	; 0x30
 80a145e:	d157      	bne.n	80a1510 <_strtol_r+0xf8>
 80a1460:	7828      	ldrb	r0, [r5, #0]
 80a1462:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1466:	2858      	cmp	r0, #88	; 0x58
 80a1468:	d14d      	bne.n	80a1506 <_strtol_r+0xee>
 80a146a:	786c      	ldrb	r4, [r5, #1]
 80a146c:	2310      	movs	r3, #16
 80a146e:	3502      	adds	r5, #2
 80a1470:	2e00      	cmp	r6, #0
 80a1472:	bf14      	ite	ne
 80a1474:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1478:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a147c:	fbbc faf3 	udiv	sl, ip, r3
 80a1480:	2700      	movs	r7, #0
 80a1482:	4638      	mov	r0, r7
 80a1484:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a1488:	eb09 0e04 	add.w	lr, r9, r4
 80a148c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1490:	f01e 0f04 	tst.w	lr, #4
 80a1494:	d001      	beq.n	80a149a <_strtol_r+0x82>
 80a1496:	3c30      	subs	r4, #48	; 0x30
 80a1498:	e00b      	b.n	80a14b2 <_strtol_r+0x9a>
 80a149a:	f01e 0e03 	ands.w	lr, lr, #3
 80a149e:	d01b      	beq.n	80a14d8 <_strtol_r+0xc0>
 80a14a0:	f1be 0f01 	cmp.w	lr, #1
 80a14a4:	bf0c      	ite	eq
 80a14a6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a14aa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a14ae:	ebce 0404 	rsb	r4, lr, r4
 80a14b2:	42a3      	cmp	r3, r4
 80a14b4:	dd10      	ble.n	80a14d8 <_strtol_r+0xc0>
 80a14b6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a14ba:	d00a      	beq.n	80a14d2 <_strtol_r+0xba>
 80a14bc:	4550      	cmp	r0, sl
 80a14be:	d806      	bhi.n	80a14ce <_strtol_r+0xb6>
 80a14c0:	d101      	bne.n	80a14c6 <_strtol_r+0xae>
 80a14c2:	4564      	cmp	r4, ip
 80a14c4:	dc03      	bgt.n	80a14ce <_strtol_r+0xb6>
 80a14c6:	fb03 4000 	mla	r0, r3, r0, r4
 80a14ca:	2701      	movs	r7, #1
 80a14cc:	e001      	b.n	80a14d2 <_strtol_r+0xba>
 80a14ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a14d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a14d6:	e7d7      	b.n	80a1488 <_strtol_r+0x70>
 80a14d8:	1c7b      	adds	r3, r7, #1
 80a14da:	d10c      	bne.n	80a14f6 <_strtol_r+0xde>
 80a14dc:	2e00      	cmp	r6, #0
 80a14de:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a14e2:	bf14      	ite	ne
 80a14e4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a14e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a14ec:	f8c8 3000 	str.w	r3, [r8]
 80a14f0:	b92a      	cbnz	r2, 80a14fe <_strtol_r+0xe6>
 80a14f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a14f6:	b106      	cbz	r6, 80a14fa <_strtol_r+0xe2>
 80a14f8:	4240      	negs	r0, r0
 80a14fa:	b172      	cbz	r2, 80a151a <_strtol_r+0x102>
 80a14fc:	b107      	cbz	r7, 80a1500 <_strtol_r+0xe8>
 80a14fe:	1e69      	subs	r1, r5, #1
 80a1500:	6011      	str	r1, [r2, #0]
 80a1502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1506:	2430      	movs	r4, #48	; 0x30
 80a1508:	2b00      	cmp	r3, #0
 80a150a:	d1b1      	bne.n	80a1470 <_strtol_r+0x58>
 80a150c:	2308      	movs	r3, #8
 80a150e:	e7af      	b.n	80a1470 <_strtol_r+0x58>
 80a1510:	230a      	movs	r3, #10
 80a1512:	e7ad      	b.n	80a1470 <_strtol_r+0x58>
 80a1514:	2c30      	cmp	r4, #48	; 0x30
 80a1516:	d0a3      	beq.n	80a1460 <_strtol_r+0x48>
 80a1518:	e7aa      	b.n	80a1470 <_strtol_r+0x58>
 80a151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a151e:	bf00      	nop
 80a1520:	20000304 	.word	0x20000304

080a1524 <strtol>:
 80a1524:	4613      	mov	r3, r2
 80a1526:	460a      	mov	r2, r1
 80a1528:	4601      	mov	r1, r0
 80a152a:	4802      	ldr	r0, [pc, #8]	; (80a1534 <strtol+0x10>)
 80a152c:	6800      	ldr	r0, [r0, #0]
 80a152e:	f7ff bf73 	b.w	80a1418 <_strtol_r>
 80a1532:	bf00      	nop
 80a1534:	20000368 	.word	0x20000368

080a1538 <dynalib_user>:
 80a1538:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1548:	00000000 00410044 48474948 574f4c00     ....D.A.HIGH.LOW
 80a1558:	67696400 6c617469 64616572 67696400     .digitalread.dig
 80a1568:	6c617469 74697277 6e610065 676f6c61     italwrite.analog
 80a1578:	64616572 616e6100 77676f6c 65746972     read.analogwrite
 80a1588:	00000000                                ....

080a158c <_ZTV7TwoWire>:
	...
 80a1594:	080a06a5 080a06ef 080a06c7 080a06a7     ................
 80a15a4:	080a06cf 080a06d7 080a06df 080a06e7     ................

080a15b4 <_ZTV9IPAddress>:
	...
 80a15bc:	080a0737 080a0729 080a072b 6e6c0066     7...)...+...f.ln
 80a15cc:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a15dc:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a15ec:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a15fc:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a160c:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a161c:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a162c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a163c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a164c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a165c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a166c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a167c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a168c:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a169c:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a16ac <_ZTV8SPIClass>:
	...
 80a16b4:	080a0881 080a0883 2b25005a 3a643330     ........Z.%+03d:
 80a16c4:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a16d4:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a16e4:	00000000                                ....

080a16e8 <_ZTV11USARTSerial>:
	...
 80a16f0:	080a0afd 080a0b21 080a0b2d 080a07ad     ....!...-.......
 80a1700:	080a0b09 080a0b15 080a0b0f 080a0b1b     ................
 80a1710:	080a0aff 080a0b03                       ........

080a1718 <_ZTV9USBSerial>:
	...
 80a1720:	080a0bd5 080a0c19 080a0bf3 080a07ad     ................
 80a1730:	080a0bed 080a0bd7 080a0bdf 080a0c13     ................
 80a1740:	080a0be7 080a0bd1                       ........

080a1748 <_ZTVN5spark9WiFiClassE>:
	...
 80a1750:	080a0d3f                                ?...

080a1754 <_ctype_>:
 80a1754:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1764:	20202020 20202020 20202020 20202020                     
 80a1774:	10108820 10101010 10101010 10101010      ...............
 80a1784:	04040410 04040404 10040404 10101010     ................
 80a1794:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a17a4:	01010101 01010101 01010101 10101010     ................
 80a17b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a17c4:	02020202 02020202 02020202 10101010     ................
 80a17d4:	00000020 00000000 00000000 00000000      ...............
	...

080a1858 <__sf_fake_stdin>:
	...

080a1878 <__sf_fake_stdout>:
	...

080a1898 <__sf_fake_stderr>:
	...
 80a18b8:	00000043                                         C.

080a18ba <link_const_variable_data_end>:
	...

080a18bc <link_constructors_location>:
 80a18bc:	080a0359 	.word	0x080a0359
 80a18c0:	080a079d 	.word	0x080a079d
 80a18c4:	080a0865 	.word	0x080a0865
 80a18c8:	080a0aa9 	.word	0x080a0aa9
 80a18cc:	080a0ae9 	.word	0x080a0ae9
 80a18d0:	080a0d49 	.word	0x080a0d49
 80a18d4:	080a101d 	.word	0x080a101d
 80a18d8:	080a104d 	.word	0x080a104d
 80a18dc:	080a109d 	.word	0x080a109d
 80a18e0:	080a1161 	.word	0x080a1161
 80a18e4:	080a11e5 	.word	0x080a11e5
 80a18e8:	080a1269 	.word	0x080a1269

080a18ec <link_constructors_end>:
 80a18ec:	00000000 	.word	0x00000000
